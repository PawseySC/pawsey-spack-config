--- a/ambertools_tmpdir/AmberTools/src/configure2	2022-01-17 13:00:06.000000000 +0800
+++ b/ambertools_tmpdir/AmberTools/src/configure2	2022-01-14 15:59:29.000000000 +0800
@@ -11,7 +11,7 @@
 cat<<EOD
 Usage: ./configure [flags] compiler
 
-    where compiler is one of: [[ gnu, intel, pgi, clang, or cray ]]
+    where compiler is one of: [[ gnu, intel, pgi, clang, or cray, cray-shasta-gnu, cray-shasta-cray, cray-shasta-aocc ]]
 
                               COMPILERS
                  -------------------------------------------------------------
@@ -488,6 +488,7 @@
 has_boost=''
 installtype='serial'
 intelmpi='no'
+craympi='no'
 is_mac='no'
 ldflags=''
 ld='ld '
@@ -1375,7 +1376,7 @@
       fflags="$fflags -g"
     fi
 
-    extract_and_emit_compiler_versions '-v'
+    extract_and_emit_compiler_versions '--version'
 
     if [ $cc_version_major -ge 4 -a $cc_version_minor -ge 2 -a "$optimise" = "yes" ]; then
       if [ $sse = 'yes' ]; then
@@ -1590,7 +1591,7 @@
         fflags="$fflags -g -debug all"
     fi
 
-    extract_and_emit_compiler_versions '-v'
+    extract_and_emit_compiler_versions '--version'
 
     # Intel 18.0.x not ready for prime time; srb mar 26, 2018; see
     # [AMBER-Developers] Intel compilers and Amber18
@@ -2044,21 +2045,18 @@
 #################### cray #######
 cray)
     test -z "$pic" && pic="-fpic"
-    if [ "$intelmpi" = 'yes' ]; then
-      echo "Intel MPI requires the intel compilers."
-      exit 1
-    fi
+    craympi='yes'
     ld='ftn'
     flibs_arch=""
     flibsf_arch=
     cc=cc
-    cflags="$pic"
+    cflags="$pic -O3"
     ambercflags=""
     cplusplus=CC
-    cxxflags="$pic"
+    cxxflags="$pic -O3"
     ambercxxflags=""
     fc=ftn
-    fflags="$pic"
+    fflags="$pic -O3"
     # The -lstdc++ flag gives lots of duplicate symbol errors with cray
     fc_cxx_link_flag=""
 
@@ -2083,6 +2081,7 @@
     #       -D_FILE_OFFSET_BITS etc.) cray compilers need '-h gnu'.
     #       Also, the fortran compile requires '-emf' to force
     #       the build of module files with all-lowercase names.
+    # old cray compilers
     if [ "$optimise" = 'no' ]; then
       cflags="$cflags -O0 $cray_omp_flag -h gnu"
       cnooptflags=""
@@ -2113,7 +2112,7 @@
       fflags="$fflags -g"
     fi
 
-    extract_and_emit_compiler_versions '-V'
+    extract_and_emit_compiler_versions '--version'
 
     # Set alignment of fortran compiler
     fcreal8="-s real64"
@@ -2208,6 +2207,172 @@
     fi
     ;;
 
+#################### cray-shasta-gnu #######
+cray-shasta-gnu)
+    test -z "$pic" && pic="-fpic"
+    craympi='yes'
+    ld='ftn'
+    flibs_arch="-lgfortran -w"
+    flibsf_arch=
+    cc=cc
+    cflags="$pic -O3"
+    ambercflags=""
+    cplusplus=CC
+    cxxflags="$pic -O3"
+    ambercxxflags=""
+    fc=ftn
+    fflags="$pic -O3 -fallow-argument-mismatch"
+    # The -lstdc++ flag gives lots of duplicate symbol errors with cray
+    fc_cxx_link_flag="-lstdc++"
+    
+
+    if [ "$openmp" = 'yes' ]; then
+      omp_flag="-DOPENMP"
+      #flibs_arch="$flibs_arch -fopenmp"
+      #flibsf_arch="$flibsf_arch -fopenmp
+      cray_omp_flag=" -fopenmp "
+    elif [ "$mpi" = 'no' ]; then
+      #Note OMP is required for PMEMD MPI now so leave it on if mpi is true.
+      # OMP is enabled by default. Disable.
+      cray_omp_flag=""
+    fi
+
+    # If -noopt has been requested, force lack of optimisation;
+    # otherwise, use the default levels. Since cflags, cxxflags
+    # and fflags are used everywhere, and *optflags and
+    # *nooptflags are not (some parts of Amber and AmberTools use
+    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
+    # and so forth instead.
+    # NOTE: In order for GNU-like defines to work (e.g.
+    #       -D_FILE_OFFSET_BITS etc.) cray compilers need '-h gnu'.
+    #       Also, the fortran compile requires '-emf' to force
+    #       the build of module files with all-lowercase names.
+    if [ "$optimise" = 'no' ]; then
+      cflags="$cflags -O0 $cray_omp_flag "
+      cnooptflags=""
+      coptflags=""
+      cxxflags="$cxxflags -O0 $cray_omp_flag "
+      cxxnooptflags=""
+      cxxoptflags="$pic"
+      fflags="$fflags -O0 $cray_omp_flag"
+      fnooptflags=""
+      foptflags="-ffixed-form"
+    else
+      # cray compilers have equivalent of -O3 on by default
+      cflags="$cflags $cray_omp_flag "
+      cnooptflags=""
+      coptflags=""
+      cxxflags="$cxxflags $cray_omp_flag "
+      cxxnooptflags=""
+      cxxoptflags="$pic"
+      fflags="$fflags $cray_omp_flag"
+      fnooptflags=""
+      foptflags="-ffixed-form"
+    fi
+
+    # Debugging options
+    if [ "$debug" = 'yes' ]; then
+      cflags="$cflags -g"
+      cxxflags="$cxxflags -g"
+      fflags="$fflags -g"
+    fi
+
+    extract_and_emit_compiler_versions '--version'
+
+    # Set alignment of fortran compiler
+    fcreal8="-s real64"
+
+    # For now, fftw3 is not compiled and rism is disabled.
+    if [ "$rism" != 'no' ]; then
+      echo "Error: RISM currently not built with cray compilers."
+      echo "       Please re-run configure with the '-nofftw3' flag to use this compiler:"
+      echo "            `mod_command_args '-rism' '-nofftw3'`"
+      exit 1
+    fi
+
+    if [ "$cygwin" = 'yes' -o "$windows" = 'yes' ]; then
+      echo "Error: cygwin not supported with cray compilers."
+      exit 1
+    fi
+
+    # The bundled NetCDF will not build with cray compilers. Require external.
+    if [ "$bintraj" = 'yes' -a -z "$netcdf_dir" ] ; then
+      echo "Error: Bundled NetCDF cannot be used with cray compilers."
+      echo "       Please re-run configure with the '--with-netcdf <DIR>' flag to"
+      echo "       specify system NetCDF to use. On cray systems you can usually"
+      echo "       load the system NetCDF with 'module load cray-netcdf' or"
+      echo "       'module load netcdf'."
+      exit 1
+    fi
+    # For some reason if static linking of NetCDF is not forced you end up
+    # with lots of missing symbols.
+    netcdfstatic='yes'
+
+    # Currently xleap on cray will not build due to errors like
+    #/usr/lib64/libX11.a(ClDisplay.o): In function `XCloseDisplay':
+    #/usr/src/packages/BUILD/libX11-1.1.5/src/ClDisplay.c:78: undefined reference to `xcb_disconnect'
+    if [ "$noX11" = 'false' ] ; then
+      echo "Error: Cannot build XLEaP with cray compilers."
+      echo "       Please re-run configure with the '-noX11' flag to use this compiler."
+      exit 1
+    fi
+
+    freeformat_flag="-ffree-form"
+
+    #PMEMD Specifics
+    # PMEMD right now with cray requires external FFTW3 library
+    cat > conftest.f90 <<EOF
+program conftest
+include 'fftw3.f'
+       write(*,'(a)') 'gotcha!'
+end program conftest
+EOF
+    echo ""
+    echo "Checking for external FFTW3 library (required for PMEMD w/ $compiler compilers)"
+    $fc $fflags $fnooptflags -o conftest$suffix conftest.f90
+    echo "     $fc $fflags $fnooptflags -o conftest$suffix conftest.f90"
+    ./conftest$suffix | grep "gotcha!" > /dev/null
+    status=$?
+    if [ $status -gt 0 ]; then
+      echo "Error: FFTW3 library not found."
+      echo "       Ensure FFTW3 library can be found by your compiler."
+      echo "       On cray systems this can usually be done with 'module load fftw'"
+      exit 1
+    fi
+    echo "OK"
+    /bin/rm -f conftest.f90 conftest$objsuffix conftest$suffix
+
+    #pmemd_fpp_flags='-DPUBFFT'
+    pmemd_fpp_flags='-DFFTW_FFT'
+    pmemd_foptflags="$foptflags $cray_omp_flag"
+    pmemd_coptflags="$coptflags  $cray_omp_flag"
+
+    if [ "$debug" = 'yes' ]; then
+        pmemd_foptflags="-g $pmemd_foptflags"
+        pmemd_coptflags="-g $pmemd_coptflags"
+    fi
+
+    #CUDA Specifics
+    if [ "$cuda" = 'yes' ]; then
+      pmemd_cu_includes='-I$(CUDA_HOME)/include -IB40C'
+      pmemd_cu_defines='-DCUDA'
+      pmemd_cu_libs="./cuda/cuda.a -L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcurand -lcufft -lcudart $fc_cxx_link_flag"
+      pbsa_cu_libs="-L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcublas -lcusparse -lcudart $fc_cxx_link_flag"
+      if [ "$optimise" = 'no' ]; then
+        nvcc="$nvcc -use_fast_math -O0 "
+      else
+        nvcc="$nvcc -use_fast_math -O3 "
+      fi
+      if [ "$mpi" = 'yes' ]; then
+        mpi_inc=`(mpicc -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-I" ) {printf("%s ", $i);}; i++;}}'`
+        pmemd_cu_includes="$pmemd_cu_includes $mpi_inc"
+        pmemd_cu_defines="$pmemd_cu_defines -DMPI -DMPICH_IGNORE_CXX_SEEK"
+        pmemd_coptflags="$coptflags -DMPICH_IGNORE_CXX_SEEK"
+      fi
+    fi
+    ;;
+
+
 #################### clang ####
 clang)
     if [ "$intelmpi" = 'yes' ]; then
@@ -2324,7 +2489,7 @@
       fi
     fi
 
-    extract_and_emit_compiler_versions "-v"
+    extract_and_emit_compiler_versions "--version"
     ;;
 #################### unknown choice #######
 *)
@@ -2534,7 +2699,9 @@
 
 echo ""
 echo "Testing the $cc compiler:"
-echo "     $cc $cflags $cnooptflags -o testp$suffix testp.c"
+echo "     $cc with testp$suffix testp.c"
+echo "     cflags $cflags "
+echo "     nooptflags $cnooptflags "
 $cc $cflags $cnooptflags -o testp$suffix testp.c
 $wine ./testp$suffix | grep "testing a C program" > /dev/null
 status=$?
@@ -3183,6 +3350,9 @@
     if [ "$intelmpi" = "yes" ]; then
         mpicc="MPICC=mpiicc"
     fi
+    if [ "$craympi" = "yes" ]; then
+        mpicc="MPICC=cc"
+    fi
     if [ "$debug" = "yes" ]; then
         enable_debug="--enable-debug=yes --enable-debug-malloc=yes --enable-debug-alignment=yes"
     fi
@@ -3381,6 +3551,10 @@
       if [ -z "$MPICC" ]; then cc="mpiicc"; else cc="$MPICC"; fi
       if [ -z "$MPICXX" ]; then cplusplus="mpiicpc"; else cplusplus="$MPICXX"; fi
       if [ -z "$MPIF90" ]; then fc="mpiifort"; else fc="$MPIF90"; fi
+  elif [ "$craympi" = 'yes' ]; then
+      if [ -z "$MPICC" ]; then cc="cc"; else cc="$MPICC"; fi
+      if [ -z "$MPICXX" ]; then cplusplus="CC"; else cplusplus="$MPICXX"; fi
+      if [ -z "$MPIF90" ]; then fc="ftn"; else fc="$MPIF90"; fi
   else
       if [ -z "$MPICC" ]; then cc="mpicc"; else cc="$MPICC"; fi
       if [ -z "$MPICXX" ]; then cplusplus="mpicxx"; else cplusplus="$MPICXX"; fi
