--- a/ambertools_tmpdir/AmberTools/src/configure2	2020-04-28 09:19:43.000000000 +0800
+++ b/ambertools_tmpdir/AmberTools/src/configure2	2022-02-14 11:13:05.0000000 +0800
@@ -11,7 +11,7 @@
 cat<<EOD
 Usage: ./configure [flags] compiler
 
-    where compiler is one of: [[ gnu, intel, pgi, clang, or cray ]]
+    where compiler is one of: [[ gnu, intel, pgi, clang, or cray, cray-shasta-gnu, cray-shasta-cray, cray-shasta-aocc ]]
 
                               COMPILERS
                  -------------------------------------------------------------
@@ -191,6 +191,12 @@
                      have both C and Fortran interfaces.  Required for Cray
                      compilers.
 
+      --with-netcdf-c </path/to/netcdf-c>
+                     Specify an external NetCDF C build to use. 
+
+      --with-netcdf-fortran </path/to/netcdf-fortran>
+                     Specify an external NetCDF Fortran build to use. 
+
       -netcdfstatic  Force static linking to the external NetCDF specified via
                      the --with-netcdf option.
 
@@ -488,6 +494,7 @@
 has_boost=''
 installtype='serial'
 intelmpi='no'
+craympi='no'
 is_mac='no'
 ldflags=''
 ld='ld '
@@ -509,6 +516,8 @@
 mpinab=''
 mpi='no'
 netcdf_dir=''
+netcdfc_dir=''
+netcdff_dir=''
 netcdf_flag=''
 netcdfstatic='no'
 pmemd_gem='no'
@@ -607,6 +616,8 @@
         --skip-python)    skippython='yes' ;;
         --with-python)    shift; python="$1";;
         --with-netcdf)    shift; netcdf_dir="$1";;
+        --with-netcdf-c)  shift; netcdfc_dir="$1";;
+        --with-netcdf-fortran)  shift; netcdff_dir="$1";;
         --with-pnetcdf)   shift; pnetcdf_dir="$1" ;;
         --python-install) shift; python_install="$1";;
         --miniconda)      answer='y';;
@@ -1375,7 +1386,7 @@
       fflags="$fflags -g"
     fi
 
-    extract_and_emit_compiler_versions '-v'
+    extract_and_emit_compiler_versions '--version'
 
     if [ $cc_version_major -ge 4 -a $cc_version_minor -ge 2 -a "$optimise" = "yes" ]; then
       if [ $sse = 'yes' ]; then
@@ -1590,7 +1601,7 @@
         fflags="$fflags -g -debug all"
     fi
 
-    extract_and_emit_compiler_versions '-v'
+    extract_and_emit_compiler_versions '--version'
 
     # Intel 18.0.x not ready for prime time; srb mar 26, 2018; see
     # [AMBER-Developers] Intel compilers and Amber18
@@ -2044,21 +2055,18 @@
 #################### cray #######
 cray)
     test -z "$pic" && pic="-fpic"
-    if [ "$intelmpi" = 'yes' ]; then
-      echo "Intel MPI requires the intel compilers."
-      exit 1
-    fi
+    craympi='yes'
     ld='ftn'
     flibs_arch=""
     flibsf_arch=
     cc=cc
-    cflags="$pic"
+    cflags="$pic -O3"
     ambercflags=""
     cplusplus=CC
-    cxxflags="$pic"
+    cxxflags="$pic -O3"
     ambercxxflags=""
     fc=ftn
-    fflags="$pic"
+    fflags="$pic -O3"
     # The -lstdc++ flag gives lots of duplicate symbol errors with cray
     fc_cxx_link_flag=""
 
@@ -2083,6 +2091,7 @@
     #       -D_FILE_OFFSET_BITS etc.) cray compilers need '-h gnu'.
     #       Also, the fortran compile requires '-emf' to force
     #       the build of module files with all-lowercase names.
+    # old cray compilers
     if [ "$optimise" = 'no' ]; then
       cflags="$cflags -O0 $cray_omp_flag -h gnu"
       cnooptflags=""
@@ -2113,7 +2122,7 @@
       fflags="$fflags -g"
     fi
 
-    extract_and_emit_compiler_versions '-V'
+    extract_and_emit_compiler_versions '--version'
 
     # Set alignment of fortran compiler
     fcreal8="-s real64"
@@ -2208,6 +2217,169 @@
     fi
     ;;
 
+#################### cray-shasta-gnu #######
+cray-shasta-gnu)
+    test -z "$pic" && pic="-fpic"
+    craympi='yes'
+    ld='ftn'
+    flibs_arch="-lgfortran -w"
+    flibsf_arch=
+    cc=cc
+    cflags="$pic -O3"
+    ambercflags=""
+    cplusplus=CC
+    cxxflags="$pic -O3"
+    ambercxxflags=""
+    fc=ftn
+    fflags="$pic -O3 -fallow-argument-mismatch -fallow-invalid-boz"
+    # The -lstdc++ flag gives lots of duplicate symbol errors with cray
+    fc_cxx_link_flag="-lstdc++"
+    
+
+    if [ "$openmp" = 'yes' ]; then
+      omp_flag="-DOPENMP"
+      #flibs_arch="$flibs_arch -fopenmp"
+      #flibsf_arch="$flibsf_arch -fopenmp
+      cray_omp_flag=" -fopenmp "
+    elif [ "$mpi" = 'no' ]; then
+      #Note OMP is required for PMEMD MPI now so leave it on if mpi is true.
+      # OMP is enabled by default. Disable.
+      cray_omp_flag=""
+    fi
+
+    # If -noopt has been requested, force lack of optimisation;
+    # otherwise, use the default levels. Since cflags, cxxflags
+    # and fflags are used everywhere, and *optflags and
+    # *nooptflags are not (some parts of Amber and AmberTools use
+    # neither *optflags nor *nooptflags), we'll put -O0 in cflags
+    # and so forth instead.
+    # NOTE: In order for GNU-like defines to work (e.g.
+    #       -D_FILE_OFFSET_BITS etc.) cray compilers need '-h gnu'.
+    #       Also, the fortran compile requires '-emf' to force
+    #       the build of module files with all-lowercase names.
+    if [ "$optimise" = 'no' ]; then
+      cflags="$cflags -O0 $cray_omp_flag "
+      cnooptflags=""
+      coptflags=""
+      cxxflags="$cxxflags -O0 $cray_omp_flag "
+      cxxnooptflags=""
+      cxxoptflags="$pic"
+      fflags="$fflags -O0 $cray_omp_flag"
+      fnooptflags=""
+      foptflags=""
+    else
+      cflags="$cflags -O3 $cray_omp_flag "
+      cnooptflags=""
+      coptflags=""
+      cxxflags="$cxxflags -O3 $cray_omp_flag "
+      cxxnooptflags=""
+      cxxoptflags="$pic"
+      fflags="$fflags -O3 $cray_omp_flag"
+      fnooptflags=""
+      foptflags=""
+    fi
+
+    # Debugging options
+    if [ "$debug" = 'yes' ]; then
+      cflags="$cflags -g"
+      cxxflags="$cxxflags -g"
+      fflags="$fflags -g"
+    fi
+
+    extract_and_emit_compiler_versions '--version'
+
+    # Set alignment of fortran compiler
+    fcreal8="-s real64"
+
+    # For now, fftw3 is not compiled and rism is disabled.
+    # if [ "$rism" != 'no' ]; then
+    #   echo "Error: RISM currently not built with cray compilers."
+    #   echo "       Please re-run configure with the '-nofftw3' flag to use this compiler:"
+    #   echo "            `mod_command_args '-rism' '-nofftw3'`"
+    #   exit 1
+    # fi
+
+    if [ "$cygwin" = 'yes' -o "$windows" = 'yes' ]; then
+      echo "Error: cygwin not supported with cray compilers."
+      exit 1
+    fi
+
+    # The bundled NetCDF will not build with cray compilers. Require external.
+    if [ "$bintraj" = 'yes' -a -z "$netcdfc_dir" -a -z "$netcdff_dir" ] ; then
+      echo "Error: Bundled NetCDF cannot be used with cray compilers."
+      echo "       Please re-run configure with the '--with-netcdf-c <DIR>' flag to"
+      echo "       specify system NetCDF C to use. "
+      echo "       Please re-run configure with the '--with-netcdf-fortran <DIR>' flag to"
+      echo "       specify system NetCDF Fortran to use. "
+      exit 1
+    fi
+    # For some reason if static linking of NetCDF is not forced you end up
+    # with lots of missing symbols.
+    # looks like netcdfstatic is also used to indicate use external netcdf
+    #netcdfstatic='yes'
+
+    # Currently xleap on cray will not build due to errors like
+    #/usr/lib64/libX11.a(ClDisplay.o): In function `XCloseDisplay':
+    #/usr/src/packages/BUILD/libX11-1.1.5/src/ClDisplay.c:78: undefined reference to `xcb_disconnect'
+    if [ "$noX11" = 'false' ] ; then
+      echo "Error: Cannot build XLEaP with cray compilers."
+      echo "       Please re-run configure with the '-noX11' flag to use this compiler."
+      exit 1
+    fi
+
+    freeformat_flag="-ffree-form"
+
+#     #PMEMD Specifics
+#     cat > conftest.f90 <<EOF
+# program conftest
+# include 'fftw3.f'
+#        write(*,'(a)') 'gotcha!'
+# end program conftest
+# EOF
+#     echo ""
+#     echo "Checking for external FFTW3 library (required for PMEMD w/ $compiler compilers)"
+#     $fc $fflags $fnooptflags -o conftest$suffix conftest.f90 -lfftw3 -I${PAWSEY_FFTW_HOME}/include/
+#     echo "     $fc $fflags $fnooptflags -o conftest$suffix conftest.f90"
+#     ./conftest$suffix | grep "gotcha!" > /dev/null
+#     status=$?
+#     if [ $status -gt 0 ]; then
+#       echo "Error: FFTW3 library not found."
+#       echo "       Ensure FFTW3 library can be found by your compiler."
+#       exit 1
+#     fi
+#     echo "OK"
+#     /bin/rm -f conftest.f90 conftest$objsuffix conftest$suffix
+
+    pmemd_fpp_flags='-DPUBFFT -DGNU_HACKS'
+    pmemd_foptflags="$foptflags $cray_omp_flag -fallow-invalid-boz -fallow-argument-mismatch"
+    pmemd_coptflags="$coptflags  $cray_omp_flag"
+
+    if [ "$debug" = 'yes' ]; then
+        pmemd_foptflags="-g $pmemd_foptflags"
+        pmemd_coptflags="-g $pmemd_coptflags"
+    fi
+
+    #CUDA Specifics
+    if [ "$cuda" = 'yes' ]; then
+      pmemd_cu_includes='-I$(CUDA_HOME)/include -IB40C'
+      pmemd_cu_defines='-DCUDA'
+      pmemd_cu_libs="./cuda/cuda.a -L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcurand -lcufft -lcudart $fc_cxx_link_flag"
+      pbsa_cu_libs="-L\$(CUDA_HOME)/lib64 -L\$(CUDA_HOME)/lib -lcublas -lcusparse -lcudart $fc_cxx_link_flag"
+      if [ "$optimise" = 'no' ]; then
+        nvcc="$nvcc -use_fast_math -O0 "
+      else
+        nvcc="$nvcc -use_fast_math -O3 "
+      fi
+      if [ "$mpi" = 'yes' ]; then
+        mpi_inc=`(mpicc -show 2>&1) | awk 'BEGIN{i=0} {while (i < NF) {if ( substr($i, 1, 2) == "-I" ) {printf("%s ", $i);}; i++;}}'`
+        pmemd_cu_includes="$pmemd_cu_includes $mpi_inc"
+        pmemd_cu_defines="$pmemd_cu_defines -DMPI -DMPICH_IGNORE_CXX_SEEK"
+        pmemd_coptflags="$coptflags -DMPICH_IGNORE_CXX_SEEK"
+      fi
+    fi
+    ;;
+
+
 #################### clang ####
 clang)
     if [ "$intelmpi" = 'yes' ]; then
@@ -2324,7 +2496,7 @@
       fi
     fi
 
-    extract_and_emit_compiler_versions "-v"
+    extract_and_emit_compiler_versions "--version"
     ;;
 #################### unknown choice #######
 *)
@@ -2534,7 +2706,9 @@
 
 echo ""
 echo "Testing the $cc compiler:"
-echo "     $cc $cflags $cnooptflags -o testp$suffix testp.c"
+echo "     $cc with testp$suffix testp.c"
+echo "     cflags $cflags "
+echo "     nooptflags $cnooptflags "
 $cc $cflags $cnooptflags -o testp$suffix testp.c
 $wine ./testp$suffix | grep "testing a C program" > /dev/null
 status=$?
@@ -2751,11 +2925,12 @@
   cflags="$cflags -DBINTRAJ"
   pmemd_coptflags="$pmemd_coptflags -DBINTRAJ"
   fppflags="$fppflags -DBINTRAJ"
-  if [ "$netcdf_dir" = '' ]; then
+  if [ "$netcdf_dir" = '' -a "$netcdfc_dir" = '' -a "$netcdff_dir" = '' ]; then
     # Use bundled NetCDF library.
     if [ "$netcdfstatic" != 'no' ] ; then
       echo "Error: -netcdfstatic requires an external NetCDF specified via"
       echo "       the --with-netcdf option."
+      echo "       Or --with-netcdf-c and --with-netcdf-fortran option."
       exit 1
     fi
     # Initially set full paths for use with test_netcdf_compile.
@@ -2893,38 +3068,77 @@
     netcdf="\$(INCDIR)/netcdf.mod"
   else
     # A NetCDF directory was specified. Check that library exists and compiles
-    printf "\tUsing external NetCDF in '$netcdf_dir'\n"
-    netcdfinc="-I"$netcdf_dir"/include"
-    if [ "${netcdf_dir}" != '/usr' -a "$netcdf_dir" != '/usr/' ]; then
-        netcdf_flag="-L${netcdf_dir}/lib $netcdf_flag"
-    fi
-    netcdf=$netcdf_dir"/include/netcdf.mod"
-    if [ "$netcdfstatic" = 'no' ] ; then
-      if [ "${netcdf_dir}" != '/usr' -a "${netcdf_dir}" != '/usr/' ]; then
-          netcdfflagc="-L${netcdf_dir}/lib -lnetcdf"
-          netcdfflagf="-L${netcdf_dir}/lib -lnetcdff -lnetcdf"
-      else
-          netcdfflagc="-lnetcdf"
-          netcdfflagf="-lnetcdff -lnetcdf"
-      fi
-    else # Force static linking to netcdf
-      printf "\tForcing static linking to external NetCDF\n"
-      netcdfflagc=$netcdf_dir"/lib/libnetcdf.a"
-      if [ ! -e "$netcdfflagc" ]; then
-        echo "Error: '$netcdfflagc' not found."
-        exit 1
+    printf "\tUsing external NetCDF in '$netcdf_dir' or "
+    printf "NetCDF-C '$netcdfc_dir' with NetCDF-Fortran '$netcdff_dir' \n"
+
+    # if individual netcdfc and fortran passed 
+    if [ "$netcdf_dir" = '' ]; then 
+      netcdfinc="-I"$netcdfc_dir"/include "
+      netcdfinc+="-I"$netcdff_dir"/include"
+      # netcdf c and fortran directories passed
+      if [ "${netcdfc_dir}" != '/usr' -a "$netcdfc_dir" != '/usr/' ]; then
+          netcdf_flag="-L${netcdfc_dir}/lib $netcdf_flag"
+      fi
+      if [ "${netcdff_dir}" != '/usr' -a "$netcdff_dir" != '/usr/' ]; then
+          netcdf_flag="-L${netcdff_dir}/lib $netcdf_flag"
+      fi
+      netcdf=$netcdff_dir"/include/netcdf.mod"
+      if [ "$netcdfstatic" = 'no' ] ; then
+        if [ "${netcdfc_dir}" != '/usr' -a "${netcdfc_dir}" != '/usr/' ]; then
+            netcdfflagc="-L${netcdfc_dir}/lib -lnetcdf"
+            netcdfflagf="-L${netcdff_dir}/lib -lnetcdff -lnetcdf"
+        else
+            netcdfflagc="-lnetcdf"
+            netcdfflagf="-lnetcdff -lnetcdf"
+        fi
+      else # Force static linking to netcdf
+        printf "\tForcing static linking to external NetCDF\n"
+        netcdfflagc=$netcdfc_dir"/lib/libnetcdf.a"
+        if [ ! -e "$netcdfflagc" ]; then
+          echo "Error: '$netcdfflagc' not found."
+          exit 1
+        fi
+        netcdfflagf=$netcdff_dir"/lib/libnetcdff.a"
+        if [ ! -e "$netcdfflagf" ]; then
+          echo "Error: '$netcdfflagf' not found."
+          exit 1
+        fi
+        netcdfflagf="$netcdfflagf $netcdfflagc"
       fi
-      netcdfflagf=$netcdf_dir"/lib/libnetcdff.a"
-      if [ ! -e "$netcdfflagf" ]; then
-        echo "Error: '$netcdfflagf' not found."
-        exit 1
+    else 
+      netcdfinc="-I"$netcdf_dir"/include"
+      if [ "${netcdf_dir}" != '/usr' -a "$netcdf_dir" != '/usr/' ]; then
+          netcdf_flag="-L${netcdf_dir}/lib $netcdf_flag"
+      fi
+      netcdf=$netcdf_dir"/include/netcdf.mod"
+      if [ "$netcdfstatic" = 'no' ] ; then
+        if [ "${netcdf_dir}" != '/usr' -a "${netcdf_dir}" != '/usr/' ]; then
+            netcdfflagc="-L${netcdf_dir}/lib -lnetcdf"
+            netcdfflagf="-L${netcdf_dir}/lib -lnetcdff -lnetcdf"
+        else
+            netcdfflagc="-lnetcdf"
+            netcdfflagf="-lnetcdff -lnetcdf"
+        fi
+      else # Force static linking to netcdf
+        printf "\tForcing static linking to external NetCDF\n"
+        netcdfflagc=$netcdf_dir"/lib/libnetcdf.a"
+        if [ ! -e "$netcdfflagc" ]; then
+          echo "Error: '$netcdfflagc' not found."
+          exit 1
+        fi
+        netcdfflagf=$netcdf_dir"/lib/libnetcdff.a"
+        if [ ! -e "$netcdfflagf" ]; then
+          echo "Error: '$netcdfflagf' not found."
+          exit 1
+        fi
+        netcdfflagf="$netcdfflagf $netcdfflagc"
       fi
-      netcdfflagf="$netcdfflagf $netcdfflagc"
     fi
     # Test netcdf compilation
     test_netcdf_compile verbose
     if [ $? -gt 0 ]; then
-      echo "Error: Could not compile using NetCDF in '$netcdf_dir'"
+      echo "Error: Could not compile using NetCDF in '$netcdf_dir' or "
+      echo "NetCDF-C in '$netcdfc_dir' and NetCDF-Fortran in '$netcdff_dir'"
       exit 1
     fi
     echo "OK"
@@ -3183,6 +3397,9 @@
     if [ "$intelmpi" = "yes" ]; then
         mpicc="MPICC=mpiicc"
     fi
+    if [ "$craympi" = "yes" ]; then
+        mpicc="MPICC=cc"
+    fi
     if [ "$debug" = "yes" ]; then
         enable_debug="--enable-debug=yes --enable-debug-malloc=yes --enable-debug-alignment=yes"
     fi
@@ -3381,6 +3598,10 @@
       if [ -z "$MPICC" ]; then cc="mpiicc"; else cc="$MPICC"; fi
       if [ -z "$MPICXX" ]; then cplusplus="mpiicpc"; else cplusplus="$MPICXX"; fi
       if [ -z "$MPIF90" ]; then fc="mpiifort"; else fc="$MPIF90"; fi
+  elif [ "$craympi" = 'yes' ]; then
+      if [ -z "$MPICC" ]; then cc="cc"; else cc="$MPICC"; fi
+      if [ -z "$MPICXX" ]; then cplusplus="CC"; else cplusplus="$MPICXX"; fi
+      if [ -z "$MPIF90" ]; then fc="ftn"; else fc="$MPIF90"; fi
   else
       if [ -z "$MPICC" ]; then cc="mpicc"; else cc="$MPICC"; fi
       if [ -z "$MPICXX" ]; then cplusplus="mpicxx"; else cplusplus="$MPICXX"; fi
@@ -3574,6 +3795,8 @@
 fi
 if [ ! -z "$netcdf_dir" ] ; then
   CPPTRAJOPTS="$CPPTRAJOPTS --with-netcdf=$netcdf_dir"
+elif [ ! -z "$netcdfc_dir" ]; then 
+  CPPTRAJOPTS="$CPPTRAJOPTS --with-netcdf-c=$netcdfc_dir --with-netcdf-fortran=$netcdff_dir"
 else
   CPPTRAJOPTS="$CPPTRAJOPTS --with-netcdf=$CPPTRAJHOME"
 fi
@@ -3799,6 +4022,16 @@
   elif [ "$installtype" = 'openmp' ] ; then
     installtype='cray_openmp'
   fi
+elif [ "$compiler" = 'cray-shasta-gnu' ] ; then
+  echo "Warning: Currently PBSA and related programs (MMPBSA, Sander, etc)"
+  echo "         do not build with cray compilers."
+  if [ "$installtype" = 'serial' ] ; then
+    installtype='cray_serial'
+  elif [ "$installtype" = 'parallel' ] ; then
+    installtype='cray_parallel'
+  elif [ "$installtype" = 'openmp' ] ; then
+    installtype='cray_openmp'
+  fi
 fi
 
 #------------------------------------------------------------------------------
@@ -4049,7 +4282,7 @@
 PYTHON=$python
 PYTHON_INSTALL=$python_install_string
 SKIP_PYTHON=$skippython
-PYTHONPATH=\$(AMBER_PREFIX)/lib/python$python_ver/site-packages
+PYTHONPATH=$PYTHONPATH:\$(AMBER_PREFIX)/lib/python$python_ver/site-packages
 PYTHONLOG=$pythonlog
 
 PYSANDER=$pysander
