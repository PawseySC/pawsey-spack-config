diff --git a/CMakeLists.txt b/CMakeLists.txt
index efd18d2ba..afecf8e51 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,6 +111,8 @@ option(BUILD_SHARED        "Build Charm++ dynamic libraries" OFF)
 # Other options
 option(EVERYLB             "Compile EveryLB suite of load balancing strategies" OFF)
 option(F90CHARM            "Build f90charm" OFF)
+# LRTS PMI options
+set(LRTS_PMI "" CACHE STRING "PMI type for UCX and OFI layers, can be one of simplepmi, slurmpmi, slurmpmi2, or ompipmix")
 
 set(EXTRA_OPTS "" CACHE STRING "Extra flags to pass to compilers.")
 add_compile_options(${EXTRA_OPTS})
@@ -227,6 +229,14 @@ endif()
 
 set(CHARM_PLATFORM "${NETWORK}-${CHARM_OS}-${CHARM_CPU}")
 
+set(CMK_BUILD_CRAY 0)
+if(${NETWORK} MATCHES "gni-" OR ${NETWORK} MATCHES "ofi-cray")
+  set(CHARM_PLATFORM "${NETWORK}")
+  set(CMK_BUILD_CRAY 1)
+elseif(${NETWORK} MATCHES "mpi-cray")
+  set(CHARM_PLATFORM "${NETWORK}")
+endif()
+
 set(CMK_BUILD_MPI 0)
 set(CMK_BUILD_ON_MPI 0)
 if(${NETWORK} STREQUAL "mpi")
@@ -346,6 +356,12 @@ set(CMK_F_OPENMP ${OpenMP_Fortran_FLAGS})
 
 if(EXISTS ${CMAKE_SOURCE_DIR}/src/arch/${NETWORK}/gdir_link)
   file(STRINGS src/arch/${NETWORK}/gdir_link GDIR)
+elseif(${NETWORK} MATCHES "gni-")
+  set(GDIR "gni")
+elseif(${NETWORK} MATCHES "mpi-cray")
+  set(GDIR "mpi")
+elseif(${NETWORK} MATCHES "ofi-cray")
+  set(GDIR "ofi")
 else()
   set(GDIR ${NETWORK})
 endif()
@@ -407,6 +423,11 @@ if(EXISTS ${CMAKE_SOURCE_DIR}/src/arch/${GDIR}/conv-mach-local.sh)
   configure_file(src/arch/${GDIR}/conv-mach-local.h            include/ COPYONLY)
 endif()
 
+if(LRTS_PMI)
+  configure_file(${CMAKE_SOURCE_DIR}/src/arch/${GDIR}/conv-mach-${LRTS_PMI}.sh include/ COPYONLY)
+  configure_file(${CMAKE_SOURCE_DIR}/src/arch/${GDIR}/conv-mach-${LRTS_PMI}.h include/ COPYONLY)
+endif()
+
 # Header files
 configure_file(src/arch/${GDIR}/conv-common.h                include/ COPYONLY)
 configure_file(src/arch/${VDIR}/conv-mach.h                  include/ COPYONLY)
@@ -448,34 +469,35 @@ endforeach()
 
 
 # proc_management
-# file(MAKE_DIRECTORY include/proc_management/simple_pmi)
-
-set(proc_management-sources
-src/arch/util/proc_management/runtime-pmi.C
-src/arch/util/proc_management/runtime-pmix.C
-src/arch/util/proc_management/runtime-codec.h
-src/arch/util/proc_management/runtime-pmi2.C
-src/arch/util/proc_management/runtime.h
-)
-
-set(proc_management-simple_pmi-sources
-src/arch/util/proc_management/simple_pmi/pmi.h
-src/arch/util/proc_management/simple_pmi/mpl.h
-src/arch/util/proc_management/simple_pmi/simple_pmi.C
-src/arch/util/proc_management/simple_pmi/simple_pmiutil.C
-src/arch/util/proc_management/simple_pmi/simple_pmiutil.h
-)
-
-# FIXME: these should be in include/proc_management
-foreach(filename ${proc_management-sources})
-    configure_file(${filename} include/ COPYONLY)
-endforeach()
-
-# FIXME: these should be in include/proc_management/simple_pmi
-foreach(filename ${proc_management-simple_pmi-sources})
-    configure_file(${filename} include/ COPYONLY)
-endforeach()
-
+if(${NETWORK} MATCHES "ucx" OR ${NETWORK} MATCHES "ofi")
+  # file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/include/proc_management/simple_pmi)
+
+  set(proc_management-sources
+  src/arch/util/proc_management/runtime-pmi.C
+  src/arch/util/proc_management/runtime-pmix.C
+  src/arch/util/proc_management/runtime-codec.h
+  src/arch/util/proc_management/runtime-pmi2.C
+  src/arch/util/proc_management/runtime.h
+  )
+
+  set(proc_management-simple_pmi-sources
+  src/arch/util/proc_management/simple_pmi/pmi.h
+  src/arch/util/proc_management/simple_pmi/mpl.h
+  src/arch/util/proc_management/simple_pmi/simple_pmi.C
+  src/arch/util/proc_management/simple_pmi/simple_pmiutil.C
+  src/arch/util/proc_management/simple_pmi/simple_pmiutil.h
+  )
+
+  # FIXME: this should be in include/proc_management/
+  foreach(filename ${proc_management-sources})
+      configure_file(${filename} include/ COPYONLY)
+  endforeach()
+
+  # FIXME: this should be in include/proc_management/simple_pmi
+  foreach(filename ${proc_management-simple_pmi-sources})
+      configure_file(${filename} include/ COPYONLY)
+  endforeach()
+endif()
 
 # Charmxi
 add_subdirectory(src/xlat-i)
@@ -647,7 +669,10 @@ set(optfile_sh ${CMAKE_BINARY_DIR}/include/conv-mach-opt.sh)
 file(WRITE  ${optfile_sh} "# Build-time options header, automatically generated by cmake\n")
 file(APPEND  ${optfile_sh} "[ -z \"$CHARMINC\" ] && CHARMINC=\".\"\n")
 
-if(NOT ${NETWORK} STREQUAL "mpi")
+# This needs to appear before sourcing the cc-$compiler.sh file
+file(APPEND  ${optfile_sh} "CMK_COMPILER_SUFFIX=${CMK_COMPILER_SUFFIX}\n")
+
+if(NOT ${NETWORK} STREQUAL "mpi" AND NOT ${NETWORK} MATCHES "gni-" AND NOT ${NETWORK} MATCHES "-cray")
     file(APPEND ${optfile_sh} ". ${CMAKE_BINARY_DIR}/include/cc-${CMK_COMPILER}.sh\n")
 endif()
 
@@ -673,6 +698,9 @@ endif()
 file(APPEND ${optfile_sh} "CMK_HWLOC_LIBS=\"-lhwloc_embedded -lm\"\n" )
 file(APPEND ${optfile_sh} "CMK_LIBS=\"$CMK_LIBS -lz ${DL_LIB}\"\n")
 
+if(LRTS_PMI)
+  file(APPEND ${optfile_sh} ". ${CMAKE_BINARY_DIR}/include/conv-mach-${LRTS_PMI}.sh\n")
+endif()
 
 # Create conv-mach-opt.h
 set(optfile_h ${CMAKE_BINARY_DIR}/include/conv-mach-opt.h)
@@ -680,10 +708,14 @@ set(optfile_h ${CMAKE_BINARY_DIR}/include/conv-mach-opt.h)
 file(WRITE  ${optfile_h} "/* Build-time options header, automatically generated by cmake */\n")
 file(APPEND ${optfile_h} "#define CMK_OPTIMIZE ${CMK_OPTIMIZE}\n")
 
-if(NOT ${NETWORK} STREQUAL "mpi")
+if(NOT ${NETWORK} STREQUAL "mpi" AND NOT ${NETWORK} MATCHES "gni-" AND NOT ${NETWORK} MATCHES "-cray")
     file(APPEND ${optfile_h} "#include \"cc-${CMK_COMPILER}.h\"\n")
 endif()
 
+if(LRTS_PMI)
+  file(APPEND ${optfile_h} "#include \"conv-mach-${LRTS_PMI}.h\"\n")
+endif()
+
 # Create conv-mach-opt.mak
 set(optfile_mak ${CMAKE_BINARY_DIR}/include/conv-mach-opt.mak)
 
diff --git a/buildcmake b/buildcmake
index e38b7eb12..abc820486 100755
--- a/buildcmake
+++ b/buildcmake
@@ -58,6 +58,7 @@ opt_lbtime_type="double"
 opt_lbuserdata=0
 opt_libdir=""
 opt_lockless=0
+opt_lrts_pmi=""
 opt_mempool_cutoff=26
 opt_network=0
 opt_numa=0
@@ -102,6 +103,9 @@ while [[ $# -gt 0 ]]; do
     pthreads)
       opt_pthreads=1
       ;;
+    simplepmi|slurmpmi|slurmpmi2|ompipmix)
+      opt_lrts_pmi=$arg
+      ;;
   # Compilers
     gcc)
       opt_CC=gcc
@@ -261,10 +265,38 @@ done
 
 ############ End option parsing
 
-opt_network=$(echo $triplet | cut -d '-' -f1)
+<<<<<<< HEAD
+# Build option setup
 
-[[ $opt_production -eq 0 ]] && opt_production='Debug' || opt_production='Release'
+# Special handling for gni-crayxc, gni-crayxe, mpi-crayxc, mpi-crayxe, mpi-crayshasta, ofi-crayshasta
+if [[ $actual_triplet == gni-* || $actual_triplet == *-cray* ]]; then
+  opt_network=$actual_triplet
+  # Need to use Cray's compiler frontends on Cray systems
+  opt_CC=cc
+  opt_CXX=CC
+  opt_FC=ftn
+else
+  opt_network=$(echo "$actual_triplet" | cut -d '-' -f1)
+fi
+
+my_os=$(echo "$actual_triplet" | cut -d '-' -f2)
+
+if [[ $opt_network == "mpi" && $my_os == "win" ]]; then
+  echo "Warning: CMake build is not supported with MPI on Windows, running ./buildold instead."
+  sleep 2
+  "$my_srcdir/buildold" "${full_args[@]}"
+  exit $?
+fi
+
+# Special handling for Windows compiler
+if [[ $my_os == "win" && ( -z $opt_CC || $opt_CC == "msvc" ) ]]; then
+  # Need to use unix2nt_cc on Windows/Cygwin
+  opt_CC="$(realpath "$my_srcdir")/src/arch/win/unix2nt_cc"
+  opt_CXX="$opt_CC"
+  opt_FC=
+fi
 
+[[ $opt_production -eq 0 ]] && opt_production='Debug' || opt_production='Release'
 
 echo "Build options for $triplet:"
 
@@ -275,11 +307,9 @@ done
 
 builddir=$triplet$opt_suffix
 
-rm -rf $builddir
-
-mkdir $builddir
-
-cd $builddir
+rm -rf "$builddir"
+mkdir -p "$builddir"
+cd "$builddir"
 
 if [[ -n $opt_libdir ]]; then
   mkdir -p include
@@ -308,6 +338,7 @@ CC=$opt_CC CXX=$opt_CXX FC=$opt_FC cmake .. \
   -DLBTIME_TYPE="$opt_lbtime_type" \
   -DLBUSERDATA="$opt_lbuserdata" \
   -DLOCKLESS_QUEUE="$opt_lockless" \
+  -DLRTS_PMI="$opt_lrts_pmi" \
   -DCMK_MEMPOOL_CUTOFFNUM="$opt_mempool_cutoff" \
   -DNETWORK="$opt_network" \
   -DNUMA="$opt_numa" \
diff --git a/doc/charm++/manual.rst b/doc/charm++/manual.rst
index d1ecb491b..b0cb2dbbd 100644
--- a/doc/charm++/manual.rst
+++ b/doc/charm++/manual.rst
@@ -10739,6 +10739,7 @@ appropriate choices for the build one wants to perform.
    Cray XE6                                                         ``./build charm++ gni-crayxe --with-production -j8``
    Cray XK7                                                         ``./build charm++ gni-crayxe-cuda --with-production -j8``
    Cray XC40                                                        ``./build charm++ gni-crayxc --with-production -j8``
+   Cray Shasta                                                      ``./build charm++ ofi-crayshasta --with-production -j8``
    ================================================================ =====================================================================
 
 As mentioned earlier, one can also build Charm++ using the precompiled
@@ -11196,6 +11197,13 @@ Parameters that function as boolean flags within Charmrun (taking no
 other parameters) can be prefixed with "no-" to negate their effect.
 For example, ``++no-scalable-start``.
 
+.. note::
+
+   When running on OFI platforms such as Cray Shasta, the OFI runtime parameter
+   ``+ofi_runtime_tcp`` may be required. By default, the exchange of EP names at
+   startup is done via both PMI and OFI. With this flag, it is only done via
+   PMI.
+
 .. _command line options:
 
 Command Line Options
diff --git a/smart-build.pl b/smart-build.pl
index ac4cb3006..917d7573d 100755
--- a/smart-build.pl
+++ b/smart-build.pl
@@ -130,7 +130,7 @@ if($skip_choosing eq "false"){
 }
 
 
-# check for GNI
+# check for Cray
 
 if($skip_choosing eq "false"){
   my $craycc_found = index(`which CC 2>/dev/null`, "/opt/cray/") != -1;
@@ -140,11 +140,23 @@ if($skip_choosing eq "false"){
     $PE_PRODUCT_LIST = "";
   }
 
+  my $CRAYPE_NETWORK_TARGET = $ENV{'CRAYPE_NETWORK_TARGET'};
+  if (not defined $CRAYPE_NETWORK_TARGET) {
+    $CRAYPE_NETWORK_TARGET = "";
+  }
+
   my $CRAY_UGNI_found = index(":$PE_PRODUCT_LIST:", ":CRAY_UGNI:") != -1;
 
   my $gni_found = $craycc_found || $CRAY_UGNI_found;
 
-  if ($gni_found) {
+  if ($CRAYPE_NETWORK_TARGET eq "ofi") {
+    print "\nI found that you have a Cray environment.\nDo you want to build Charm++ targeting Cray Shasta? [Y/n]: ";
+    my $p = promptUserYN();
+    if($p eq "yes" || $p eq "default") {
+                  $arch = "ofi-crayshasta";
+                  $skip_choosing = "true";
+    }
+  } elsif ($gni_found) {
     my $CRAYPE_INTERLAGOS_found = index(":$PE_PRODUCT_LIST:", ":CRAYPE_INTERLAGOS:") != -1;
     if ($CRAYPE_INTERLAGOS_found) {
       print "\nI found that you have a Cray environment with Interlagos processors.\nDo you want to build Charm++ targeting Cray XE? [Y/n]: ";
@@ -462,8 +474,10 @@ $explanations{"bigsim"} = "Compile Charm++ as running on the BigSim emulator";
 $explanations{"nolb"} = "Build without load balancing support";
 $explanations{"perftools"} = "Build with support for the Cray perftools";
 $explanations{"persistent"} = "Build the persistent communication interface";
+$explanations{"simplepmi"} = "Use simple PMI for task launching";
 $explanations{"slurmpmi"} = "Use Slurm PMI for task launching";
 $explanations{"slurmpmi2"} = "Use Slurm PMI2 for task launching";
+$explanations{"ompipmix"} = "Use Open MPI PMIX for task launching";
 $explanations{"tsan"} = "Compile Charm++ with support for Thread Sanitizer";
 
 
diff --git a/src/arch/common/conv-mach-craype.sh b/src/arch/common/conv-mach-craype.sh
index 1630d7c5e..5c15cc032 100644
--- a/src/arch/common/conv-mach-craype.sh
+++ b/src/arch/common/conv-mach-craype.sh
@@ -1,6 +1,7 @@
 
 PGCC=`CC -V 2>&1 | grep pgCC`
 ICPC=`CC -V 2>&1 | grep Intel`
+CLANG=`CC -V 2>&1 | grep 'clang'`
 GNU=`CC -V 2>&1 | grep 'g++'`
 CCE=`CC -V 2>&1 | grep 'Cray'`
 
@@ -15,7 +16,12 @@ CMK_CPP_C_FLAGS="-E"
 
 CMK_LINK_BINARY='-dynamic'
 
-CMK_CRAY_LIBS="$CRAY_PMI_POST_LINK_OPTS $CRAY_UGNI_POST_LINK_OPTS -lugni -lpmi $CRAY_RCA_POST_LINK_OPTS"
+if test -v CMK_CRAY_NOGNI
+then
+    CMK_CRAY_LIBS="$CRAY_PMI_POST_LINK_OPTS -lpmi $CRAY_RCA_POST_LINK_OPTS"
+else
+    CMK_CRAY_LIBS="$CRAY_PMI_POST_LINK_OPTS $CRAY_UGNI_POST_LINK_OPTS -lugni -lpmi $CRAY_RCA_POST_LINK_OPTS"
+fi
 CMK_LIBS="-lckqt $CMK_CRAY_LIBS"
 
 CMK_LD_LIBRARY_PATH="-Wl,-rpath,$CHARMLIBSO/"
@@ -42,6 +48,11 @@ then
 CMK_SEQ_CC="icc -fPIC "
 CMK_SEQ_CXX="icpc -fPIC "
 CMK_COMPILER='icc'
+elif test -n "$CLANG"
+then
+CMK_SEQ_CC="clang -fPIC "
+CMK_SEQ_CXX="clang++ -fPIC "
+CMK_COMPILER='clang'
 else   # gcc
 CMK_SEQ_CC="gcc -fPIC"
 CMK_SEQ_CXX="g++ -fPIC "
diff --git a/src/arch/mpi-crayshasta/conv-mach-smp.h b/src/arch/mpi-crayshasta/conv-mach-smp.h
new file mode 100644
index 000000000..5913bf2c9
--- /dev/null
+++ b/src/arch/mpi-crayshasta/conv-mach-smp.h
@@ -0,0 +1,7 @@
+#define CMK_SMP                                            1
+
+
+#undef CMK_SHARED_VARS_UNAVAILABLE
+#undef CMK_SHARED_VARS_POSIX_THREADS_SMP
+#define CMK_SHARED_VARS_UNAVAILABLE                        0
+#define CMK_SHARED_VARS_POSIX_THREADS_SMP                  1
diff --git a/src/arch/mpi-crayshasta/conv-mach-smp.sh b/src/arch/mpi-crayshasta/conv-mach-smp.sh
new file mode 100644
index 000000000..2262eaacf
--- /dev/null
+++ b/src/arch/mpi-crayshasta/conv-mach-smp.sh
@@ -0,0 +1,3 @@
+CMK_DEFS="$CMK_DEFS -D_REENTRANT"
+CMK_LIBS="-lpthread $CMK_LIBS "
+CMK_SMP="1"
diff --git a/src/arch/mpi-crayshasta/conv-mach.h b/src/arch/mpi-crayshasta/conv-mach.h
new file mode 100644
index 000000000..1a2b90178
--- /dev/null
+++ b/src/arch/mpi-crayshasta/conv-mach.h
@@ -0,0 +1,52 @@
+
+#ifndef _CONV_MACH_H
+#define _CONV_MACH_H
+
+#define CMK_CONVERSE_MPI                                   1
+
+#define CMK_MEMORY_PREALLOCATE_HACK			   0
+
+#define CMK_DEFAULT_MAIN_USES_COMMON_CODE                  1
+
+#define CMK_MALLOC_USE_GNU_MALLOC                          0
+#define CMK_MALLOC_USE_OS_BUILTIN                          1
+
+#define CMI_IO_BUFFER_EXPLICIT                             1
+#define CMI_IO_FLUSH_USER                                  1
+
+#define CMK_GETPAGESIZE_AVAILABLE			   1
+#define CMK_MEMORY_PAGESIZE				   4096
+#define CMK_MEMORY_PROTECTABLE				   0
+
+
+#define CMK_SHARED_VARS_UNAVAILABLE                        1
+
+#define CMK_SIGNAL_NOT_NEEDED                              0
+#define CMK_SIGNAL_USE_SIGACTION                           0
+#define CMK_SIGNAL_USE_SIGACTION_WITH_RESTART              1
+
+#define CMK_THREADS_USE_CONTEXT                            0
+#define CMK_THREADS_USE_FCONTEXT                           1
+#define CMK_THREADS_USE_JCONTEXT                           0
+#define CMK_THREADS_USE_PTHREADS                           0
+
+#define CMK_TIMER_USE_GETRUSAGE                            0
+#define CMK_TIMER_USE_SPECIAL                              1
+#define CMK_TIMER_USE_TIMES                                0
+
+
+#define CMK_WHEN_PROCESSOR_IDLE_BUSYWAIT                   1
+#define CMK_WHEN_PROCESSOR_IDLE_USLEEP                     0
+
+#define CMK_64BIT					   1
+#define CMK_AMD64					   1
+
+#define CMK_WEB_MODE                                       1
+#define CMK_DEBUG_MODE                                     0
+
+#define CMK_LBDB_ON					   1
+
+#define CMK_DISABLE_SYNC                                   1
+
+#endif
+
diff --git a/src/arch/mpi-crayshasta/conv-mach.sh b/src/arch/mpi-crayshasta/conv-mach.sh
new file mode 100644
index 000000000..ba4bddb91
--- /dev/null
+++ b/src/arch/mpi-crayshasta/conv-mach.sh
@@ -0,0 +1,23 @@
+#  Cray Shasta build.  October 2021.
+#  CRAY COMPILER (CCE) BUILD
+#  ========================================
+#  module load PrgEnv-cray         # typically default
+#
+#  INTEL BUILD
+#  ================================
+#  module swap PrgEnv-cray PrgEnv-intel
+#
+#  GCC BUILD
+#  ================================
+#  module swap PrgEnv-cray PrgEnv-gnu
+#
+#  # Build command is the same regardless of compiler environment:
+#
+#  # MPI build
+#  ./build charm++ mpi-crayshasta smp --with-production
+
+CMK_BUILD_CRAY=1
+
+CMK_CRAY_NOGNI=1
+
+. $CHARMINC/conv-mach-craype.sh
diff --git a/src/arch/ofi-crayshasta/conv-mach-smp.h b/src/arch/ofi-crayshasta/conv-mach-smp.h
new file mode 100644
index 000000000..f72decc97
--- /dev/null
+++ b/src/arch/ofi-crayshasta/conv-mach-smp.h
@@ -0,0 +1,12 @@
+#define CMK_SMP						   1
+
+
+#undef CMK_SHARED_VARS_UNAVAILABLE
+#undef CMK_SHARED_VARS_POSIX_THREADS_SMP
+#define CMK_SHARED_VARS_UNAVAILABLE                        0
+#define CMK_SHARED_VARS_POSIX_THREADS_SMP                  1
+
+#undef CMK_TIMER_USE_GETRUSAGE
+#undef CMK_TIMER_USE_SPECIAL
+#define CMK_TIMER_USE_GETRUSAGE                            1
+#define CMK_TIMER_USE_SPECIAL                              0
diff --git a/src/arch/ofi-crayshasta/conv-mach-smp.sh b/src/arch/ofi-crayshasta/conv-mach-smp.sh
new file mode 100644
index 000000000..7c2eadc6b
--- /dev/null
+++ b/src/arch/ofi-crayshasta/conv-mach-smp.sh
@@ -0,0 +1,3 @@
+CMK_DEFS="$CMK_DEFS -D_REENTRANT"
+CMK_LIBS=" -lpthread $CMK_LIBS "
+CMK_SMP='1'
diff --git a/src/arch/ofi-crayshasta/conv-mach.h b/src/arch/ofi-crayshasta/conv-mach.h
new file mode 100644
index 000000000..61d295df3
--- /dev/null
+++ b/src/arch/ofi-crayshasta/conv-mach.h
@@ -0,0 +1,89 @@
+#ifndef _CONV_MACH_H
+#define _CONV_MACH_H
+
+#define CMK_OFI 1
+
+/* define the default linker, together with its options */
+#define CMK_DLL_CC   "g++ -shared -O3 -o "
+
+/* 1 if the machine has a function called "getpagesize()", 0 otherwise .
+   used in the memory files of converse */
+#define CMK_GETPAGESIZE_AVAILABLE                          1
+
+/* defines which version of memory handlers should be used.
+   used in conv-core/machine.C */
+#define CMK_MALLOC_USE_GNU_MALLOC                          0
+#define CMK_MALLOC_USE_OS_BUILTIN                          1
+
+#define CMK_MEMORY_PAGESIZE                                4096
+#define CMK_MEMORY_PROTECTABLE                             1
+
+/* the following definitions set the type of shared variables to be used. only
+   one of them must be 1, all the others 0. The different implementations are in
+   converse.h. Typically used are UNAVAILABLE for non SMP versions and
+   POSIX_THREADS_SMP for SMP versions. The others are used only in special
+   cases: NT_THREADS for Windows. */
+#define CMK_SHARED_VARS_UNAVAILABLE                        1 /* non SMP versions */
+#define CMK_SHARED_VARS_POSIX_THREADS_SMP                  0 /* SMP versions */
+#define CMK_SHARED_VARS_NT_THREADS                         0
+
+/* the following define if signal handlers should be used, both equal to zero
+   means that signals will not be used. only one of the following can be 1, the
+   other must be 0. they differ in the fact that the second (_WITH_RESTART)
+   enables retry on interrupt (a function is recalled upon interrupt and does
+   not return EINTR as in the first case) */
+#define CMK_SIGNAL_USE_SIGACTION                           0
+#define CMK_SIGNAL_USE_SIGACTION_WITH_RESTART              1
+
+/* specifies whether the CthCpv variables should be defined as Cpv (0) or
+   directly as normal c variables (1) */
+#define CMK_THREADS_REQUIRE_NO_CPV                         0
+
+/* decide which is the default implementation of the threads (see threads.C)
+   Only one of the following can be 1. If none of them is selected, qthreads
+   will be used as default. This default can be overwritten at compile time
+   using -DCMK_THREADS_BUILD_"type"=1 */
+#define CMK_THREADS_USE_CONTEXT                            0
+#define CMK_THREADS_USE_FCONTEXT                           1
+#define CMK_THREADS_USE_JCONTEXT                           0
+#define CMK_THREADS_USE_PTHREADS                           0
+
+/* Specifies what kind of timer to use, and the correspondent headers will be
+   included in convcore.C. If none is selected, then the machine.C file needs to
+   implement the timer primitives. */
+#define CMK_TIMER_USE_RTC                                  0
+#define CMK_TIMER_USE_RDTSC                                0
+#define CMK_TIMER_USE_GETRUSAGE                            1
+#define CMK_TIMER_USE_SPECIAL                              0
+#define CMK_TIMER_USE_TIMES                                0
+#define CMK_TIMER_USE_BLUEGENEL                            0
+
+/* Specifies what the processor will do when it is idle, either sleep (1) or go
+   into busy waiting mode (0). In convcore.C there are a few files included if
+   sleeping mode, but the real distinct implementation is in the machine.C
+   file. */
+#define CMK_WHEN_PROCESSOR_IDLE_USLEEP                     0
+
+/* specifies whether there is a web server collecting utilization statistics (1)
+   or not (0) */
+#define CMK_WEB_MODE                                       1
+
+#define CMK_DEBUG_MODE                                     0
+
+/* enables the load balancer framework. set to 1 for almost all the machines */
+#define CMK_LBDB_ON					   1
+
+#define CMK_64BIT                      1
+#define CMK_AMD64                      1
+
+/* Other possible definitions:
+
+In fault tolerant architectures, CK_MEM_CHECKPOINT can be set. In this case the
+extended header must contain also another field called "pn" (phase number).
+
+*/
+
+/* Use PMI2 by default on Cray systems with cray-pmi */
+#include "conv-mach-slurmpmi2.h"
+
+#endif
diff --git a/src/arch/ofi-crayshasta/conv-mach.sh b/src/arch/ofi-crayshasta/conv-mach.sh
new file mode 100644
index 000000000..8c9699491
--- /dev/null
+++ b/src/arch/ofi-crayshasta/conv-mach.sh
@@ -0,0 +1,31 @@
+CMK_BUILD_CRAY=1
+CMK_CRAY_NOGNI=1
+. $CHARMINC/conv-mach-craype.sh
+
+# For libfabric
+#If the user doesn't pass --basedir, use defaults for libfabric headers and library
+if test -z "$USER_OPTS_LD"
+then
+    if test -z "$LIBFABRIC"
+    then
+	CMK_INCDIR="$CMK_INCDIR -I/usr/include/"
+	CMK_LIBDIR="$CMK_LIBDIR -L/usr/lib64/"
+    else
+	CMK_INCDIR="$CMK_INCDIR -I$LIBFABRIC/include/"
+	CMK_LIBDIR="$CMK_LIBDIR -L$LIBFABRIC/lib64/"
+    fi
+fi
+
+# For cray-pmi
+if test -n "$CRAY_PMI_PREFIX"
+then
+    CMK_INCDIR="$CMK_INCDIR -I$CRAY_PMI_PREFIX/include"
+    CMK_LIBDIR="$CMK_LIBDIR -L$CRAY_PMI_PREFIX/lib"
+fi
+
+CMK_LIBS="$CMK_LIBS -lfabric"
+# Use PMI2 by default on Cray systems with cray-pmi
+. $CHARMINC/conv-mach-slurmpmi2.sh
+
+# For runtime
+CMK_INCDIR="$CMK_INCDIR -I./proc_management/"
diff --git a/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi2.h b/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi2.h
deleted file mode 100644
index 4c40206f3..000000000
--- a/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi2.h
+++ /dev/null
@@ -1,4 +0,0 @@
-#undef CMK_USE_PMI
-#undef CMK_USE_PMI2
-#undef CMK_USE_SIMPLEPMI
-#define CMK_USE_PMI2                                    1
diff --git a/src/arch/ofi-linux-x86_64/conv-mach.h b/src/arch/ofi-linux-x86_64/conv-mach.h
index 57b4e77de..938d06c4d 100644
--- a/src/arch/ofi-linux-x86_64/conv-mach.h
+++ b/src/arch/ofi-linux-x86_64/conv-mach.h
@@ -85,19 +85,4 @@ extended header must contain also another field called "pn" (phase number).
 
 */
 
-/*
- * Specifies which version of PMI to use.
- * See src/arch/ofi/machine.C
- */
-#define CMK_USE_PMI                                     1
-#define CMK_USE_PMI2                                    0
-
-/*
- * Use Simple client-side implementation of PMI.
- * Valid only for CMK_USE_PMI.
- * Optional in an SLURM environment.
- * See src/arch/util/proc_management/simple_pmi/
- */
-#define CMK_USE_SIMPLEPMI                               1
-
 #endif
diff --git a/src/arch/ofi/conv-common.h b/src/arch/ofi/conv-common.h
index b459d7d13..3554df202 100644
--- a/src/arch/ofi/conv-common.h
+++ b/src/arch/ofi/conv-common.h
@@ -86,3 +86,19 @@
 #define CMK_REG_REQUIRED                                   CMK_ONESIDED_IMPL
 
 #define CMK_CONVERSE_MPI                                   0
+
+/*
+ * Specifies which version of PMI to use.
+ * See src/arch/ofi/machine.C
+ */
+#define CMK_USE_PMI                                     1
+#define CMK_USE_PMI2                                    0
+#define CMK_USE_PMIX                                    0
+
+/*
+ * Use Simple client-side implementation of PMI.
+ * Valid only for CMK_USE_PMI.
+ * Optional in an SLURM environment.
+ * See src/arch/util/proc_management/simple_pmi/
+ */
+#define CMK_USE_SIMPLEPMI                               1
diff --git a/src/arch/ucx-linux-arm8/conv-mach-ompipmix.h b/src/arch/ofi/conv-mach-ompipmix.h
similarity index 100%
rename from src/arch/ucx-linux-arm8/conv-mach-ompipmix.h
rename to src/arch/ofi/conv-mach-ompipmix.h
diff --git a/src/arch/ucx-linux-arm8/conv-mach-ompipmix.sh b/src/arch/ofi/conv-mach-ompipmix.sh
similarity index 100%
rename from src/arch/ucx-linux-arm8/conv-mach-ompipmix.sh
rename to src/arch/ofi/conv-mach-ompipmix.sh
diff --git a/src/arch/ofi/conv-mach-simplepmi.h b/src/arch/ofi/conv-mach-simplepmi.h
new file mode 100644
index 000000000..e66aeb56f
--- /dev/null
+++ b/src/arch/ofi/conv-mach-simplepmi.h
@@ -0,0 +1,5 @@
+#undef CMK_USE_PMI
+#undef CMK_USE_PMI2
+#undef CMK_USE_PMIX
+#undef CMK_USE_SIMPLEPMI
+#define CMK_USE_SIMPLEPMI                               1
diff --git a/src/arch/ofi/conv-mach-simplepmi.sh b/src/arch/ofi/conv-mach-simplepmi.sh
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi.h b/src/arch/ofi/conv-mach-slurmpmi.h
similarity index 85%
rename from src/arch/ofi-linux-x86_64/conv-mach-slurmpmi.h
rename to src/arch/ofi/conv-mach-slurmpmi.h
index 003f21c9f..c9f6ca513 100644
--- a/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi.h
+++ b/src/arch/ofi/conv-mach-slurmpmi.h
@@ -1,4 +1,5 @@
 #undef CMK_USE_PMI
 #undef CMK_USE_PMI2
+#undef CMK_USE_PMIX
 #undef CMK_USE_SIMPLEPMI
 #define CMK_USE_PMI                                     1
diff --git a/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi.sh b/src/arch/ofi/conv-mach-slurmpmi.sh
similarity index 100%
rename from src/arch/ofi-linux-x86_64/conv-mach-slurmpmi.sh
rename to src/arch/ofi/conv-mach-slurmpmi.sh
diff --git a/src/arch/ucx-linux-arm8/conv-mach-slurmpmi2.h b/src/arch/ofi/conv-mach-slurmpmi2.h
similarity index 85%
rename from src/arch/ucx-linux-arm8/conv-mach-slurmpmi2.h
rename to src/arch/ofi/conv-mach-slurmpmi2.h
index 4c40206f3..c3211b1a4 100644
--- a/src/arch/ucx-linux-arm8/conv-mach-slurmpmi2.h
+++ b/src/arch/ofi/conv-mach-slurmpmi2.h
@@ -1,4 +1,5 @@
 #undef CMK_USE_PMI
 #undef CMK_USE_PMI2
+#undef CMK_USE_PMIX
 #undef CMK_USE_SIMPLEPMI
 #define CMK_USE_PMI2                                    1
diff --git a/src/arch/ofi-linux-x86_64/conv-mach-slurmpmi2.sh b/src/arch/ofi/conv-mach-slurmpmi2.sh
similarity index 100%
rename from src/arch/ofi-linux-x86_64/conv-mach-slurmpmi2.sh
rename to src/arch/ofi/conv-mach-slurmpmi2.sh
diff --git a/src/arch/ofi/machine.C b/src/arch/ofi/machine.C
index 934f6ae34..77645c981 100644
--- a/src/arch/ofi/machine.C
+++ b/src/arch/ofi/machine.C
@@ -92,10 +92,12 @@
 #include "request.h"
 
 /* Runtime to exchange EP addresses during LrtsInit() */
-#if CMK_USE_PMI
+#if CMK_USE_PMI || CMK_USE_SIMPLEPMI
 #include "runtime-pmi.C"
 #elif CMK_USE_PMI2
 #include "runtime-pmi2.C"
+#elif CMK_USE_PMIX
+#include "runtime-pmix.C"
 #endif
 
 #define USE_MEMPOOL 0
@@ -1628,7 +1630,7 @@ int fill_av_ofi(int myid,
                            OFI_OP_NAMES,
                            &epnames_contexts[i]);
             if (ret) {
-                CmiAbort("OFI::LrtsInit::fi_tsend error");
+                CmiAbort("OFI::LrtsInit::fi_tsend error (+ofi_runtime_tcp may be needed)");
             }
         }
 
diff --git a/src/arch/ucx-linux-arm8/conv-mach-slurmpmi.h b/src/arch/ucx-linux-arm8/conv-mach-slurmpmi.h
deleted file mode 100644
index 003f21c9f..000000000
--- a/src/arch/ucx-linux-arm8/conv-mach-slurmpmi.h
+++ /dev/null
@@ -1,4 +0,0 @@
-#undef CMK_USE_PMI
-#undef CMK_USE_PMI2
-#undef CMK_USE_SIMPLEPMI
-#define CMK_USE_PMI                                     1
diff --git a/src/arch/ucx-linux-arm8/conv-mach.h b/src/arch/ucx-linux-arm8/conv-mach.h
index c4902c602..b4796757d 100644
--- a/src/arch/ucx-linux-arm8/conv-mach.h
+++ b/src/arch/ucx-linux-arm8/conv-mach.h
@@ -78,12 +78,6 @@
 #define CMK_64BIT                      1
 #define CMK_AMD64                      0
 
-/* By default use simple PMI */
-#define CMK_USE_PMI                    1
-#define CMK_USE_SIMPLEPMI              1
-#define CMK_USE_PMI2                   0
-#define CMK_USE_PMIX                   0
-
 /* Other possible definitions:
 
 In fault tolerant architectures, CK_MEM_CHECKPOINT can be set. In this case the
diff --git a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi.sh b/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi.sh
deleted file mode 100644
index 512c4e72b..000000000
--- a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi.sh
+++ /dev/null
@@ -1,2 +0,0 @@
-CMK_INCDIR="$CMK_INCDIR -I/usr/include/slurm/"
-CMK_LIBS="$CMK_LIBS -lpmi"
diff --git a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi2.sh b/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi2.sh
deleted file mode 100644
index bb61bd872..000000000
--- a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi2.sh
+++ /dev/null
@@ -1,2 +0,0 @@
-CMK_INCDIR="$CMK_INCDIR -I/usr/include/slurm/"
-CMK_LIBS="$CMK_LIBS -lpmi2"
diff --git a/src/arch/ucx-linux-x86_64/conv-mach.h b/src/arch/ucx-linux-x86_64/conv-mach.h
index 55fc8e6d6..138b370d6 100644
--- a/src/arch/ucx-linux-x86_64/conv-mach.h
+++ b/src/arch/ucx-linux-x86_64/conv-mach.h
@@ -78,12 +78,6 @@
 #define CMK_64BIT                      1
 #define CMK_AMD64                      1
 
-/* By default use simple PMI */
-#define CMK_USE_PMI                    1
-#define CMK_USE_SIMPLEPMI              1
-#define CMK_USE_PMI2                   0
-#define CMK_USE_PMIX                   0
-
 /* Other possible definitions:
 
 In fault tolerant architectures, CK_MEM_CHECKPOINT can be set. In this case the
diff --git a/src/arch/ucx/conv-common.h b/src/arch/ucx/conv-common.h
index c585d1213..8a7bba2e7 100644
--- a/src/arch/ucx/conv-common.h
+++ b/src/arch/ucx/conv-common.h
@@ -86,3 +86,9 @@
 
 #undef  CMK_HAS_CMA
 #define  CMK_HAS_CMA                                       0
+
+/* By default use simple PMI */
+#define CMK_USE_PMI                    1
+#define CMK_USE_SIMPLEPMI              1
+#define CMK_USE_PMI2                   0
+#define CMK_USE_PMIX                   0
diff --git a/src/arch/ucx-linux-x86_64/conv-mach-ompipmix.h b/src/arch/ucx/conv-mach-ompipmix.h
similarity index 100%
rename from src/arch/ucx-linux-x86_64/conv-mach-ompipmix.h
rename to src/arch/ucx/conv-mach-ompipmix.h
diff --git a/src/arch/ucx-linux-x86_64/conv-mach-ompipmix.sh b/src/arch/ucx/conv-mach-ompipmix.sh
similarity index 100%
rename from src/arch/ucx-linux-x86_64/conv-mach-ompipmix.sh
rename to src/arch/ucx/conv-mach-ompipmix.sh
diff --git a/src/arch/ucx/conv-mach-simplepmi.h b/src/arch/ucx/conv-mach-simplepmi.h
new file mode 100644
index 000000000..e66aeb56f
--- /dev/null
+++ b/src/arch/ucx/conv-mach-simplepmi.h
@@ -0,0 +1,5 @@
+#undef CMK_USE_PMI
+#undef CMK_USE_PMI2
+#undef CMK_USE_PMIX
+#undef CMK_USE_SIMPLEPMI
+#define CMK_USE_SIMPLEPMI                               1
diff --git a/src/arch/ucx/conv-mach-simplepmi.sh b/src/arch/ucx/conv-mach-simplepmi.sh
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi.h b/src/arch/ucx/conv-mach-slurmpmi.h
similarity index 85%
rename from src/arch/ucx-linux-x86_64/conv-mach-slurmpmi.h
rename to src/arch/ucx/conv-mach-slurmpmi.h
index 003f21c9f..c9f6ca513 100644
--- a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi.h
+++ b/src/arch/ucx/conv-mach-slurmpmi.h
@@ -1,4 +1,5 @@
 #undef CMK_USE_PMI
 #undef CMK_USE_PMI2
+#undef CMK_USE_PMIX
 #undef CMK_USE_SIMPLEPMI
 #define CMK_USE_PMI                                     1
diff --git a/src/arch/ucx-linux-arm8/conv-mach-slurmpmi.sh b/src/arch/ucx/conv-mach-slurmpmi.sh
similarity index 100%
rename from src/arch/ucx-linux-arm8/conv-mach-slurmpmi.sh
rename to src/arch/ucx/conv-mach-slurmpmi.sh
diff --git a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi2.h b/src/arch/ucx/conv-mach-slurmpmi2.h
similarity index 85%
rename from src/arch/ucx-linux-x86_64/conv-mach-slurmpmi2.h
rename to src/arch/ucx/conv-mach-slurmpmi2.h
index 4c40206f3..c3211b1a4 100644
--- a/src/arch/ucx-linux-x86_64/conv-mach-slurmpmi2.h
+++ b/src/arch/ucx/conv-mach-slurmpmi2.h
@@ -1,4 +1,5 @@
 #undef CMK_USE_PMI
 #undef CMK_USE_PMI2
+#undef CMK_USE_PMIX
 #undef CMK_USE_SIMPLEPMI
 #define CMK_USE_PMI2                                    1
diff --git a/src/arch/ucx-linux-arm8/conv-mach-slurmpmi2.sh b/src/arch/ucx/conv-mach-slurmpmi2.sh
similarity index 100%
rename from src/arch/ucx-linux-arm8/conv-mach-slurmpmi2.sh
rename to src/arch/ucx/conv-mach-slurmpmi2.sh
diff --git a/src/arch/ucx/machine.C b/src/arch/ucx/machine.C
index 285c768aa..063c1c729 100644
--- a/src/arch/ucx/machine.C
+++ b/src/arch/ucx/machine.C
@@ -21,7 +21,7 @@
 #include <ucs/type/status.h>
 #include <ucs/datastruct/mpool.h>
 
-#if CMK_USE_PMI
+#if CMK_USE_PMI || CMK_USE_SIMPLEPMI
 #include "runtime-pmi.C"
 #elif CMK_USE_PMI2
 #include "runtime-pmi2.C"
diff --git a/src/scripts/configure.ac b/src/scripts/configure.ac
index 76b294e89..66d8430cc 100644
--- a/src/scripts/configure.ac
+++ b/src/scripts/configure.ac
@@ -1529,7 +1529,7 @@ int main(int argc, char **argv)
   return 0;
 }
 EOT
-test_cc "whether build on OFI" "yes" "no" "-lfabric"
+test_cc "whether build on OFI" "yes" "no"
 AC_DEFINE_UNQUOTED(CMK_BUILD_ON_OFI, $strictpass, [build OFI.])
 BUILD_OFI=$strictpass
 
diff --git a/src/util/ckBIconfig.h b/src/util/ckBIconfig.h
index 6a38afab1..765d020c4 100644
--- a/src/util/ckBIconfig.h
+++ b/src/util/ckBIconfig.h
@@ -6,7 +6,7 @@
 
 #ifndef CK_BI_CONFIG
 #define CK_BI_CONFIG
-#ifdef CMK_BALANCED_INJECTION_API
+#if defined(CMK_BALANCED_INJECTION_API) && CMK_BALANCED_INJECTION_API
 #include <stdint.h>
 #include <gni_pub.h>
 
