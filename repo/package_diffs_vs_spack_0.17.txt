Differences for the 'amber' package
9c9
< from spack.package import *
---
> from spack import *
48c48
<                 url='file://AmberTools{0}.tar.bz2'.format( #http://ambermd.org/downloads/AmberTools{0}.tar.bz2'.format(
---
>                  url='http://ambermd.org/downloads/AmberTools{0}.tar.bz2'.format(
116,123d115
<     # workaround for cray shasta gnu compilation ( and soon cray-shasta-*)
<     patch('ambertools_configure2_cray_shasta.patch', when='@20:')
<     patch('cpptraj_configure_netcdf.patch', when='@20:')
<     patch('ambertools_makefile.patch', when='@20:')
<     patch('sander_mt19937.patch', when='@20:')
<     patch('sander_sebomd.patch', when='@20:')
<     patch('pmemd_nfe.patch', when='@20:')
< 
132,135d123
<     variant('rism', default=False, description='Build with RISM')
<     variant('fftw', default=False, description='Build with FFTW')
<     variant('python', description='Build python packages',
<             default=True)
142,143d129
<     depends_on('parallel-netcdf')
<     depends_on('fftw-api@3', when='+fftw')
147,148d132
<     depends_on('python', when='+python')
<     depends_on('py-setuptools', when='+python')
186,192d169
<         # previously could use satisfies gcc, cce, etc but 
<         # with cray-shasta and current patches to include cray-shasta-*
<         # we remove cray and gnu and replace with cray-shasta-cray
<         # cray-shasta-gnu
<         # note that will need to add cray-shasta-* to patch
<         # need better way of determining shasta but 
<         # not obvious how to do so yet
194c171
<             compiler = 'cray-shasta-cray'
---
>             compiler = 'cray'
196c173
<             compiler = 'cray-shasta-gnu'
---
>             compiler = 'gnu'
208,222d184
<         # if self.spec.satisfies('%cce'):
<         #     compiler = 'cray'
<         # elif self.spec.satisfies('%gcc'):
<         #     compiler = 'gnu'
<         # elif self.spec.satisfies('%intel'):
<         #     compiler = 'intel'
<         # elif self.spec.satisfies('%pgi'):
<         #     compiler = 'pgi'
<         # elif self.spec.satisfies('%nvhpc'):
<         #     compiler = 'pgi'
<         # elif self.spec.satisfies('%clang'):
<         #     compiler = 'clang'
<         # else:
<         #     raise InstallError('Unknown compiler, exiting!!!')
< 
225,228c187,188
<         base_args = [
<                      '--with-netcdf-c', self.spec['netcdf-c'].prefix, 
<                      '--with-netcdf-fortran', self.spec['netcdf-fortran'].prefix, 
<                      '--with-pnetcdf', self.spec['parallel-netcdf'].prefix, 
---
>         base_args = ['--skip-python',
>                      '--with-netcdf', self.spec['netcdf-fortran'].prefix,
230,231d189
<         if self.spec.satisfies('~fftw'):
<             base_args += ['-nofftw3']
234,235d191
<         if self.spec.satisfies('~rism'):
<             base_args += ['-norism']
248,254c204,205
<         # default build
<         added_args = []
<         if self.spec.satisfies('~python'):
<             added_args = ['--skip-python', compiler]
<         else:
<             added_args = ['--with-python', self.spec['python'].prefix + '/bin/python', compiler]
<         conf(*(base_args + added_args))
---
>         # Single core
>         conf(*(base_args + [compiler]))
263,265c214,215
<         if self.spec.satisfies('+mpi') and self.spec.satisfies('~openmp'):
<             added_args = ['-mpi', '--skip-python', compiler]
<             conf(*(base_args + added_args))
---
>         if self.spec.satisfies('+mpi'):
>             conf(*(base_args + ['-mpi', compiler]))
269c219
<         if self.spec.satisfies('+openmp') and self.spec.satisfies('~mpi'):
---
>         if self.spec.satisfies('+openmp'):
271,279c221,222
<             added_args = ['-openmp', '--skip-python', compiler]
<             conf(*(base_args + added_args))
<             make('install')
< 
<         # MPI and OpenMP 
<         if self.spec.satisfies('+openmp') and self.spec.satisfies('+mpi'):
<             added_args = ['-mpi', '-openmp', '--skip-python', compiler]
<             conf(*(base_args + added_args))
<             make('install')
---
>             conf(*(base_args + ['-openmp', compiler]))
>             make('openmp')


Differences for the 'amdblis' package
28,32d27
<     variant(
<         'suphandling', default=True,
<         description='Small Unpacked Kernel handling',
<     )
< 
42,46d36
< 
<         if '+suphandling' in spec:
<             args.append("--enable-sup-handling")
<         else:
<             args.append("--disable-sup-handling")


Differences for the 'ansys-fluids' package


Differences for the 'ansys-fluidstructures' package


Differences for the 'ansys-structures' package


Differences for the 'autoconf' package
68c68
<             filter_file('^#! @PERL@.*',
---
>             filter_file('^#! @PERL@ -w',
87,88c87,88
<         filter_file('^#! /usr/bin/ev perl',
<                     '#! {0}'.format(self.spec['perl'].command.path),
---
>         filter_file('^#! /usr/bin/env perl',
>                     '#! {0} -w'.format(self.spec['perl'].command.path),


Differences for the 'awscli' package
1,7d0
< #updated versions of py-botocore, py-docutils and py-pyyaml:
< #-    depends_on("py-botocore@1.13.44", when="@1.16.308", type=("build", "run"))
< #+    depends_on("py-botocore@1.21.12", when="@1.16.308", type=("build", "run"))
< #-    depends_on("py-docutils@0.10:0.15", type=("build", "run"))
< #+    depends_on("py-docutils@0.10:0.19", type=("build", "run"))
< #-    depends_on("py-pyyaml@3.10:5.2", when="^python@3.4:", type=("build", "run"))
< #+    depends_on("py-pyyaml@3.10:6.0", when="^python@3.4:", type=("build", "run"))
9c2
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
14c7
< from spack.package import *
---
> from spack import *
19c12
<     Amazon Web Services"""
---
>        Amazon Web Services"""
23,24c16,17
<     version("1.16.308", sha256="3632fb1db2538128509a7b5e89f2a2c4ea3426bec139944247bddc4d79bf7603")
<     version("1.16.179", sha256="6a87114d1325358d000abe22b2103baae7b91f053ff245b9fde33cb0affb5e4f")
---
>     version('1.16.308', sha256='3632fb1db2538128509a7b5e89f2a2c4ea3426bec139944247bddc4d79bf7603')
>     version('1.16.179', sha256='6a87114d1325358d000abe22b2103baae7b91f053ff245b9fde33cb0affb5e4f')
26,38c19,31
<     depends_on("py-setuptools", type="build")
<     depends_on("py-botocore@1.21.12", when="@1.16.308", type=("build", "run"))
<     depends_on("py-botocore@1.12.169", when="@1.16.179", type=("build", "run"))
<     depends_on("py-docutils@0.10:0.19", type=("build", "run"))
<     depends_on("py-rsa@3.1.2:3.5.0", type=("build", "run"))
<     depends_on("py-s3transfer@0.2.0:0.2", type=("build", "run"))
<     depends_on("py-argparse@1.1:", when="^python@:2.6,3.0:3.1", type=("build", "run"))
<     depends_on("py-pyyaml@3.10:3.13", when="^python@:2.6,3.0:3.3", type=("build", "run"))
<     depends_on("py-pyyaml@3.10:6.0", when="^python@3.4:", type=("build", "run"))
<     depends_on("py-colorama@0.2.5:0.3.9", when="^python@:2.6,3.0:3.3", type=("build", "run"))
<     depends_on("py-colorama@0.2.5:0.4.1", when="^python@3.4:", type=("build", "run"))
<     depends_on("py-nose", type="test")
<     depends_on("py-mock@1.3.0:", type="test")
---
>     depends_on('py-setuptools', type='build')
>     depends_on('py-botocore@1.13.44',  when='@1.16.308', type=('build', 'run'))
>     depends_on('py-botocore@1.12.169', when='@1.16.179', type=('build', 'run'))
>     depends_on('py-docutils@0.10:0.15', type=('build', 'run'))
>     depends_on('py-rsa@3.1.2:3.5.0', type=('build', 'run'))
>     depends_on('py-s3transfer@0.2.0:0.2', type=('build', 'run'))
>     depends_on('py-argparse@1.1:', when='^python@:2.6', type=('build', 'run'))
>     depends_on('py-pyyaml@3.10:3.13', when='^python@:2.6,3.0:3.3', type=('build', 'run'))
>     depends_on('py-pyyaml@3.10:5.2',  when='^python@3.4:',         type=('build', 'run'))
>     depends_on('py-colorama@0.2.5:0.3.9', when='^python@:2.6,3.0:3.3', type=('build', 'run'))
>     depends_on('py-colorama@0.2.5:0.4.1', when='^python@3.4:',         type=('build', 'run'))
>     depends_on('py-nose', type='test')
>     depends_on('py-mock@1.3.0:', type='test')


Differences for the 'beast2' package
6c6
< from spack.package import *
---
> from spack import *
20d19
<     version('2.6.7', sha256='05dcc619c2e10163f2c1089ec66149f6e53ec5a0583cd2cb8ffdccbbdb1d8183')
26,27d24
<     variant('beagle', default=True, description='Build with libbeagle support')
< 
29d25
<     depends_on('libbeagle', type=('build', 'link', 'run'), when="+beagle")


Differences for the 'caliper' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
9,11c9
< from llnl.util import tty
< 
< from spack.package import *
---
> from spack import *
70,71d67
<     variant('kokkos', default=True,
<             description='Enable Kokkos profiling support')
113,114c109
<             '-DWITH_FORTRAN=%s'  % ('On' if '+fortran'  in spec else 'Off'),
<             '-DWITH_KOKKOS=%s'   % ('On' if '+kokkos'   in spec else 'Off')
---
>             '-DWITH_FORTRAN=%s'  % ('On' if '+fortran'  in spec else 'Off')
160,162c155
<         test_dir = self.test_suite.current_test_cache_dir.examples.apps
<         exe = 'cxx-example'
<         source_file = 'cxx-example.cpp'
---
>         test_dir = join_path(self.test_suite.current_test_cache_dir, 'examples', 'apps')
164,166c157,158
<         if not os.path.isfile(join_path(test_dir, source_file)):
<             tty.warn('Skipping caliper test:'
<                      '{0} does not exist'.format(source_file))
---
>         if not os.path.exists(test_dir):
>             print('Skipping caliper test')
169,184c161
<         if os.path.exists(self.prefix.lib):
<             lib_dir = self.prefix.lib
<         else:
<             lib_dir = self.prefix.lib64
< 
<         options = ['-L{0}'.format(lib_dir),
<                    '-I{0}'.format(self.prefix.include),
<                    '{0}'.format(join_path(test_dir, source_file)),
<                    '-o', exe, '-std=c++11', '-lcaliper', '-lstdc++']
< 
<         if not self.run_test(exe=os.environ['CXX'],
<                              options=options,
<                              purpose='test: compile {0} example'.format(exe),
<                              work_dir=test_dir):
<             tty.warn('Skipping caliper test: failed to compile example')
<             return
---
>         exe = 'cxx-example'
186,189c163,173
<         if not self.run_test(exe,
<                              purpose='test: run {0} example'.format(exe),
<                              work_dir=test_dir):
<             tty.warn('Skipping caliper test: failed to run example')
---
>         self.run_test(exe='gcc',
>                       options=['{0}'.format(join_path(test_dir, 'cxx-example.cpp')),
>                                '-L{0}'.format(join_path(self.prefix, 'lib64')),
>                                '-I{0}'.format(join_path(self.prefix, 'include')),
>                                '-std=c++11', '-lcaliper', '-lstdc++', '-o', exe],
>                       purpose='test: compile {0} example'.format(exe),
>                       work_dir=test_dir)
> 
>         self.run_test(exe,
>                       purpose='test: run {0} example'.format(exe),
>                       work_dir=test_dir)


Differences for the 'casacore' package
8c8
< from spack.package import *
---
> from spack import *
19d18
<     version('3.5.0', sha256='63f1c8eff932b0fcbd38c598a5811e6e5397b72835b637d6f426105a183b3f91')
22d20
<     version('3.2.1', sha256='f87ce81d2b42ec5401cff8317baeeb9a3b408b716bb791ef252ad97af6e235ad')
55,56c53,54
<     depends_on('fftw-api@3 precision=float,double', when='@3.4.0:')
<     depends_on('fftw-api@3 precision=float,double', when='~fftpack')
---
>     depends_on('fftw@3.0.0: precision=float,double', when='@3.4.0:')
>     depends_on('fftw@3.0.0: precision=float,double', when='~fftpack')
66d63
<     depends_on('gsl', when='@3.5.0:')


Differences for the 'charmpp' package
12c12
< from spack.package import *
---
> from spack import *
61,66d60
<     # Update v6.10.2 with shasta targets (backport from 7.0.0).
<     patch("shasta.patch.1", when="@:6.10.2")
< 
<     # Remove PythonCCS (relies on Python 2 API)
<     patch("deserpenticate.patch")
< 
110,113d103
<     depends_on("cmake@3.4.0:", when="@7.0.0:", type='build' )
<     depends_on("autoconf", when="@:6.99.99", type='build' ) # Anything pre-7.0.
<     depends_on("automake", when="@:6.99.99", type='build' )
< 
122,123d111
<     depends_on("libfabric", when="backend=ofi")
< 
132,133c120,123
<     # If pmi is not specified, simplepmi will be used for ofi.
<     depends_on("mpi", when="backend=ofi")
---
> 
>     # Git versions of Charm++ require automake and autoconf
>     depends_on("automake", when="@develop")
>     depends_on("autoconf", when="@develop")
143,144d132
<         platplat = platform.platform()
<         specplat = self.spec.platform
146,150c134
<         if "shasta" in platplat and self.spec.satisfies('@6.8.2:'):
<             plat = "shasta"
<         elif specplat.startswith("cray"):
<             plat = "cnl"
<         elif plat.startswith("linux"):
---
>         if plat.startswith("linux"):
194,195d177
<             ("shasta",  "x86_64",   "ofi"):         "ofi-crayshasta",
<             ("shasta",  "x86_64",   "mpi"):         "mpi-crayshasta",
220,223d201
<     def setup_build_environment(self, env):
<         if ("backend=ofi") in self.spec:
<             env.set('LIBFABRIC', self.spec['libfabric'].prefix)
< 
241a220,228
>         if ("backend=ucx" in self.spec) or \
>            ("backend=ofi" in self.spec) or \
>            ("backend=gni" in self.spec):
>             if ("pmi=none" in self.spec):
>                 raise InstallError("The UCX/OFI/GNI backends need \
>                                     PMI to run. Please add pmi=... \
>                                     Note that PMIx is the preferred \
>                                     option.")
> 
257,264c244,249
<         if spec.satisfies('@6.8.2:') and "shasta" in platform.platform():
<             options = [ ]
<         else:
<             options = [
<                 os.path.basename(self.compiler.cc)
<             ]
<             if '@:6.8.2 %aocc' not in spec:
<                 options.append(os.path.basename(self.compiler.fc))
---
>         options = [
>             os.path.basename(self.compiler.cc)
>         ]
> 
>         if '@:6.8.2 %aocc' not in spec:
>             options.append(os.path.basename(self.compiler.fc))


Differences for the 'chgcentre' package
6c6,8
< from spack.package import *
---
> 
> from spack import *
> 
9,12c11,12
<     """
<     The chgcentre tool can be used
<     to change the phase centre of a measurement set.
<     """
---
>     """The chgcentre tool can be used
>     to change the phase centre of a measurement set."""
21,22d20
<     patch('main.patch')
< 


Differences for the 'cp2k' package
1,5c1
< #updating url to pick the latest version)
< #-    url = "https://github.com/cp2k/cp2k/releases/download/v3.0.0/cp2k-3.0.tar.bz2"
< #+    url = "https://github.com/cp2k/cp2k/releases/download/v2022.1/cp2k-2022.1.tar.bz2"
< 
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
14d9
< from spack.package import *
22,95c17,63
< 
<     homepage = "https://www.cp2k.org"
<     url = "https://github.com/cp2k/cp2k/releases/download/v2022.1/cp2k-2022.1.tar.bz2"
<     git = "https://github.com/cp2k/cp2k.git"
<     list_url = "https://github.com/cp2k/cp2k/releases"
< 
<     maintainers = ["dev-zero"]
< 
<     version("2022.1", sha256="2c34f1a7972973c62d471cd35856f444f11ab22f2ff930f6ead20f3454fd228b")
<     version("9.1", sha256="fedb4c684a98ad857cd49b69a3ae51a73f85a9c36e9cb63e3b02320c74454ce6")
<     version("8.2", sha256="2e24768720efed1a5a4a58e83e2aca502cd8b95544c21695eb0de71ed652f20a")
<     version("8.1", sha256="7f37aead120730234a60b2989d0547ae5e5498d93b1e9b5eb548c041ee8e7772")
<     version("7.1", sha256="ccd711a09a426145440e666310dd01cc5772ab103493c4ae6a3470898cd0addb")
<     version("6.1", sha256="af803558e0a6b9e9d9ce8a3ab955ba32bacd179922455424e061c82c9fefa34b")
<     version("5.1", sha256="e23613b593354fa82e0b8410e17d94c607a0b8c6d9b5d843528403ab09904412")
<     version("4.1", sha256="4a3e4a101d8a35ebd80a9e9ecb02697fb8256364f1eccdbe4e5a85d31fe21343")
<     version("3.0", sha256="1acfacef643141045b7cbade7006f9b7538476d861eeecd9658c9e468dc61151")
<     version("master", branch="master", submodules="True")
< 
<     variant("mpi", default=True, description="Enable MPI support")
<     variant("openmp", default=True, description="Enable OpenMP support")
<     variant(
<         "smm",
<         default="libxsmm",
<         values=("libxsmm", "libsmm", "blas"),
<         description="Library for small matrix multiplications",
<     )
<     variant("plumed", default=False, description="Enable PLUMED support")
<     variant(
<         "libint", default=True, description="Use libint, required for HFX (and possibly others)"
<     )
<     variant("libxc", default=True, description="Support additional functionals via libxc")
<     variant(
<         "pexsi",
<         default=False,
<         description=("Enable the alternative PEXSI method" "for density matrix evaluation"),
<     )
<     variant(
<         "elpa", default=False, description="Enable optimised diagonalisation routines from ELPA"
<     )
<     variant(
<         "sirius",
<         default=False,
<         description=("Enable planewave electronic structure" " calculations via SIRIUS"),
<     )
<     variant("cosma", default=False, description="Use COSMA for p?gemm")
<     variant(
<         "libvori",
<         default=False,
<         description=("Enable support for Voronoi integration" " and BQB compression"),
<     )
<     variant("spglib", default=False, description="Enable support for spglib")
< 
<     with when("+cuda"):
<         variant(
<             "cuda_arch_35_k20x",
<             default=False,
<             description=(
<                 "CP2K (resp. DBCSR) has specific parameter sets for"
<                 " different GPU models. Enable this when building"
<                 " with cuda_arch=35 for a K20x instead of a K40"
<             ),
<         )
<         variant(
<             "cuda_fft",
<             default=False,
<             description=("Use CUDA also for FFTs in the PW part of CP2K"),
<         )
<         variant(
<             "cuda_blas",
<             default=False,
<             when="@:7",  # req in CP2K v8+
<             description=("Use CUBLAS for general matrix operations in DBCSR"),
<         )
---
>     homepage = 'https://www.cp2k.org'
>     url = 'https://github.com/cp2k/cp2k/releases/download/v3.0.0/cp2k-3.0.tar.bz2'
>     git = 'https://github.com/cp2k/cp2k.git'
>     list_url = 'https://github.com/cp2k/cp2k/releases'
> 
>     maintainers = ['dev-zero']
> 
>     version('8.2', sha256='2e24768720efed1a5a4a58e83e2aca502cd8b95544c21695eb0de71ed652f20a')
>     version('8.1', sha256='7f37aead120730234a60b2989d0547ae5e5498d93b1e9b5eb548c041ee8e7772')
>     version('7.1', sha256='ccd711a09a426145440e666310dd01cc5772ab103493c4ae6a3470898cd0addb')
>     version('6.1', sha256='af803558e0a6b9e9d9ce8a3ab955ba32bacd179922455424e061c82c9fefa34b')
>     version('5.1', sha256='e23613b593354fa82e0b8410e17d94c607a0b8c6d9b5d843528403ab09904412')
>     version('4.1', sha256='4a3e4a101d8a35ebd80a9e9ecb02697fb8256364f1eccdbe4e5a85d31fe21343')
>     version('3.0', sha256='1acfacef643141045b7cbade7006f9b7538476d861eeecd9658c9e468dc61151')
>     version('master', branch='master', submodules="True")
> 
>     variant('mpi', default=True, description='Enable MPI support')
>     variant('openmp', default=True, description='Enable OpenMP support')
>     variant('smm', default='libxsmm', values=('libxsmm', 'libsmm', 'blas'),
>             description='Library for small matrix multiplications')
>     variant('plumed', default=False, description='Enable PLUMED support')
>     variant('libint', default=True,
>             description='Use libint, required for HFX (and possibly others)')
>     variant('libxc', default=True,
>             description='Support additional functionals via libxc')
>     variant('pexsi', default=False,
>             description=('Enable the alternative PEXSI method'
>                          'for density matrix evaluation'))
>     variant('elpa', default=False,
>             description='Enable optimised diagonalisation routines from ELPA')
>     variant('sirius', default=False,
>             description=('Enable planewave electronic structure'
>                          ' calculations via SIRIUS'))
>     variant('cosma', default=False, description='Use COSMA for p?gemm')
>     variant('libvori', default=False,
>             description=('Enable support for Voronoi integration'
>                          ' and BQB compression'))
>     variant('spglib', default=False, description='Enable support for spglib')
> 
>     variant('cuda_arch_35_k20x', default=False,
>             description=('CP2K (resp. DBCSR) has specific parameter sets for'
>                          ' different GPU models. Enable this when building'
>                          ' with cuda_arch=35 for a K20x instead of a K40'))
>     variant('cuda_fft', default=False,
>             description=('Use CUDA also for FFTs in the PW part of CP2K'))
>     variant('cuda_blas', default=False,
>             description=('Use CUBLAS for general matrix operations in DBCSR'))
99,112c67,78
<     variant(
<         "lmax",
<         description="Maximum supported angular momentum (HFX and others)",
<         default="5",
<         values=[str(x) for x in HFX_LMAX_RANGE],
<         multi=False,
<     )
< 
<     depends_on("python", type="build")
<     depends_on("python@3:", when="@8:", type="build")
< 
<     depends_on("blas")
<     depends_on("lapack")
<     depends_on("fftw-api@3")
---
>     variant('lmax',
>             description='Maximum supported angular momentum (HFX and others)',
>             default='5',
>             values=[str(x) for x in HFX_LMAX_RANGE],
>             multi=False)
> 
>     depends_on('python', type='build')
>     depends_on('python@3:', when='@8:', type='build')
> 
>     depends_on('blas')
>     depends_on('lapack')
>     depends_on('fftw-api@3')
115,123c81,84
<     with when("+openmp"):
<         depends_on("fftw+openmp", when="^fftw")
<         depends_on("amdfftw+openmp", when="^amdfftw")
<         depends_on("cray-fftw+openmp", when="^cray-fftw")
<         depends_on("openblas threads=openmp", when="^openblas")
<         # The Cray compiler wrappers will automatically add libsci_mp with
<         # -fopenmp. Since CP2K unconditionally links blas/lapack/scalapack
<         # we have to be consistent.
<         depends_on("cray-libsci+openmp", when="^cray-libsci")
---
>     with when('+openmp'):
>         depends_on('fftw+openmp', when='^fftw')
>         depends_on('amdfftw+openmp', when='^amdfftw')
>         depends_on('openblas threads=openmp', when='^openblas')
125,126c86
<     with when("smm=libxsmm"):
<         depends_on("libxsmm@1.17:~header-only", when="@9.1:")
---
>     with when('smm=libxsmm'):
128c88
<         depends_on("libxsmm@1.11:~header-only", when="@:8.9")
---
>         depends_on('libxsmm@1.11:~header-only')
130c90
<         depends_on("pkgconfig", type="build")
---
>         depends_on('pkgconfig', type='build')
133c93
<         conflicts("target=aarch64:", msg="libxsmm is not available on arm")
---
>         conflicts('target=aarch64:', msg='libxsmm is not available on arm')
135c95
<     with when("+libint"):
---
>     with when('+libint'):
137c97
<         depends_on("pkgconfig", type="build", when="@7.0:")
---
>         depends_on('pkgconfig', type='build', when='@7.0:')
139c99
<         depends_on("libint@1.1.4:1.2", when="@3.0:6.9")
---
>         depends_on('libint@1.1.4:1.2', when='@3.0:6.9')
142,145c102,103
<             depends_on(
<                 "libint@2.6.0:+fortran tune=cp2k-lmax-{0}".format(lmax),
<                 when="@7.0: lmax={0}".format(lmax),
<             )
---
>             depends_on('libint@2.6.0:+fortran tune=cp2k-lmax-{0}'.format(lmax),
>                        when='@7.0: lmax={0}'.format(lmax))
147,163c105,119
<     with when("+libxc"):
<         depends_on("pkgconfig", type="build", when="@7.0:")
<         depends_on("libxc@2.2.2:3", when="@:5", type="build")
<         depends_on("libxc@4.0.3:4", when="@6.0:6.9", type="build")
<         depends_on("libxc@4.0.3:4", when="@7.0:8.1")
<         depends_on("libxc@5.1.3:5.1", when="@8.2:8")
<         depends_on("libxc@5.1.7:5.1", when="@9:")
< 
<     with when("+mpi"):
<         depends_on("mpi@2:")
<         depends_on("scalapack")
< 
<     with when("+cosma"):
<         depends_on("cosma+scalapack")
<         depends_on("cosma@2.5.1:", when="@9:")
<         depends_on("cosma+cuda", when="+cuda")
<         conflicts("~mpi")
---
>     with when('+libxc'):
>         depends_on('pkgconfig', type='build', when='@7.0:')
>         depends_on('libxc@2.2.2:3', when='@:5', type='build')
>         depends_on('libxc@4.0.3:4', when='@6.0:6.9', type='build')
>         depends_on('libxc@4.0.3:4', when='@7.0:8.1')
>         depends_on('libxc@5.1.3:5.1', when='@8.2:')
> 
>     with when('+mpi'):
>         depends_on('mpi@2:')
>         depends_on('scalapack')
> 
>     with when('+cosma'):
>         depends_on('cosma+scalapack')
>         depends_on('cosma+cuda', when='+cuda')
>         conflicts('~mpi')
165c121
<         conflicts("@:7")
---
>         conflicts('@:7')
167,180c123,135
<     with when("+elpa"):
<         conflicts("~mpi", msg="elpa requires MPI")
<         depends_on("elpa+openmp", when="+openmp")
<         depends_on("elpa~openmp", when="~openmp")
<         depends_on("elpa@2011.12:2016.13", when="@:5")
<         depends_on("elpa@2011.12:2017.11", when="@6.0:6")
<         depends_on("elpa@2018.05:2020.11.001", when="@7.0:8.2")
<         depends_on("elpa@2021.05:", when="@8.3:")
<         depends_on("elpa@2021.11.001:", when="@9.1:")
< 
<     with when("+plumed"):
<         depends_on("plumed+shared")
<         depends_on("plumed+mpi", when="+mpi")
<         depends_on("plumed~mpi", when="~mpi")
---
>     with when('+elpa'):
>         conflicts('~mpi', msg='elpa requires MPI')
>         depends_on('elpa+openmp', when='+openmp')
>         depends_on('elpa~openmp', when='~openmp')
>         depends_on('elpa@2011.12:2016.13', when='@:5')
>         depends_on('elpa@2011.12:2017.11', when='@6.0:6')
>         depends_on('elpa@2018.05:2020.11.001', when='@7.0:8.2')
>         depends_on('elpa@2021.05:', when='@8.3:')
> 
>     with when('+plumed'):
>         depends_on('plumed+shared')
>         depends_on('plumed+mpi', when='+mpi')
>         depends_on('plumed~mpi', when='~mpi')
184,187c139,142
<     with when("+pexsi"):
<         conflicts("~mpi", msg="pexsi requires MPI")
<         depends_on("pexsi+fortran@0.9.0:0.9", when="@:4")
<         depends_on("pexsi+fortran@0.10.0:", when="@5.0:")
---
>     with when('+pexsi'):
>         conflicts('~mpi', msg='pexsi requires MPI')
>         depends_on('pexsi+fortran@0.9.0:0.9', when='@:4')
>         depends_on('pexsi+fortran@0.10.0:', when='@5.0:')
192,200c147,154
<     with when("+sirius"):
<         depends_on("sirius+fortran+shared")
<         depends_on("sirius+openmp", when="+openmp")
<         depends_on("sirius~openmp", when="~openmp")
<         depends_on("sirius@:6", when="@:7")
<         depends_on("sirius@7.0.0:7.0", when="@8:8.2")
<         depends_on("sirius@7.2", when="@8.3:8.9")
<         depends_on("sirius@7.3:", when="@9.1")
<         conflicts("~mpi")
---
>     with when('+sirius'):
>         depends_on('sirius+fortran+shared')
>         depends_on('sirius+openmp', when='+openmp')
>         depends_on('sirius~openmp', when='~openmp')
>         depends_on('sirius@:6', when='@:7')
>         depends_on('sirius@7.0.0:7.0', when='@8:8.2')
>         depends_on('sirius@7.2:', when='@8.3:')
>         conflicts('~mpi')
202c156
<         conflicts("@:6")
---
>         conflicts('@:6')
204,206c158,160
<     with when("+libvori"):
<         depends_on("libvori@201219:", when="@8.1", type="build")
<         depends_on("libvori@210412:", when="@8.2:", type="build")
---
>     with when('+libvori'):
>         depends_on('libvori@201219:', when='@8.1', type='build')
>         depends_on('libvori@210412:', when='@8.2:', type='build')
208c162
<         conflicts("@:7")
---
>         conflicts('@:7')
212,213c166,167
<     depends_on("py-numpy", when="@7:+cuda", type="build")
<     depends_on("python@3.6:", when="@7:+cuda", type="build")
---
>     depends_on('py-numpy', when='@7:+cuda', type='build')
>     depends_on('python@3.6:', when='@7:+cuda', type='build')
215c169,171
<     depends_on("spglib", when="+spglib")
---
>     depends_on('spglib', when='+spglib')
>     conflicts('~cuda', '+cuda_fft')
>     conflicts('~cuda', '+cuda_blas')
220c176
<     depends_on("wannier90", when="@3.0+mpi", type="build")
---
>     depends_on('wannier90', when='@3.0+mpi', type='build')
223,225c179,181
<     conflicts("%apple-clang")
<     conflicts("%clang")
<     conflicts("%nag")
---
>     conflicts('%apple-clang')
>     conflicts('%clang')
>     conflicts('%nag')
227c183
<     conflicts("~openmp", when="@8:", msg="Building without OpenMP is not supported in CP2K 8+")
---
>     conflicts('~openmp', when='@8:', msg='Building without OpenMP is not supported in CP2K 8+')
233,234c189,190
<     dbcsr_cuda_archs = ("35", "37", "60", "70")
<     cuda_msg = "cp2k only supports cuda_arch {0}".format(dbcsr_cuda_archs)
---
>     dbcsr_cuda_archs = ('35', '37', '60', '70')
>     cuda_msg = 'cp2k only supports cuda_arch {0}'.format(dbcsr_cuda_archs)
238c194
<             conflicts("+cuda", when="cuda_arch={0}".format(arch), msg=cuda_msg)
---
>             conflicts('+cuda', when='cuda_arch={0}'.format(arch), msg=cuda_msg)
240c196
<     conflicts("+cuda", when="cuda_arch=none", msg=cuda_msg)
---
>     conflicts('+cuda', when='cuda_arch=none', msg=cuda_msg)
243,247c199,201
<     patch(
<         "https://github.com/cp2k/cp2k/commit/5eaf864ed2bd21fb1b05a9173bb77a815ad4deda.patch?full_index=1",
<         sha256="3617abb877812c4b933f601438c70f95e21c6161bea177277b1d4125fd1c0bf9",
<         when="@8.2",
<     )
---
>     patch("https://github.com/cp2k/cp2k/commit/5eaf864ed2bd21fb1b05a9173bb77a815ad4deda.patch",
>           sha256="18e58ba8fdde5c507bece48ec064f7f2b80e59d1b7cfe6b7a639e5f64f84d43f",
>           when="@8.2")
251c205
<         return "{0.architecture}-{0.compiler.name}".format(self.spec)
---
>         return '{0.architecture}-{0.compiler.name}'.format(self.spec)
255,257c209,211
<         return "{prefix}{suffix}".format(
<             prefix="p" if "+mpi" in self.spec else "s",
<             suffix="smp" if "+openmp" in self.spec else "opt",
---
>         return '{prefix}{suffix}'.format(
>             prefix='p' if '+mpi' in self.spec else 's',
>             suffix='smp' if '+openmp' in self.spec else 'opt'
262,263c216,219
<         makefile_basename = ".".join([self.makefile_architecture, self.makefile_version])
<         return join_path("arch", makefile_basename)
---
>         makefile_basename = '.'.join([
>             self.makefile_architecture, self.makefile_version
>         ])
>         return join_path('arch', makefile_basename)
270c226
<         pkgconf = which("pkg-config")
---
>         pkgconf = which('pkg-config')
272,273c228,229
<         if "^fftw" in spec:
<             fftw = spec["fftw:openmp" if "+openmp" in spec else "fftw"]
---
>         if '^fftw' in spec:
>             fftw = spec['fftw:openmp' if '+openmp' in spec else 'fftw']
275,276c231,232
<         elif "^amdfftw" in spec:
<             fftw = spec["amdfftw:openmp" if "+openmp" in spec else "amdfftw"]
---
>         elif '^amdfftw' in spec:
>             fftw = spec['amdfftw:openmp' if '+openmp' in spec else 'amdfftw']
278,287c234,244
<         elif "^intel-mkl" in spec:
<             fftw = spec["intel-mkl"]
<             fftw_header_dir = fftw.headers.directories[0] + "/fftw"
<         elif "^intel-oneapi-mkl" in spec:
<             fftw = spec["intel-oneapi-mkl"]
<             fftw_header_dir = fftw.headers.directories[0] + "/fftw"
<         elif "^intel-parallel-studio+mkl" in spec:
<             fftw = spec["intel-parallel-studio"]
<             fftw_header_dir = "<NOTFOUND>"
<             for incdir in [join_path(f, "fftw") for f in fftw.headers.directories]:
---
>         elif '^intel-mkl' in spec:
>             fftw = spec['intel-mkl']
>             fftw_header_dir = fftw.headers.directories[0] + '/fftw'
>         elif '^intel-oneapi-mkl' in spec:
>             fftw = spec['intel-oneapi-mkl']
>             fftw_header_dir = fftw.headers.directories[0] + '/fftw'
>         elif '^intel-parallel-studio+mkl' in spec:
>             fftw = spec['intel-parallel-studio']
>             fftw_header_dir = '<NOTFOUND>'
>             for incdir in [join_path(f, 'fftw')
>                            for f in fftw.headers.directories]:
291,292c248,249
<         elif "^cray-fftw" in spec:
<             fftw = spec["cray-fftw"]
---
>         elif '^cray-fftw' in spec:
>             fftw = spec['cray-fftw']
296,299c253,256
<             "gcc": [
<                 "-O2",
<                 "-funroll-loops",
<                 "-ftree-vectorize",
---
>             'gcc': [
>                 '-O2',
>                 '-funroll-loops',
>                 '-ftree-vectorize',
301,310c258,263
<             "intel": [
<                 "-O2",
<                 "-pc64",
<                 "-unroll",
<             ],
<             "pgi": ["-fast"],
<             "nvhpc": ["-fast"],
<             "cce": ["-O2"],
<             "xl": ["-O3"],
<             "aocc": ["-O1"],
---
>             'intel': ['-O2', '-pc64', '-unroll', ],
>             'pgi': ['-fast'],
>             'nvhpc': ['-fast'],
>             'cce': ['-O2'],
>             'xl': ['-O3'],
>             'aocc': ['-O1'],
313c266
<         dflags = ["-DNDEBUG"]
---
>         dflags = ['-DNDEBUG']
315,316c268,269
<             "-D__FFTW3",
<             "-I{0}".format(fftw_header_dir),
---
>             '-D__FFTW3',
>             '-I{0}'.format(fftw_header_dir),
319,322c272,275
<         if "^mpi@3:" in spec:
<             cppflags.append("-D__MPI_VERSION=3")
<         elif "^mpi@2:" in spec:
<             cppflags.append("-D__MPI_VERSION=2")
---
>         if '^mpi@3:' in spec:
>             cppflags.append('-D__MPI_VERSION=3')
>         elif '^mpi@2:' in spec:
>             cppflags.append('-D__MPI_VERSION=2')
327c280
<         nvflags = ["-O3"]
---
>         nvflags = ['-O3']
330c283
<         gpuver = ""
---
>         gpuver = ''
332,334c285,287
<         if "%intel" in spec:
<             cflags.append("-fp-model precise")
<             cxxflags.append("-fp-model precise")
---
>         if '%intel' in spec:
>             cflags.append('-fp-model precise')
>             cxxflags.append('-fp-model precise')
336,339c289,292
<                 "-fp-model precise",
<                 "-heap-arrays 64",
<                 "-g",
<                 "-traceback",
---
>                 '-fp-model precise',
>                 '-heap-arrays 64',
>                 '-g',
>                 '-traceback',
341c294
<         elif "%gcc" in spec:
---
>         elif '%gcc' in spec:
343,345c296,298
<                 "-ffree-form",
<                 "-ffree-line-length-none",
<                 "-ggdb",  # make sure we get proper Fortran backtraces
---
>                 '-ffree-form',
>                 '-ffree-line-length-none',
>                 '-ggdb',  # make sure we get proper Fortran backtraces
347c300
<         elif "%aocc" in spec:
---
>         elif '%aocc' in spec:
349,350c302,303
<                 "-ffree-form",
<                 "-Mbackslash",
---
>                 '-ffree-form',
>                 '-Mbackslash',
352,358c305,311
<         elif "%pgi" in spec or "%nvhpc" in spec:
<             fcflags += ["-Mfreeform", "-Mextend"]
<         elif "%cce" in spec:
<             fcflags += ["-emf", "-ffree", "-hflex_mp=strict"]
<         elif "%xl" in spec:
<             fcflags += ["-qpreprocess", "-qstrict", "-q64"]
<             ldflags += ["-Wl,--allow-multiple-definition"]
---
>         elif '%pgi' in spec or '%nvhpc' in spec:
>             fcflags += ['-Mfreeform', '-Mextend']
>         elif '%cce' in spec:
>             fcflags += ['-emf', '-ffree', '-hflex_mp=strict']
>         elif '%xl' in spec:
>             fcflags += ['-qpreprocess', '-qstrict', '-q64']
>             ldflags += ['-Wl,--allow-multiple-definition']
360,363c313,314
<         if "%gcc@10: +mpi" in spec and spec["mpi"].name in ["mpich", "cray-mpich"]:
<             fcflags += [
<                 "-fallow-argument-mismatch"
<             ]  # https://github.com/pmodels/mpich/issues/4300
---
>         if '%gcc@10: +mpi' in spec and spec['mpi'].name in ['mpich', 'cray-mpich']:
>             fcflags += ['-fallow-argument-mismatch']  # https://github.com/pmodels/mpich/issues/4300
365c316
<         if "+openmp" in spec:
---
>         if '+openmp' in spec:
370,375c321,327
<             nvflags.append('-Xcompiler="{0}"'.format(self.compiler.openmp_flag))
<         elif "%cce" in spec:  # Cray enables OpenMP by default
<             cflags += ["-hnoomp"]
<             cxxflags += ["-hnoomp"]
<             fcflags += ["-hnoomp"]
<             ldflags += ["-hnoomp"]
---
>             nvflags.append('-Xcompiler="{0}"'.format(
>                 self.compiler.openmp_flag))
>         elif '%cce' in spec:  # Cray enables OpenMP by default
>             cflags   += ['-hnoomp']
>             cxxflags += ['-hnoomp']
>             fcflags  += ['-hnoomp']
>             ldflags  += ['-hnoomp']
377c329
<         if "@7:" in spec:  # recent versions of CP2K use C++14 CUDA code
---
>         if '@7:' in spec:  # recent versions of CP2K use C++14 CUDA code
383,384c335,336
<         if "superlu-dist@4.3" in spec:
<             ldflags.insert(0, "-Wl,--allow-multiple-definition")
---
>         if 'superlu-dist@4.3' in spec:
>             ldflags.insert(0, '-Wl,--allow-multiple-definition')
386,395c338,348
<         if "+plumed" in self.spec:
<             dflags.extend(["-D__PLUMED2"])
<             cppflags.extend(["-D__PLUMED2"])
<             libs.extend(
<                 [join_path(self.spec["plumed"].prefix.lib, "libplumed.{0}".format(dso_suffix))]
<             )
< 
<         cc = spack_cc if "~mpi" in spec else spec["mpi"].mpicc
<         cxx = spack_cxx if "~mpi" in spec else spec["mpi"].mpicxx
<         fc = spack_fc if "~mpi" in spec else spec["mpi"].mpifc
---
>         if '+plumed' in self.spec:
>             dflags.extend(['-D__PLUMED2'])
>             cppflags.extend(['-D__PLUMED2'])
>             libs.extend([
>                 join_path(self.spec['plumed'].prefix.lib,
>                           'libplumed.{0}'.format(dso_suffix))
>             ])
> 
>         cc = spack_cc if '~mpi' in spec else spec['mpi'].mpicc
>         cxx = spack_cxx if '~mpi' in spec else spec['mpi'].mpicxx
>         fc = spack_fc if '~mpi' in spec else spec['mpi'].mpifc
398,406c351,361
<         if "%intel" in spec:
<             cppflags.extend(
<                 [
<                     "-D__INTEL",
<                     "-D__HAS_ISO_C_BINDING",
<                     "-D__USE_CP2K_TRACE",
<                 ]
<             )
<             fcflags.extend(["-diag-disable 8290,8291,10010,10212,11060", "-free", "-fpp"])
---
>         if '%intel' in spec:
>             cppflags.extend([
>                 '-D__INTEL',
>                 '-D__HAS_ISO_C_BINDING',
>                 '-D__USE_CP2K_TRACE',
>             ])
>             fcflags.extend([
>                 '-diag-disable 8290,8291,10010,10212,11060',
>                 '-free',
>                 '-fpp'
>             ])
409,410c364,365
<         lapack = spec["lapack"].libs
<         blas = spec["blas"].libs
---
>         lapack = spec['lapack'].libs
>         blas = spec['blas'].libs
414,419c369,374
<         if any(
<             p in spec for p in ("^intel-mkl", "^intel-parallel-studio+mkl", "^intel-oneapi-mkl")
<         ):
<             cppflags += ["-D__MKL"]
<         elif "^accelerate" in spec:
<             cppflags += ["-D__ACCELERATE"]
---
>         if any(p in spec for p in ('^intel-mkl',
>                                    '^intel-parallel-studio+mkl',
>                                    '^intel-oneapi-mkl')):
>             cppflags += ['-D__MKL']
>         elif '^accelerate' in spec:
>             cppflags += ['-D__ACCELERATE']
421c376
<         if "+cosma" in spec:
---
>         if '+cosma' in spec:
423c378
<             cosma = spec["cosma"].libs
---
>             cosma = spec['cosma'].libs
428,432c383,392
<         if "+mpi" in spec:
<             cppflags.extend(["-D__parallel", "-D__SCALAPACK"])
< 
<             if "^intel-oneapi-mpi" in spec:
<                 mpi = [join_path(spec["intel-oneapi-mpi"].libs.directories[0], "libmpi.so")]
---
>         if '+mpi' in spec:
>             cppflags.extend([
>                 '-D__parallel',
>                 '-D__SCALAPACK'
>             ])
> 
>             if '^intel-oneapi-mpi' in spec:
>                 mpi = [join_path(
>                        spec['intel-oneapi-mpi'].libs.directories[0],
>                        'libmpi.so')]
434c394
<                 mpi = spec["mpi:cxx"].libs
---
>                 mpi = spec['mpi:cxx'].libs
438,439c398,399
<             if "^intel-oneapi-mkl" in spec:
<                 mpi_impl = "openmpi" if "^openmpi" in spec else "intelmpi"
---
>             if '^intel-oneapi-mkl' in spec:
>                 mpi_impl = 'openmpi' if '^openmpi' in spec else 'intelmpi'
442,443c402,403
<                         spec["intel-oneapi-mkl"].libs.directories[0], "libmkl_scalapack_lp64.so"
<                     ),
---
>                         spec['intel-oneapi-mkl'].libs.directories[0],
>                         'libmkl_scalapack_lp64.so'),
445,447c405,407
<                         spec["intel-oneapi-mkl"].libs.directories[0],
<                         "libmkl_blacs_{0}_lp64.so".format(mpi_impl),
<                     ),
---
>                         spec['intel-oneapi-mkl'].libs.directories[0],
>                         'libmkl_blacs_{0}_lp64.so'.format(mpi_impl)
>                     )
450c410
<                 scalapack = spec["scalapack"].libs
---
>                 scalapack = spec['scalapack'].libs
457,459c417,421
<             if "wannier90" in spec:
<                 cppflags.append("-D__WANNIER90")
<                 wannier = join_path(spec["wannier90"].libs.directories[0], "libwannier.a")
---
>             if 'wannier90' in spec:
>                 cppflags.append('-D__WANNIER90')
>                 wannier = join_path(
>                     spec['wannier90'].libs.directories[0], 'libwannier.a'
>                 )
462,463c424,425
<         if "+libint" in spec:
<             cppflags += ["-D__LIBINT"]
---
>         if '+libint' in spec:
>             cppflags += ['-D__LIBINT']
465c427
<             if "@:6.9" in spec:
---
>             if '@:6.9' in spec:
467,468c429,430
<                     "-D__LIBINT_MAX_AM=6",
<                     "-D__LIBDERIV_MAX_AM1=5",
---
>                     '-D__LIBINT_MAX_AM=6',
>                     '-D__LIBDERIV_MAX_AM1=5',
476,481c438,443
<                 libs.extend(
<                     [
<                         join_path(spec["libint"].libs.directories[0], "libderiv.a"),
<                         join_path(spec["libint"].libs.directories[0], "libint.a"),
<                     ]
<                 )
---
>                 libs.extend([
>                     join_path(
>                         spec['libint'].libs.directories[0], 'libderiv.a'),
>                     join_path(
>                         spec['libint'].libs.directories[0], 'libint.a'),
>                 ])
483,484c445,446
<                 fcflags += pkgconf("--cflags", "libint2", output=str).split()
<                 libs += pkgconf("--libs", "libint2", output=str).split()
---
>                 fcflags += pkgconf('--cflags', 'libint2', output=str).split()
>                 libs += pkgconf('--libs', 'libint2', output=str).split()
486,487c448,449
<         if "+libxc" in spec:
<             cppflags += ["-D__LIBXC"]
---
>         if '+libxc' in spec:
>             cppflags += ['-D__LIBXC']
489,490c451,452
<             if "@:6.9" in spec:
<                 libxc = spec["libxc:fortran,static"]
---
>             if '@:6.9' in spec:
>                 libxc = spec['libxc:fortran,static']
495c457
<                 fcflags += pkgconf("--cflags", "libxcf03", output=str).split()
---
>                 fcflags += pkgconf('--cflags', 'libxcf03', output=str).split()
499,515c461
<                 libs += pkgconf("--libs", "libxcf03", "libxc", output=str).split()
< 
<         if "+pexsi" in spec:
<             cppflags.append("-D__LIBPEXSI")
<             fcflags.append("-I" + join_path(spec["pexsi"].prefix, "fortran"))
<             libs.extend(
<                 [
<                     join_path(spec["pexsi"].libs.directories[0], "libpexsi.a"),
<                     join_path(spec["superlu-dist"].libs.directories[0], "libsuperlu_dist.a"),
<                     join_path(
<                         spec["parmetis"].libs.directories[0], "libparmetis.{0}".format(dso_suffix)
<                     ),
<                     join_path(
<                         spec["metis"].libs.directories[0], "libmetis.{0}".format(dso_suffix)
<                     ),
<                 ]
<             )
---
>                 libs += pkgconf('--libs', 'libxcf03', 'libxc', output=str).split()
517,519c463,483
<         if "+elpa" in spec:
<             elpa = spec["elpa"]
<             elpa_suffix = "_openmp" if "+openmp" in elpa else ""
---
>         if '+pexsi' in spec:
>             cppflags.append('-D__LIBPEXSI')
>             fcflags.append('-I' + join_path(
>                 spec['pexsi'].prefix, 'fortran'))
>             libs.extend([
>                 join_path(spec['pexsi'].libs.directories[0], 'libpexsi.a'),
>                 join_path(spec['superlu-dist'].libs.directories[0],
>                           'libsuperlu_dist.a'),
>                 join_path(
>                     spec['parmetis'].libs.directories[0],
>                     'libparmetis.{0}'.format(dso_suffix)
>                 ),
>                 join_path(
>                     spec['metis'].libs.directories[0],
>                     'libmetis.{0}'.format(dso_suffix)
>                 ),
>             ])
> 
>         if '+elpa' in spec:
>             elpa = spec['elpa']
>             elpa_suffix = '_openmp' if '+openmp' in elpa else ''
522c486
<             fcflags += ["-I{0}".format(join_path(elpa_incdir, "modules"))]
---
>             fcflags += ['-I{0}'.format(join_path(elpa_incdir, 'modules'))]
525,530c489,492
<             if "%aocc" in spec:
<                 libs.append(
<                     join_path(
<                         elpa.prefix.lib, ("libelpa{elpa_suffix}.a".format(elpa_suffix=elpa_suffix))
<                     )
<                 )
---
>             if '%aocc' in spec:
>                 libs.append(join_path(elpa.prefix.lib,
>                             ('libelpa{elpa_suffix}.a'
>                                 .format(elpa_suffix=elpa_suffix))))
532,547c494,503
<                 libs.append(
<                     join_path(
<                         elpa.libs.directories[0],
<                         (
<                             "libelpa{elpa_suffix}.{dso_suffix}".format(
<                                 elpa_suffix=elpa_suffix, dso_suffix=dso_suffix
<                             )
<                         ),
<                     )
<                 )
< 
<             if spec.satisfies("@:4"):
<                 if elpa.satisfies("@:2014.5"):
<                     cppflags.append("-D__ELPA")
<                 elif elpa.satisfies("@2014.6:2015.10"):
<                     cppflags.append("-D__ELPA2")
---
>                 libs.append(join_path(elpa.prefix.lib,
>                             ('libelpa{elpa_suffix}.{dso_suffix}'
>                                 .format(elpa_suffix=elpa_suffix,
>                                         dso_suffix=dso_suffix))))
> 
>             if spec.satisfies('@:4'):
>                 if elpa.satisfies('@:2014.5'):
>                     cppflags.append('-D__ELPA')
>                 elif elpa.satisfies('@2014.6:2015.10'):
>                     cppflags.append('-D__ELPA2')
549c505
<                     cppflags.append("-D__ELPA3")
---
>                     cppflags.append('-D__ELPA3')
551,562c507,515
<                 cppflags.append(
<                     "-D__ELPA={0}{1:02d}".format(elpa.version[0], int(elpa.version[1]))
<                 )
<                 fcflags += ["-I{0}".format(join_path(elpa_incdir, "elpa"))]
< 
<             if "+cuda" in spec and "+cuda" in elpa:
<                 cppflags += ["-D__ELPA_NVIDIA_GPU"]
< 
<         if spec.satisfies("+sirius"):
<             sirius = spec["sirius"]
<             cppflags.append("-D__SIRIUS")
<             fcflags += ["-I{0}".format(sirius.prefix.include.sirius)]
---
>                 cppflags.append('-D__ELPA={0}{1:02d}'
>                                 .format(elpa.version[0],
>                                         int(elpa.version[1])))
>                 fcflags += ['-I{0}'.format(join_path(elpa_incdir, 'elpa'))]
> 
>         if spec.satisfies('+sirius'):
>             sirius = spec['sirius']
>             cppflags.append('-D__SIRIUS')
>             fcflags += ['-I{0}'.format(sirius.prefix.include.sirius)]
565,583c518,524
<         if spec.satisfies("+cuda"):
<             libs += [
<                 "-L{}".format(spec["cuda"].libs.directories[0]),
<                 "-L{}/stubs".format(spec["cuda"].libs.directories[0]),
<                 "-lcuda",
<                 "-lcudart",
<                 "-lnvrtc",
<                 "-lstdc++",
<             ]
< 
<             if spec.satisfies("@9:"):
<                 acc_compiler_var = "OFFLOAD_CC"
<                 acc_flags_var = "OFFLOAD_FLAGS"
<                 cppflags += [
<                     "-D__DBCSR_ACC",
<                     "-D__GRID_CUDA",
<                     "-DOFFLOAD_TARGET=cuda",
<                 ]
<                 libs += ["-lcublas"]
---
>         if spec.satisfies('+cuda'):
>             cppflags += ['-D__ACC']
>             libs += ['-lcudart', '-lnvrtc', '-lcuda']
> 
>             if spec.satisfies('+cuda_blas'):
>                 cppflags += ['-D__DBCSR_ACC=2']
>                 libs += ['-lcublas']
585,592c526
<                 acc_compiler_var = "NVCC"
<                 acc_flags_var = "NVFLAGS"
<                 cppflags += ["-D__ACC"]
<                 if spec.satisfies("+cuda_blas"):
<                     cppflags += ["-D__DBCSR_ACC=2"]
<                     libs += ["-lcublas"]
<                 else:
<                     cppflags += ["-D__DBCSR_ACC"]
---
>                 cppflags += ['-D__DBCSR_ACC']
594,596c528,530
<             if spec.satisfies("+cuda_fft"):
<                 cppflags += ["-D__PW_CUDA"]
<                 libs += ["-lcufft", "-lcublas"]
---
>             if spec.satisfies('+cuda_fft'):
>                 cppflags += ['-D__PW_CUDA']
>                 libs += ['-lcufft', '-lcublas']
598c532
<             cuda_arch = spec.variants["cuda_arch"].value[0]
---
>             cuda_arch = spec.variants['cuda_arch'].value[0]
601,604c535,538
<                     "35": "K40",
<                     "37": "K80",
<                     "60": "P100",
<                     "70": "V100",
---
>                     '35': 'K40',
>                     '37': 'K80',
>                     '60': 'P100',
>                     '70': 'V100',
607,611c541,548
<                 if cuda_arch == "35" and spec.satisfies("+cuda_arch_35_k20x"):
<                     gpuver = "K20X"
< 
<         if "smm=libsmm" in spec:
<             lib_dir = join_path("lib", self.makefile_architecture, self.makefile_version)
---
>                 if (cuda_arch == '35'
>                         and spec.satisfies('+cuda_arch_35_k20x')):
>                     gpuver = 'K20X'
> 
>         if 'smm=libsmm' in spec:
>             lib_dir = join_path(
>                 'lib', self.makefile_architecture, self.makefile_version
>             )
614c551
<                 copy(env["LIBSMM_PATH"], join_path(lib_dir, "libsmm.a"))
---
>                 copy(env['LIBSMM_PATH'], join_path(lib_dir, 'libsmm.a'))
616,619c553,554
<                 raise KeyError(
<                     "Point environment variable LIBSMM_PATH to "
<                     "the absolute path of the libsmm.a file"
<                 )
---
>                 raise KeyError('Point environment variable LIBSMM_PATH to '
>                                'the absolute path of the libsmm.a file')
621,641c556,574
<                 raise IOError(
<                     "The file LIBSMM_PATH pointed to does not "
<                     "exist. Note that it must be absolute path."
<                 )
<             cppflags.extend(
<                 [
<                     "-D__HAS_smm_dnn",
<                     "-D__HAS_smm_vec",
<                 ]
<             )
<             libs.append("-lsmm")
< 
<         elif "smm=libxsmm" in spec:
<             cppflags += ["-D__LIBXSMM"]
<             cppflags += pkgconf("--cflags-only-other", "libxsmmf", output=str).split()
<             fcflags += pkgconf("--cflags-only-I", "libxsmmf", output=str).split()
<             libs += pkgconf("--libs", "libxsmmf", output=str).split()
< 
<         if "+libvori" in spec:
<             cppflags += ["-D__LIBVORI"]
<             libvori = spec["libvori"].libs
---
>                 raise IOError('The file LIBSMM_PATH pointed to does not '
>                               'exist. Note that it must be absolute path.')
>             cppflags.extend([
>                 '-D__HAS_smm_dnn',
>                 '-D__HAS_smm_vec',
>             ])
>             libs.append('-lsmm')
> 
>         elif 'smm=libxsmm' in spec:
>             cppflags += ['-D__LIBXSMM']
>             cppflags += pkgconf('--cflags-only-other', 'libxsmmf',
>                                 output=str).split()
>             fcflags += pkgconf('--cflags-only-I', 'libxsmmf',
>                                output=str).split()
>             libs += pkgconf('--libs', 'libxsmmf', output=str).split()
> 
>         if '+libvori' in spec:
>             cppflags += ['-D__LIBVORI']
>             libvori = spec['libvori'].libs
644c577
<             libs += ["-lstdc++"]
---
>             libs += ['-lstdc++']
646,648c579,581
<         if "+spglib" in spec:
<             cppflags += ["-D__SPGLIB"]
<             spglib = spec["spglib"].libs
---
>         if '+spglib' in spec:
>             cppflags += ['-D__SPGLIB']
>             spglib = spec['spglib'].libs
658,669c591,604
<         with open(self.makefile, "w") as mkf:
<             if "+plumed" in spec:
<                 mkf.write(
<                     "# include Plumed.inc as recommended by"
<                     "PLUMED to include libraries and flags"
<                 )
<                 mkf.write("include {0}\n".format(spec["plumed"].package.plumed_inc))
< 
<             mkf.write("\n# COMPILER, LINKER, TOOLS\n\n")
<             mkf.write(
<                 "FC  = {0}\n" "CC  = {1}\n" "CXX = {2}\n" "LD  = {3}\n".format(fc, cc, cxx, fc)
<             )
---
>         with open(self.makefile, 'w') as mkf:
>             if '+plumed' in spec:
>                 mkf.write('# include Plumed.inc as recommended by'
>                           'PLUMED to include libraries and flags')
>                 mkf.write('include {0}\n'.format(
>                     spec['plumed'].package.plumed_inc
>                 ))
> 
>             mkf.write('\n# COMPILER, LINKER, TOOLS\n\n')
>             mkf.write('FC  = {0}\n'
>                       'CC  = {1}\n'
>                       'CXX = {2}\n'
>                       'LD  = {3}\n'
>                       .format(fc, cc, cxx, fc))
671c606
<             if "%intel" in spec:
---
>             if '%intel' in spec:
679,680c614,615
<                 mkf.write("CPP = # {0} -P\n".format(spack_cc))
<                 mkf.write("AR  = {0}/xiar -r\n".format(intel_bin_dir))
---
>                 mkf.write('CPP = # {0} -P\n'.format(spack_cc))
>                 mkf.write('AR  = {0}/xiar -r\n'.format(intel_bin_dir))
682,683c617,618
<                 mkf.write("CPP = # {0} -E\n".format(spack_cc))
<                 mkf.write("AR  = ar -r\n")
---
>                 mkf.write('CPP = # {0} -E\n'.format(spack_cc))
>                 mkf.write('AR  = ar -r\n')
685,690c620,622
<             if "+cuda" in spec:
<                 mkf.write(
<                     "{0} = {1}\n".format(
<                         acc_compiler_var, join_path(spec["cuda"].prefix, "bin", "nvcc")
<                     )
<                 )
---
>             if spec.satisfies('+cuda'):
>                 mkf.write('NVCC = {0}\n'.format(
>                     join_path(spec['cuda'].prefix, 'bin', 'nvcc')))
694,712c626,645
<                 return "{0} = {1}\n\n".format(var, " \\\n\t".join(lst))
< 
<             mkf.write("\n# FLAGS & LIBRARIES\n")
<             mkf.write(fflags("DFLAGS", dflags))
<             mkf.write(fflags("CPPFLAGS", cppflags))
<             mkf.write(fflags("CFLAGS", cflags))
<             mkf.write(fflags("CXXFLAGS", cxxflags))
<             if "+cuda" in spec:
<                 mkf.write(fflags(acc_flags_var, nvflags))
<             mkf.write(fflags("FCFLAGS", fcflags))
<             mkf.write(fflags("LDFLAGS", ldflags))
<             mkf.write(fflags("LIBS", libs))
< 
<             if "%intel" in spec:
<                 mkf.write(fflags("LDFLAGS_C", ldflags + ["-nofor-main"]))
< 
<             mkf.write("# CP2K-specific flags\n\n")
<             mkf.write("GPUVER = {0}\n".format(gpuver))
<             mkf.write("DATA_DIR = {0}\n".format(self.prefix.share.data))
---
>                 return '{0} = {1}\n\n'.format(
>                     var,
>                     ' \\\n\t'.join(lst))
> 
>             mkf.write('\n# FLAGS & LIBRARIES\n')
>             mkf.write(fflags('DFLAGS', dflags))
>             mkf.write(fflags('CPPFLAGS', cppflags))
>             mkf.write(fflags('CFLAGS', cflags))
>             mkf.write(fflags('CXXFLAGS', cxxflags))
>             mkf.write(fflags('NVFLAGS', nvflags))
>             mkf.write(fflags('FCFLAGS', fcflags))
>             mkf.write(fflags('LDFLAGS', ldflags))
>             mkf.write(fflags('LIBS', libs))
> 
>             if '%intel' in spec:
>                 mkf.write(fflags('LDFLAGS_C', ldflags + ['-nofor-main']))
> 
>             mkf.write('# CP2K-specific flags\n\n')
>             mkf.write('GPUVER = {0}\n'.format(gpuver))
>             mkf.write('DATA_DIR = {0}\n'.format(self.prefix.share.data))
718c651
<         if self.spec.satisfies("@:6"):
---
>         if self.spec.satisfies('@:6'):
720c653
<             build_dir = join_path(build_dir, "makefiles")
---
>             build_dir = join_path(build_dir, 'makefiles')
727,728c660,661
<             "ARCH={0}".format(self.makefile_architecture),
<             "VERSION={0}".format(self.makefile_version),
---
>             'ARCH={0}'.format(self.makefile_architecture),
>             'VERSION={0}'.format(self.makefile_version)
732c665
<         if "+cuda" in spec and len(spec.variants["cuda_arch"].value) > 1:
---
>         if len(spec.variants['cuda_arch'].value) > 1:
740,742d672
<             with working_dir(self.build_directory):
<                 make("libcp2k", *self.build_targets)
< 
744,746c674
<         exe_dir = join_path("exe", self.makefile_architecture)
<         lib_dir = join_path("lib", self.makefile_architecture, self.makefile_version)
< 
---
>         exe_dir = join_path('exe', self.makefile_architecture)
748,782c676
<         install_tree("data", self.prefix.share.data)
<         install_tree(lib_dir, self.prefix.lib)
< 
<         mkdirp(self.prefix.include)
<         install("src/start/libcp2k.h", join_path(self.prefix.include, "libcp2k.h"))
< 
<     @run_after("install")
<     def fix_package_config(self):
<         """
<         Default build procedure generates libcp2k.pc with invalid paths,
<         because they are collected from temporary directory.
< 
<         Ignoring invalid paths, most library-related switches are correct
<         except for fftw and openblas.
< 
<         This procedure is appending two missing switches (tested with GROMACS 2022.2 + CP2K).
< 
<         In case such approach causes issues in the future, it might be necessary
<         to generate and override entire libcp2k.pc.
<         """
<         if self.spec.satisfies("@9.1:"):
<             with open(join_path(self.prefix.lib.pkgconfig, "libcp2k.pc"), "r+") as handle:
<                 content = handle.read().rstrip()
< 
<                 content += " " + self.spec["blas"].libs.ld_flags
<                 content += " " + self.spec["lapack"].libs.ld_flags
<                 content += " " + self.spec["fftw-api"].libs.ld_flags
< 
<                 if "^fftw+openmp" in self.spec:
<                     content += " -lfftw3_omp"
< 
<                 content += "\n"
< 
<                 handle.seek(0)
<                 handle.write(content)
---
>         install_tree('data', self.prefix.share.data)
785c679
<         data_dir = join_path(self.stage.source_path, "data")
---
>         data_dir = join_path(self.stage.source_path, 'data')
789c683,684
<         with spack.util.environment.set_env(CP2K_DATA_DIR=data_dir, PWD=self.build_directory):
---
>         with spack.util.environment.set_env(CP2K_DATA_DIR=data_dir,
>                                             PWD=self.build_directory):
791c686
<                 make("test", *self.build_targets)
---
>                 make('test', *self.build_targets)


Differences for the 'cpmd' package
8c8
< from spack.package import *
---
> from spack import *
21c21
<     manual_download = False
---
>     manual_download = True


Differences for the 'everybeam' package


Differences for the 'exabayes' package
11,12c11,12
<     homepage = "https://cme.h-its.org/exelixis/web/software/exabayes/index.html"
<     url      = "https://cme.h-its.org/exelixis/resource/download/software/exabayes-1.5.1.tar.gz"
---
>     homepage = "https://sco.h-its.org/exelixis/web/software/exabayes/"
>     url      = "https://sco.h-its.org/exelixis/resource/download/software/exabayes-1.5.tar.gz"
14a15
>     version('1.5', sha256='e401f1b4645e67e8879d296807131d0ab79bba81a1cd5afea14d7c3838b095a2')
25,33c26,29
< 
<     # gcc 11.x has -std=gnu++17 by default, does not work to build exabayes, at least up to 1.5.1
<     def flag_handler(self, name, flags):
<         if self.spec.satisfies('%gcc@11:') and name == 'cxxflags':
<             flags.append('-std=gnu++14')
<         return (flags, None, None)
< 
<     # configure updated to better determine if MPI compiler available
<     patch('configure_mpi.patch', level=0, when='@1.5.1: +mpi', )
---
>     conflicts('^intel-mpi', when='+mpi')
>     conflicts('^intel-parallel-studio+mpi', when='+mpi')
>     conflicts('^mvapich2', when='+mpi')
>     conflicts('^spectrum-mpi', when='+mpi')
42,51d37
< 
<     # don't do anything autoreconf as configure 
<     # in exabayes is properly setup and
<     # the autotools are not 
<     def autoreconf(self, spec, prefix):
<        return
< 
< 
< 
< 


Differences for the 'ffmpeg' package
6c6
< from spack.package import *
---
> from spack import *
18,19d17
<     version('4.4.1',  sha256='8fc9f20ac5ed95115a9e285647add0eedd5cc1a98a039ada14c132452f98ac42')
<     version('4.4',    sha256='42093549751b582cf0f338a21a3664f52e0a9fbe0d238d3c992005e493607d0e')


Differences for the 'go' package
12c12
< from spack.package import *
---
> from spack import *
49d48
<     version('1.16.12', sha256='2afd839dcb76d2bb082c502c01a0a5cdbfc09fd630757835363c4fde8e2fbfe8')


Differences for the 'gromacs' package
28,29d27
<     version('2021.5', sha256='eba63fe6106812f72711ef7f76447b12dd1ee6c81b3d8d4d0e3098cd9ea009b6')
<     version('2021.4', sha256='cb708a3e3e83abef5ba475fdb62ef8d42ce8868d68f52dafdb6702dc9742ba1d')
102,104d99
<     # Plumed 2.8.0 needs Gromacs 2021.4, 2020.6, 2019.6
<     # Plumed 2.7.4 needs Gromacs 2021.4, 2020.6, 2019.6
<     # Plumed 2.7.3 needs Gromacs 2021.4, 2020.6, 2019.6
127,128d121
<     depends_on('plumed@2.7.2:2.8.0+mpi', when='@2021.4+plumed+mpi')
<     depends_on('plumed@2.7.2:2.8.0~mpi', when='@2021.4+plumed~mpi')
137,138c130,131
<     depends_on('plumed@2.6.1,2.6.6+mpi', when='@2020.2+plumed+mpi')
<     depends_on('plumed@2.6.1,2.6.6~mpi', when='@2020.2+plumed~mpi')
---
>     depends_on('plumed@2.6.1+mpi', when='@2020.2+plumed+mpi')
>     depends_on('plumed@2.6.1~mpi', when='@2020.2+plumed~mpi')


Differences for the 'healpix-cxx' package
6c6
< from spack.package import *
---
> from spack import *
20d19
<     patch('cfitsio_version_check.patch', when="@3.50:")
21a21,29
>     def patch(self):
>         spec = self.spec
>         configure_fix = FileFilter('configure')
>         # Link libsharp static libs
>         configure_fix.filter(
>             r'^SHARP_LIBS=.*$',
>             'SHARP_LIBS="-L{0} -lsharp -lc_utils -lfftpack -lm"'
>             .format(spec['libsharp'].prefix.lib)
>         )


Differences for the 'hpctoolkit' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
6,8c6
< import llnl.util.tty as tty
< 
< from spack.package import *
---
> from spack import *
25,26d22
<     test_requires_compiler = True
< 
29,31d24
< 
<     version('2022.04.15', commit='a92fdad29fc180cc522a9087bba9554a829ee002')
<     version('2022.01.15', commit='0238e9a052a696707e4e65b2269f342baad728ae')
40,42c33,35
<     version('2019.08.14', commit='6ea44ed3f93ede2d0a48937f288a2d41188a277c', deprecated=True)
<     version('2018.12.28', commit='8dbf0d543171ffa9885344f32f23cc6f7f6e39bc', deprecated=True)
<     version('2018.11.05', commit='d0c43e39020e67095b1f1d8bb89b75f22b12aee9', deprecated=True)
---
>     version('2019.08.14', commit='6ea44ed3f93ede2d0a48937f288a2d41188a277c')
>     version('2018.12.28', commit='8dbf0d543171ffa9885344f32f23cc6f7f6e39bc')
>     version('2018.11.05', commit='d0c43e39020e67095b1f1d8bb89b75f22b12aee9')
67,69d59
< #    variant('level_zero', default=False,
< #            description='Support Level Zero on Intel GPUs (2022.04.15 or later).')
< 
74c64,65
<             description='Support ROCM on AMD GPUs (2022.04.15 or later).')
---
>             description='Support ROCM on AMD GPUs, requires ROCM as '
>             'external packages (2021.03.01 or later).')
91,92c82
<     depends_on('dyninst@12.1.0:', when='@2022.0:')
<     depends_on('dyninst@10.2.0:', when='@2021.0:2021.12')
---
>     depends_on('dyninst@10.2.0:', when='@2021.00:')
95c85
<     depends_on('gotcha@1.0.3:', when='@:2020.09')
---
>     depends_on('gotcha@1.0.3:')
100d89
<     depends_on('libmonitor@2021.11.08:', when='@2022.01:')
102c91
<     depends_on('mbedtls+pic', when='@:2022.03')
---
>     depends_on('mbedtls+pic')
108d96
< #    depends_on('oneapi-level-zero', when='+level_zero')
116,119c104,106
<     depends_on('hip@4.5:', when='+rocm')
<     depends_on('hsa-rocr-dev@4.5:', when='+rocm')
<     depends_on('roctracer-dev@4.5:', when='+rocm')
<     depends_on('rocprofiler-dev@4.5:', when='+rocm')
---
>     depends_on('hip', when='+rocm')
>     depends_on('rocm-dbgapi', when='+rocm')
>     depends_on('roctracer-dev', when='+rocm')
133,134c120,121
<     conflicts('+rocm', when='@:2022.03',
<               msg='rocm requires 2022.04.15 or later')
---
>     conflicts('+rocm', when='@:2020',
>               msg='rocm requires 2021.03.01 or later')
142,143c129,130
<     patch('https://github.com/HPCToolkit/hpctoolkit/commit/511afd95b01d743edc5940c84e0079f462b2c23e.patch?full_index=1',
<           sha256='c8371b929f45dafae37d2ef17880fcfb86de893beebaec501a282bc04b61ef64',
---
>     patch('https://github.com/HPCToolkit/hpctoolkit/commit/511afd95b01d743edc5940c84e0079f462b2c23e.patch',
>           sha256='fd0fd7419f66a1feba8046cff9df7f27abce8629ee2708b8a9daa12c1b51243c',
146,150d132
<     # Change python to python3 for some old revs that use a script
<     # with /usr/bin/env python.
<     depends_on('python@3.4:', type='build', when='@2020.03:2020.08')
<     patch('python3.patch', when='@2020.03:2020.08')
< 
161a144
>             '--with-gotcha=%s'       % spec['gotcha'].prefix,
165a149
>             '--with-mbedtls=%s'      % spec['mbedtls'].prefix,
174,179d157
< #        if '+level_zero' in spec:
< #            args.append('--with-level0=%s' % spec['oneapi-level-zero'].prefix)
< 
<         if spec.satisfies('@:2020.09'):
<             args.append('--with-gotcha=%s' % spec['gotcha'].prefix)
< 
183,185d160
<         if spec.satisfies('@:2022.03'):
<             args.append('--with-mbedtls=%s' % spec['mbedtls'].prefix)
< 
197c172
<                 '--with-rocm-hsa=%s'    % spec['hsa-rocr-dev'].prefix,
---
>                 '--with-rocm-dbgapi=%s' % spec['rocm-dbgapi'].prefix,
199d173
<                 '--with-rocm-profiler=%s' % spec['rocprofiler-dev'].prefix,
231,263d204
< 
<     # Build tests (spack install --run-tests).  Disable the default
<     # spack tests and run autotools 'make check', but only from the
<     # tests directory.
<     build_time_test_callbacks = []
<     install_time_test_callbacks = []
< 
<     @run_after('install')
<     @on_package_attributes(run_tests=True)
<     def check_install(self):
<         if self.spec.satisfies('@2022:'):
<             with working_dir('tests'):
<                 make('check')
<         else:
<             tty.warn('spack test for hpctoolkit requires 2022.01.15 or later')
< 
<     # Post-Install tests (spack test run).  These are the same tests
<     # but with a different Makefile that works outside the build
<     # directory.
<     @run_after('install')
<     def copy_test_files(self):
<         if self.spec.satisfies('@2022:'):
<             self.cache_extra_test_sources(['tests'])
< 
<     def test(self):
<         test_dir = join_path(self.test_suite.current_test_cache_dir, 'tests')
<         if self.spec.satisfies('@2022:'):
<             with working_dir(test_dir):
<                 make('-f', 'Makefile.spack', 'all')
<                 self.run_test('./run-sort', status=[0], installed=False,
<                               purpose='selection sort unit test')
<         else:
<             tty.warn('spack test for hpctoolkit requires 2022.01.15 or later')


Differences for the 'idg' package


Differences for the 'ior' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
6c6
< from spack.package import *
---
> from spack import *
25d24
<     variant('lustre', default=False, description='support configurable Lustre striping values')
34d32
<     depends_on('lustre', when='+lustre')
38,39c36,37
<     patch('https://github.com/hpc/ior/commit/1dbca5c293f95074f9887ddb2043fa984670fb4d.patch?full_index=1',
<           sha256='ce7fa0eabf408f9b712c478a08aa62d68737d213901707ef8cbfc3aec02e2713',
---
>     patch('https://github.com/hpc/ior/commit/1dbca5c293f95074f9887ddb2043fa984670fb4d.patch',
>           sha256='f28d6638a74a09e147e9fa870930e54a82ff580d1c232add47a67c375e255ada',
41,45d38
<     # Needs patch to make Lustre variant work
<     # See https://github.com/hpc/ior/issues/353
<     patch('https://github.com/glennklockwood/ior/commit/e49476be64d4100c2da662ea415f327348b3d11d.patch?full_index=1',
<           sha256='ee3527023ef70ea9aee2e6208f8be7126d5a48f26c587deed3d6238b4f848a06', 
<           when='+lustre')
67,71d59
< 
<         if '+lustre' in spec:
<             config_args.append('--with-lustre')
<         else:
<             config_args.append('--without-lustre')


Differences for the 'kokkos' package
7c7
< from spack.package import *
---
> from spack import *
176d175
<     conflicts("+hpx", when="+openmp", msg="HPX and OpenMP are incompatible. Choose one")
178c177
<     cxxstds = ["11", "14", "17", "20"]
---
>     stds = ["11", "14", "17", "20"]
180c179
<     variant("cxxstd", default="14", values=cxxstds, multi=False)
---
>     variant("std", default="14", values=stds, multi=False)
184,185c183,184
<     conflicts("+cuda", when="cxxstd=17 ^cuda@:10", msg="Current nvcc does not support C++17 or C++20")
<     conflicts("+cuda", when="cxxstd=20", msg="Current nvcc does not support C++17 or C++20")
---
>     conflicts("+cuda", when="std=17 ^cuda@:10")
>     conflicts("+cuda", when="std=20")
188,189c187,188
<     for std in cxxstds:
<         depends_on('hpx cxxstd={0}'.format(std), when='+hpx cxxstd={0}'.format(std))
---
>     for std in stds:
>         depends_on('hpx cxxstd={0}'.format(std), when='+hpx std={0}'.format(std))
238c237
<             from_variant("Kokkos_CXX_STANDARD", "cxxstd"),
---
>             from_variant("Kokkos_CXX_STANDARD", "std"),


Differences for the 'libzmq' package
6c6
< from spack.package import *
---
> from spack import *
68,69d67
<         # disable warnings to errors 
<         config_args.append('--disable-Werror')


Differences for the 'llvm' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
5d4
< import os
12d10
< import spack.build_environment
14d11
< from spack.package import *
19,22c16,19
<     toolchain technologies. Despite its name, LLVM has little to do
<     with traditional virtual machines, though it does provide helpful
<     libraries that can be used to build them. The name "LLVM" itself
<     is not an acronym; it is the full name of the project.
---
>        toolchain technologies. Despite its name, LLVM has little to do
>        with traditional virtual machines, though it does provide helpful
>        libraries that can be used to build them. The name "LLVM" itself
>        is not an acronym; it is the full name of the project.
29c26
<     maintainers = ["trws", "haampie"]
---
>     maintainers = ['trws', 'naromero77']
31,33c28
<     tags = ["e4s"]
< 
<     generator = "Ninja"
---
>     tags = ['e4s']
38,80c33,62
<     version("main", branch="main")
<     version("15.0.4", sha256="e24b4d3bf7821dcb1c901d1e09096c1f88fb00095c5a6ef893baab4836975e52")
<     version("15.0.3", sha256="8ac8e4c0982bf236526d737d385db5e1e66543ab217a9355d54159659eae3774")
<     version("15.0.2", sha256="dc11d35e60ab61792baa607dff080c993b39de23fb93b3d3369ba15b0601c307")
<     version("15.0.1", sha256="20bccb964e39f604fdc16d1258f94d2053fbdcdab2b2f6d5e20e6095ec403c00")
<     version("15.0.0", sha256="36d83cd84e1caf2bcfda1669c029e2b949adb9860cff01e7d3246ac2348b11ae")
<     version("14.0.6", sha256="98f15f842700bdb7220a166c8d2739a03a72e775b67031205078f39dd756a055")
<     version("14.0.5", sha256="a4a57f029cb81f04618e05853f05fc2d21b64353c760977d8e7799bf7218a23a")
<     version("14.0.4", sha256="1333236f9bee38658762076be4236cb5ebf15ae9b7f2bfce6946b96ae962dc73")
<     version("14.0.3", sha256="0e1d049b050127ecf6286107e9a4400b0550f841d5d2288b9d31fd32ed0683d5")
<     version("14.0.2", sha256="ca52232b3451c8e017f00eb882277707c13e30fac1271ec97015f6d0eeb383d1")
<     version("14.0.1", sha256="c8be00406e872c8a24f8571cf6f5517b73ae707104724b1fd1db2f0af9544019")
<     version("14.0.0", sha256="87b1a068b370df5b79a892fdb2935922a8efb1fddec4cc506e30fe57b6a1d9c4")
<     version("13.0.1", sha256="09c50d558bd975c41157364421820228df66632802a4a6a7c9c17f86a7340802")
<     version("13.0.0", sha256="a1131358f1f9f819df73fa6bff505f2c49d176e9eef0a3aedd1fdbce3b4630e8")
<     version("12.0.1", sha256="66b64aa301244975a4aea489f402f205cde2f53dd722dad9e7b77a0459b4c8df")
<     version("12.0.0", sha256="8e6c99e482bb16a450165176c2d881804976a2d770e0445af4375e78a1fbf19c")
<     version("11.1.0", sha256="53a0719f3f4b0388013cfffd7b10c7d5682eece1929a9553c722348d1f866e79")
<     version("11.0.1", sha256="9c7ad8e8ec77c5bde8eb4afa105a318fd1ded7dff3747d14f012758719d7171b")
<     version("11.0.0", sha256="8ad4ddbafac4f2c8f2ea523c2c4196f940e8e16f9e635210537582a48622a5d5")
<     version("10.0.1", sha256="c7ccb735c37b4ec470f66a6c35fbae4f029c0f88038f6977180b1a8ddc255637")
<     version("10.0.0", sha256="b81c96d2f8f40dc61b14a167513d87c0d813aae0251e06e11ae8a4384ca15451")
<     version("9.0.1", sha256="be7b034641a5fda51ffca7f5d840b1a768737779f75f7c4fd18fe2d37820289a")
<     version("9.0.0", sha256="7807fac25330e24e9955ca46cd855dd34bbc9cc4fdba8322366206654d1036f2")
<     version("8.0.1", sha256="5b18f6111c7aee7c0933c355877d4abcfe6cb40c1a64178f28821849c725c841")
<     version("8.0.0", sha256="d81238b4a69e93e29f74ce56f8107cbfcf0c7d7b40510b7879e98cc031e25167")
<     version("7.1.0", sha256="71c93979f20e01f1a1cc839a247945f556fa5e63abf2084e8468b238080fd839")
<     version("7.0.1", sha256="f17a6cd401e8fd8f811fbfbb36dcb4f455f898c9d03af4044807ad005df9f3c0")
<     version("6.0.1", sha256="aefadceb231f4c195fe6d6cd3b1a010b269c8a22410f339b5a089c2e902aa177")
<     version("6.0.0", sha256="1946ec629c88d30122afa072d3c6a89cc5d5e4e2bb28dc63b2f9ebcc7917ee64")
<     version("5.0.2", sha256="fe87aa11558c08856739bfd9bd971263a28657663cb0c3a0af01b94f03b0b795")
<     version("5.0.1", sha256="84ca454abf262579814a2a2b846569f6e0cb3e16dc33ca3642b4f1dff6fbafd3")
<     version("5.0.0", sha256="1f1843315657a4371d8ca37f01265fa9aae17dbcf46d2d0a95c1fdb3c6a4bab6")
<     version("4.0.1", sha256="cd664fb3eec3208c08fb61189c00c9118c290b3be5adb3215a97b24255618be5")
<     version("4.0.0", sha256="28ca4b2fc434cb1f558e8865386c233c2a6134437249b8b3765ae745ffa56a34")
<     version("3.9.1", sha256="f5b6922a5c65f9232f83d89831191f2c3ccf4f41fdd8c63e6645bbf578c4ab92")
<     version("3.9.0", sha256="9c6563a72c8b5b79941c773937d997dd2b1b5b3f640136d02719ec19f35e0333")
<     version("3.8.1", sha256="69360f0648fde0dc3d3c4b339624613f3bc2a89c4858933bc3871a250ad02826")
<     version("3.8.0", sha256="b5cc5974cc2fd4e9e49e1bbd0700f872501a8678bd9694fa2b36c65c026df1d1")
<     version("3.7.1", sha256="d2cb0eb9b8eb21e07605bfe5e7a5c6c5f5f8c2efdac01ec1da6ffacaabe4195a")
<     version("3.7.0", sha256="dc00bc230be2006fb87b84f6fe4800ca28bc98e6692811a98195da53c9cb28c6")
<     version("3.6.2", sha256="f75d703a388ba01d607f9cf96180863a5e4a106827ade17b221d43e6db20778a")
<     version("3.5.1", sha256="5d739684170d5b2b304e4fb521532d5c8281492f71e1a8568187bfa38eb5909d")
---
>     version('main', branch='main')
>     version('13.0.0', sha256='a1131358f1f9f819df73fa6bff505f2c49d176e9eef0a3aedd1fdbce3b4630e8')
>     version('12.0.1', sha256='66b64aa301244975a4aea489f402f205cde2f53dd722dad9e7b77a0459b4c8df')
>     version('12.0.0', sha256='8e6c99e482bb16a450165176c2d881804976a2d770e0445af4375e78a1fbf19c')
>     version('11.1.0', sha256='53a0719f3f4b0388013cfffd7b10c7d5682eece1929a9553c722348d1f866e79')
>     version('11.0.1', sha256='9c7ad8e8ec77c5bde8eb4afa105a318fd1ded7dff3747d14f012758719d7171b')
>     version('11.0.0', sha256='8ad4ddbafac4f2c8f2ea523c2c4196f940e8e16f9e635210537582a48622a5d5')
>     version('10.0.1', sha256='c7ccb735c37b4ec470f66a6c35fbae4f029c0f88038f6977180b1a8ddc255637')
>     version('10.0.0', sha256='b81c96d2f8f40dc61b14a167513d87c0d813aae0251e06e11ae8a4384ca15451')
>     version('9.0.1', sha256='be7b034641a5fda51ffca7f5d840b1a768737779f75f7c4fd18fe2d37820289a')
>     version('9.0.0', sha256='7807fac25330e24e9955ca46cd855dd34bbc9cc4fdba8322366206654d1036f2')
>     version('8.0.1', sha256='5b18f6111c7aee7c0933c355877d4abcfe6cb40c1a64178f28821849c725c841')
>     version('8.0.0', sha256='d81238b4a69e93e29f74ce56f8107cbfcf0c7d7b40510b7879e98cc031e25167')
>     version('7.1.0', sha256='71c93979f20e01f1a1cc839a247945f556fa5e63abf2084e8468b238080fd839')
>     version('7.0.1', sha256='f17a6cd401e8fd8f811fbfbb36dcb4f455f898c9d03af4044807ad005df9f3c0')
>     version('6.0.1', sha256='aefadceb231f4c195fe6d6cd3b1a010b269c8a22410f339b5a089c2e902aa177')
>     version('6.0.0', sha256='1946ec629c88d30122afa072d3c6a89cc5d5e4e2bb28dc63b2f9ebcc7917ee64')
>     version('5.0.2', sha256='fe87aa11558c08856739bfd9bd971263a28657663cb0c3a0af01b94f03b0b795')
>     version('5.0.1', sha256='84ca454abf262579814a2a2b846569f6e0cb3e16dc33ca3642b4f1dff6fbafd3')
>     version('5.0.0', sha256='1f1843315657a4371d8ca37f01265fa9aae17dbcf46d2d0a95c1fdb3c6a4bab6')
>     version('4.0.1', sha256='cd664fb3eec3208c08fb61189c00c9118c290b3be5adb3215a97b24255618be5')
>     version('4.0.0', sha256='28ca4b2fc434cb1f558e8865386c233c2a6134437249b8b3765ae745ffa56a34')
>     version('3.9.1', sha256='f5b6922a5c65f9232f83d89831191f2c3ccf4f41fdd8c63e6645bbf578c4ab92')
>     version('3.9.0', sha256='9c6563a72c8b5b79941c773937d997dd2b1b5b3f640136d02719ec19f35e0333')
>     version('3.8.1', sha256='69360f0648fde0dc3d3c4b339624613f3bc2a89c4858933bc3871a250ad02826')
>     version('3.8.0', sha256='b5cc5974cc2fd4e9e49e1bbd0700f872501a8678bd9694fa2b36c65c026df1d1')
>     version('3.7.1', sha256='d2cb0eb9b8eb21e07605bfe5e7a5c6c5f5f8c2efdac01ec1da6ffacaabe4195a')
>     version('3.7.0', sha256='dc00bc230be2006fb87b84f6fe4800ca28bc98e6692811a98195da53c9cb28c6')
>     version('3.6.2', sha256='f75d703a388ba01d607f9cf96180863a5e4a106827ade17b221d43e6db20778a')
>     version('3.5.1', sha256='5d739684170d5b2b304e4fb521532d5c8281492f71e1a8568187bfa38eb5909d')
95d76
<         when="@11: +clang",
104c85
<     variant("lldb", default=True, when="+clang", description="Build the LLVM debugger")
---
>     variant("lldb", default=True, description="Build the LLVM debugger")
106c87
<     variant("mlir", default=False, when="@10:", description="Build with MLIR support")
---
>     variant("mlir", default=False, description="Build with MLIR support")
110d90
<         when="+clang",
116c96,97
<         description="Build the LLVM polyhedral optimization plugin, " "only builds for 3.7.0+",
---
>         description="Build the LLVM polyhedral optimization plugin, "
>         "only builds for 3.7.0+",
121d101
<         when="+clang",
126d105
<         when="+clang",
141,143c120,123
<         "llvm_dylib",
<         default=True,
<         description="Build a combined LLVM shared library with all components",
---
>         "shared_libs",
>         default=False,
>         description="Build all components as shared libraries, faster, "
>         "less memory to build, less stable",
146c126
<         "link_llvm_dylib",
---
>         "llvm_dylib",
148,149c128,129
<         when="+llvm_dylib",
<         description="Link LLVM tools against the LLVM shared library",
---
>         description="Build LLVM shared library, containing all "
>         "components in a single shared library",
152,180c132,135
<         "targets",
<         default="none",
<         description=(
<             "What targets to build. Spack's target family is always added "
<             "(e.g. X86 is automatically enabled when targeting znver2)."
<         ),
<         values=(
<             "all",
<             "none",
<             "aarch64",
<             "amdgpu",
<             "arm",
<             "avr",
<             "bpf",
<             "cppbackend",
<             "hexagon",
<             "lanai",
<             "mips",
<             "msp430",
<             "nvptx",
<             "powerpc",
<             "riscv",
<             "sparc",
<             "systemz",
<             "webassembly",
<             "x86",
<             "xcore",
<         ),
<         multi=True,
---
>         "all_targets",
>         default=False,
>         description="Build all supported targets, default targets "
>         "<current arch>,NVPTX,AMDGPU,CppBackend",
191d145
<         when="@6:",
197d150
<         when="+clang @12:",
200,205c153,154
<     variant(
<         "code_signing",
<         default=False,
<         when="+lldb platform=darwin",
<         description="Enable code-signing on macOS",
<     )
---
>     variant('code_signing', default=False,
>             description="Enable code-signing on macOS")
207,229d155
<     variant("version_suffix", default="none", description="Add a symbol suffix")
<     variant(
<         "shlib_symbol_version",
<         default="none",
<         description="Add shared library symbol version",
<         when="@13:",
<     )
<     variant(
<         "z3", default=False, when="+clang @8:", description="Use Z3 for the clang static analyzer"
<     )
< 
<     provides("libllvm@14", when="@14.0.0:14")
<     provides("libllvm@13", when="@13.0.0:13")
<     provides("libllvm@12", when="@12.0.0:12")
<     provides("libllvm@11", when="@11.0.0:11")
<     provides("libllvm@10", when="@10.0.0:10")
<     provides("libllvm@9", when="@9.0.0:9")
<     provides("libllvm@8", when="@8.0.0:8")
<     provides("libllvm@7", when="@7.0.0:7")
<     provides("libllvm@6", when="@6.0.0:6")
<     provides("libllvm@5", when="@5.0.0:5")
<     provides("libllvm@4", when="@4.0.0:4")
<     provides("libllvm@3", when="@3.0.0:3")
235,236d160
<     depends_on("cmake@3.13.4:", type="build", when="@12:")
<     depends_on("ninja", type="build")
244,246c168
< 
<     # clang and clang-tools dependencies
<     depends_on("z3@4.7.1:", when="+z3")
---
>     depends_on("z3", when="@9:")
254,255c176,177
<     # llvm-config --system-libs libraries.
<     depends_on("zlib")
---
>     # ncurses dependency
>     depends_on("ncurses+termlib")
258,261c180
<     with when("+lldb +python"):
<         depends_on("swig")
<         depends_on("swig@2:", when="@10:")
<         depends_on("swig@3:", when="@12:")
---
>     depends_on("swig", when="+lldb")
263d181
<     depends_on("ncurses", when="+lldb")
272a191,199
>     conflicts("+llvm_dylib", when="+shared_libs")
>     conflicts("+lldb", when="~clang")
>     conflicts("+libcxx", when="~clang")
>     conflicts("+internal_unwind", when="~clang")
>     conflicts("+compiler-rt", when="~clang")
>     conflicts("+flang", when="~clang")
>     # Introduced in version 11 as a part of LLVM and not a separate package.
>     conflicts("+flang", when="@:10")
> 
273a201
>     conflicts("%gcc@11:", when="@:7")
276,282c204
<     # clang/lib: a lambda parameter cannot shadow an explicitly captured entity
<     conflicts("%clang@8:", when="@:4")
<     # Internal compiler error on gcc 8.4 on aarch64 https://bugzilla.redhat.com/show_bug.cgi?id=1958295
<     conflicts("%gcc@8.4:8.4.9", when="@12: target=aarch64:")
< 
<     # When these versions are concretized, but not explicitly with +libcxx, these
<     # conflicts will enable clingo to set ~libcxx, making the build successful:
---
>     conflicts("%apple-clang@13:", when="@:9")
289,299c211,220
<     conflicts("%gcc@:10", when="@13:+libcxx")
<     conflicts("%clang@:10", when="@13:+libcxx")
<     conflicts("%apple-clang@:11", when="@13:+libcxx")
< 
<     # libcxx-4 and compiler-rt-4 fail to build with "newer" clang and gcc versions:
<     conflicts("%gcc@7:", when="@:4+libcxx")
<     conflicts("%clang@6:", when="@:4+libcxx")
<     conflicts("%apple-clang@6:", when="@:4+libcxx")
<     conflicts("%gcc@7:", when="@:4+compiler-rt")
<     conflicts("%clang@6:", when="@:4+compiler-rt")
<     conflicts("%apple-clang@6:", when="@:4+compiler-rt")
---
>     conflicts("%gcc@:10",         when="@13:+libcxx")
>     conflicts("%clang@:10",       when="@13:+libcxx")
>     conflicts("%apple_clang@:11", when="@13:+libcxx")
> 
>     # OMP TSAN exists in > 5.x
>     conflicts("+omp_tsan", when="@:5")
> 
>     # OpenMP via ENABLE_RUNTIME restrictions
>     conflicts("+omp_as_runtime", when="~clang", msg="omp_as_runtime requires clang being built.")
>     conflicts("+omp_as_runtime", when="@:11.1", msg="omp_as_runtime works since LLVM 12.")
303a225,240
>     # MLIR exists in > 10.x
>     conflicts("+mlir", when="@:9")
> 
>     # code signing is only necessary on macOS",
>     conflicts('+code_signing', when='platform=linux')
>     conflicts('+code_signing', when='platform=cray')
> 
>     conflicts(
>         '+code_signing',
>         when='~lldb platform=darwin',
>         msg="code signing is only necessary for building the "
>             "in-tree debug server on macOS. Turning this variant "
>             "off enables a build of llvm with lldb that uses the "
>             "system debug server",
>     )
> 
307c244
<     conflicts("^cmake@3.19.0", when="@6:11.0.0")
---
>     conflicts('^cmake@3.19.0', when='@6.0.0:11.0.0')
312,313c249,252
<     # sys/ustat.h has been removed in favour of statfs from glibc-2.28. Use fixed sizes:
<     patch("llvm5-sanitizer-ustat.patch", when="@4:6.0.0+compiler-rt")
---
>     # https://github.com/spack/spack/issues/24270
>     patch('https://src.fedoraproject.org/rpms/llvm10/raw/7ce7ebd066955ea95ba2b491c41fbc6e4ee0643a/f/llvm10-gcc11.patch',
>           sha256='958c64838c9d469be514eef195eca0f8c3ab069bc4b64a48fad59991c626bab8',
>           when='@8:11 %gcc@11:')
315,335c254,256
<     # Fix lld templates: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=230463
<     patch("llvm4-lld-ELF-Symbols.patch", when="@4+lld%clang@6:")
<     patch("llvm5-lld-ELF-Symbols.patch", when="@5+lld%clang@7:")
< 
<     # Fix missing std:size_t in 'llvm@4:5' when built with '%clang@7:'
<     patch("xray_buffer_queue-cstddef.patch", when="@4:5+compiler-rt%clang@7:")
< 
<     # https://github.com/llvm/llvm-project/commit/947f9692440836dcb8d88b74b69dd379d85974ce
<     patch("sanitizer-ipc_perm_mode.patch", when="@5:7+compiler-rt%clang@11:")
<     patch("sanitizer-ipc_perm_mode.patch", when="@5:9+compiler-rt%gcc@9:")
< 
<     # github.com/spack/spack/issues/24270: MicrosoftDemangle for %gcc@10: and %clang@13:
<     patch("missing-includes.patch", when="@8")
< 
<     # Backport from llvm upstream gcc ppc const expr long double issue
<     # see https://bugs.llvm.org/show_bug.cgi?id=39696
<     # This fix was initially commited (3bf63cf3b366) for the 9.0 release
<     # but was then broken (0583d9ea8d5e) prior to the 9.0 release and
<     # eventually unbroken (d9a42ec98adc) for the 11.0 release.  The first
<     # patch backports the original correct fix to previous releases.  The
<     # second patch backports the un-breaking of the original fix.
---
>     # Backport from llvm master + additional fix
>     # see  https://bugs.llvm.org/show_bug.cgi?id=39696
>     # for a bug report about this problem in llvm master.
337c258
<     patch("constexpr_longdouble_9.0.patch", when="@9:10+libcxx")
---
>     patch("constexpr_longdouble_9.0.patch", when="@9:10.0.0+libcxx")
343a265,267
>     # https://bugs.llvm.org/show_bug.cgi?id=39696
>     patch("thread-p9.patch", when="@develop+libcxx")
> 
350c274
<     patch("llvm_python_path.patch", when="@:11")
---
>     patch("llvm_python_path.patch", when="@11.0.0")
353,389c277
<     patch("llvm7_intel.patch", when="@7 %intel@18.0.2,19.0.0:19.1.99")
< 
<     # Remove cyclades support to build against newer kernel headers
<     # https://reviews.llvm.org/D102059
<     patch("no_cyclades.patch", when="@10:12.0.0")
<     patch("no_cyclades9.patch", when="@6:9")
< 
<     patch("llvm-gcc11.patch", when="@9:11%gcc@11:")
< 
<     # add -lpthread to build OpenMP libraries with Fujitsu compiler
<     patch("llvm12-thread.patch", when="@12 %fj")
< 
<     # add -lpthread to build OpenMP libraries
<     patch("llvm13-14-thread.patch", when="@13:14")
<     patch("llvm15-thread.patch", when="@15")
< 
<     # avoid build failed with Fujitsu compiler
<     patch("llvm13-fujitsu.patch", when="@13 %fj")
< 
<     # patch for missing hwloc.h include for libompd
<     patch("llvm14-hwloc-ompd.patch", when="@14")
< 
<     # make libflags a list in openmp subproject when ~omp_as_runtime
<     patch("libomp-libflags-as-list.patch", when="@3.7:14")
< 
<     # Add missing include leading to build fail with clang
<     patch(
<         "https://github.com/llvm/llvm-project/commit/b498303066a63a203d24f739b2d2e0e56dca70d1.patch?full_index=1",
<         sha256="514926d661635de47972c7d403c9c4669235aa51e22e56d44676d2a2709179b6",
<         when="@8:11",
<     )
< 
<     # fix detection of LLDB_PYTHON_EXE_RELATIVE_PATH
<     # see https://reviews.llvm.org/D133513
<     # TODO: adjust version constraint and switch to fetching from the upstream GitHub repo
<     #  when/if the bugfix is merged
<     patch("D133513.diff", level=0, when="@14:15+lldb+python")
---
>     patch('llvm7_intel.patch', when='@7 %intel@18.0.2,19.0.4')
395c283
<     executables = ["clang", "flang", "ld.lld", "lldb"]
---
>     executables = ['clang', 'flang', 'ld.lld', 'lldb']
405c293
<             if any(x in exe for x in ("vscode", "cpp", "-cl", "-gpu")):
---
>             if any(x in exe for x in ('vscode', 'cpp', '-cl', '-gpu')):
414c302
<             r"clang version ([^ )\n]+)-svn[~.\w\d-]*|"
---
>             r'clang version ([^ )\n]+)-svn[~.\w\d-]*|'
417,418c305,306
<             r"clang version ([^ )\n]+?)-[~.\w\d-]*|"
<             r"clang version ([^ )\n]+)|"
---
>             r'clang version ([^ )\n]+?)-[~.\w\d-]*|'
>             r'clang version ([^ )\n]+)|'
420c308
<             r"lldb version ([^ )\n]+)|"
---
>             r'lldb version ([^ )\n]+)|'
422c310
<             r"LLD ([^ )\n]+) \(compatible with GNU linkers\)"
---
>             r'LLD ([^ )\n]+) \(compatible with GNU linkers\)'
426,427c314,315
<             output = compiler("--version", output=str, error=str)
<             if "Apple" in output:
---
>             output = compiler('--version', output=str, error=str)
>             if 'Apple' in output:
441c329
<         variants, compilers = ["+clang"], {}
---
>         variants, compilers = ['+clang'], {}
444,452c332,340
<             if "clang++" in exe:
<                 compilers["cxx"] = exe
<             elif "clang" in exe:
<                 compilers["c"] = exe
<             elif "flang" in exe:
<                 variants.append("+flang")
<                 compilers["fc"] = exe
<                 compilers["f77"] = exe
<             elif "ld.lld" in exe:
---
>             if 'clang++' in exe:
>                 compilers['cxx'] = exe
>             elif 'clang' in exe:
>                 compilers['c'] = exe
>             elif 'flang' in exe:
>                 variants.append('+flang')
>                 compilers['fc'] = exe
>                 compilers['f77'] = exe
>             elif 'ld.lld' in exe:
454,455c342,343
<                 compilers["ld"] = exe
<             elif "lldb" in exe:
---
>                 compilers['ld'] = exe
>             elif 'lldb' in exe:
457c345
<                 compilers["lldb"] = exe
---
>                 compilers['lldb'] = exe
459,460c347,348
<         variants.append("+lld" if lld_found else "~lld")
<         variants.append("+lldb" if lldb_found else "~lldb")
---
>         variants.append('+lld' if lld_found else '~lld')
>         variants.append('+lldb' if lldb_found else '~lldb')
462c350
<         return "".join(variants), {"compilers": compilers}
---
>         return ''.join(variants), {'compilers': compilers}
467,473c355,360
<         msg = 'the extra attribute "compilers" must be set for ' 'the detected spec "{0}"'.format(
<             spec
<         )
<         assert "compilers" in extra_attributes, msg
<         compilers = extra_attributes["compilers"]
<         for key in ("c", "cxx"):
<             msg = "{0} compiler not found for {1}"
---
>         msg = ('the extra attribute "compilers" must be set for '
>                'the detected spec "{0}"'.format(spec))
>         assert 'compilers' in extra_attributes, msg
>         compilers = extra_attributes['compilers']
>         for key in ('c', 'cxx'):
>             msg = '{0} compiler not found for {1}'
481c368
<             return self.spec.extra_attributes["compilers"].get("c", None)
---
>             return self.spec.extra_attributes['compilers'].get('c', None)
483,484c370,371
<         if "+clang" in self.spec:
<             result = os.path.join(self.spec.prefix.bin, "clang")
---
>         if '+clang' in self.spec:
>             result = os.path.join(self.spec.prefix.bin, 'clang')
492c379
<             return self.spec.extra_attributes["compilers"].get("cxx", None)
---
>             return self.spec.extra_attributes['compilers'].get('cxx', None)
494,495c381,382
<         if "+clang" in self.spec:
<             result = os.path.join(self.spec.prefix.bin, "clang++")
---
>         if '+clang' in self.spec:
>             result = os.path.join(self.spec.prefix.bin, 'clang++')
503c390
<             return self.spec.extra_attributes["compilers"].get("fc", None)
---
>             return self.spec.extra_attributes['compilers'].get('fc', None)
505,506c392,393
<         if "+flang" in self.spec:
<             result = os.path.join(self.spec.prefix.bin, "flang")
---
>         if '+flang' in self.spec:
>             result = os.path.join(self.spec.prefix.bin, 'flang')
514c401
<             return self.spec.extra_attributes["compilers"].get("f77", None)
---
>             return self.spec.extra_attributes['compilers'].get('f77', None)
516,517c403,404
<         if "+flang" in self.spec:
<             result = os.path.join(self.spec.prefix.bin, "flang")
---
>         if '+flang' in self.spec:
>             result = os.path.join(self.spec.prefix.bin, 'flang')
520,524c407
<     @property
<     def libs(self):
<         return LibraryList(self.llvm_config("--libfiles", "all", result="list"))
< 
<     @run_before("cmake")
---
>     @run_before('cmake')
527,530c410,413
<             codesign = which("codesign")
<             mkdir("tmp")
<             llvm_check_file = join_path("tmp", "llvm_check")
<             copy("/usr/bin/false", llvm_check_file)
---
>             codesign = which('codesign')
>             mkdir('tmp')
>             llvm_check_file = join_path('tmp', 'llvm_check')
>             copy('/usr/bin/false', llvm_check_file)
532c415,416
<                 codesign("-f", "-s", "lldb_codesign", "--dryrun", llvm_check_file)
---
>                 codesign('-f', '-s', 'lldb_codesign', '--dryrun',
>                          llvm_check_file)
542,546c426,430
<                         "spack was unable to either find or set up"
<                         "code-signing on your system. Please refer to"
<                         "https://lldb.llvm.org/resources/build.html#"
<                         "code-signing-on-macos for details on how to"
<                         "create this identity."
---
>                         'spack was unable to either find or set up'
>                         'code-signing on your system. Please refer to'
>                         'https://lldb.llvm.org/resources/build.html#'
>                         'code-signing-on-macos for details on how to'
>                         'create this identity.'
550c434
<         if name == "cxxflags":
---
>         if name == 'cxxflags':
552,567c436,440
<             return (None, flags, None)
<         elif name == "ldflags" and self.spec.satisfies("%intel"):
<             flags.append("-shared-intel")
<             return (None, flags, None)
<         return (flags, None, None)
< 
<     def setup_build_environment(self, env):
<         """When using %clang, add only its ld.lld-$ver and/or ld.lld to our PATH"""
<         if self.compiler.name in ["clang", "apple-clang"]:
<             for lld in "ld.lld-{0}".format(self.compiler.version.version[0]), "ld.lld":
<                 bin = os.path.join(os.path.dirname(self.compiler.cc), lld)
<                 sym = os.path.join(self.stage.path, "ld.lld")
<                 if os.path.exists(bin) and not os.path.exists(sym):
<                     mkdirp(self.stage.path)
<                     os.symlink(bin, sym)
<             env.prepend_path("PATH", self.stage.path)
---
>             return(None, flags, None)
>         elif name == 'ldflags' and self.spec.satisfies('%intel'):
>             flags.append('-shared-intel')
>             return(None, flags, None)
>         return(flags, None, None)
581c454
<         define = self.define
---
>         define = CMakePackage.define
584c457
<         python = spec["python"]
---
>         python = spec['python']
589d461
<             define("LLVM_ENABLE_LIBXML2", False),
596,603d467
<         version_suffix = spec.variants["version_suffix"].value
<         if version_suffix != "none":
<             cmake_args.append(define("LLVM_VERSION_SUFFIX", version_suffix))
< 
<         shlib_symbol_version = spec.variants.get("shlib_symbol_version", None)
<         if shlib_symbol_version is not None and shlib_symbol_version.value != "none":
<             cmake_args.append(define("LLVM_SHLIB_SYMBOL_VERSION", shlib_symbol_version.value))
< 
613,625c477,483
<             cmake_args.extend(
<                 [
<                     define("CUDA_TOOLKIT_ROOT_DIR", spec["cuda"].prefix),
<                     define(
<                         "LIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES",
<                         ",".join(spec.variants["cuda_arch"].value),
<                     ),
<                     define(
<                         "CLANG_OPENMP_NVPTX_DEFAULT_ARCH",
<                         "sm_{0}".format(spec.variants["cuda_arch"].value[-1]),
<                     ),
<                 ]
<             )
---
>             cmake_args.extend([
>                 define("CUDA_TOOLKIT_ROOT_DIR", spec["cuda"].prefix),
>                 define("LIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES",
>                        ",".join(spec.variants["cuda_arch"].value)),
>                 define("CLANG_OPENMP_NVPTX_DEFAULT_ARCH",
>                        "sm_{0}".format(spec.variants["cuda_arch"].value[-1])),
>             ])
627,635c485,490
<                 cmake_args.extend(
<                     [
<                         define("LIBOMPTARGET_NVPTX_ENABLE_BCLIB", True),
<                         # work around bad libelf detection in libomptarget
<                         define(
<                             "LIBOMPTARGET_DEP_LIBELF_INCLUDE_DIR", spec["libelf"].prefix.include
<                         ),
<                     ]
<                 )
---
>                 cmake_args.extend([
>                     define("LIBOMPTARGET_NVPTX_ENABLE_BCLIB", True),
>                     # work around bad libelf detection in libomptarget
>                     define("LIBOMPTARGET_DEP_LIBELF_INCLUDE_DIR",
>                            spec["libelf"].prefix.include),
>                 ])
638,645c493,498
<             cmake_args.extend(
<                 [
<                     define("CUDA_TOOLKIT_ROOT_DIR", "IGNORE"),
<                     define("CUDA_SDK_ROOT_DIR", "IGNORE"),
<                     define("CUDA_NVCC_EXECUTABLE", "IGNORE"),
<                     define("LIBOMPTARGET_DEP_CUDA_DRIVER_LIBRARIES", "IGNORE"),
<                 ]
<             )
---
>             cmake_args.extend([
>                 define("CUDA_TOOLKIT_ROOT_DIR", "IGNORE"),
>                 define("CUDA_SDK_ROOT_DIR", "IGNORE"),
>                 define("CUDA_NVCC_EXECUTABLE", "IGNORE"),
>                 define("LIBOMPTARGET_DEP_CUDA_DRIVER_LIBRARIES", "IGNORE"),
>             ])
650,654c503,504
<             projects.append("lldb")
<             cmake_args.append(define("LLDB_ENABLE_LIBEDIT", True))
<             cmake_args.append(define("LLDB_ENABLE_CURSES", True))
<             if spec["ncurses"].satisfies("+termlib"):
<                 cmake_args.append(define("LLVM_ENABLE_TERMINFO", True))
---
>             if spec.version >= Version('10'):
>                 cmake_args.append(from_variant("LLDB_ENABLE_PYTHON", 'python'))
656,661c506,507
<                 cmake_args.append(define("LLVM_ENABLE_TERMINFO", False))
<             cmake_args.append(define("LLDB_ENABLE_LIBXML2", False))
<             if spec.version >= Version("10"):
<                 cmake_args.append(from_variant("LLDB_ENABLE_PYTHON", "python"))
<             else:
<                 cmake_args.append(define("LLDB_DISABLE_PYTHON", "~python" in spec))
---
>                 cmake_args.append(define("LLDB_DISABLE_PYTHON",
>                                          '~python' in spec))
664,665d509
<         else:
<             cmake_args.append(define("LLVM_ENABLE_TERMINFO", False))
668c512,514
<             cmake_args.append(define("LLVM_BINUTILS_INCDIR", spec["binutils"].prefix.include))
---
>             cmake_args.append(
>                 define("LLVM_BINUTILS_INCDIR", spec["binutils"].prefix.include)
>             )
678,682d523
<             if "@8" in spec:
<                 cmake_args.append(from_variant("CLANG_ANALYZER_ENABLE_Z3_SOLVER", "z3"))
<             elif "@9:" in spec:
<                 cmake_args.append(from_variant("LLVM_ENABLE_Z3_SOLVER", "z3"))
< 
684a526,527
>         if "+lldb" in spec:
>             projects.append("lldb")
688,691c531
<             if self.spec.satisfies("@15.0.0:"):
<                 runtimes.append("compiler-rt")
<             else:
<                 projects.append("compiler-rt")
---
>             projects.append("compiler-rt")
693,696c533,534
<             if self.spec.satisfies("@15.0.0:"):
<                 runtimes.extend(["libcxx", "libcxxabi"])
<             else:
<                 projects.extend(["libcxx", "libcxxabi"])
---
>             projects.append("libcxx")
>             projects.append("libcxxabi")
700,703c538
<             if self.spec.satisfies("@15.0.0:"):
<                 runtimes.append("libunwind")
<             else:
<                 projects.append("libunwind")
---
>             projects.append("libunwind")
708,719c543,565
<         cmake_args.extend(
<             [
<                 define("BUILD_SHARED_LIBS", False),
<                 from_variant("LLVM_BUILD_LLVM_DYLIB", "llvm_dylib"),
<                 from_variant("LLVM_LINK_LLVM_DYLIB", "link_llvm_dylib"),
<                 from_variant("LLVM_USE_SPLIT_DWARF", "split_dwarf"),
<                 # By default on Linux, libc++.so is a ldscript. CMake fails to add
<                 # CMAKE_INSTALL_RPATH to it, which fails. Statically link libc++abi.a
<                 # into libc++.so, linking with -lc++ or -stdlib=libc++ is enough.
<                 define("LIBCXX_ENABLE_STATIC_ABI_LIBRARY", True),
<             ]
<         )
---
>         cmake_args.append(from_variant("BUILD_SHARED_LIBS", "shared_libs"))
>         cmake_args.append(from_variant("LLVM_BUILD_LLVM_DYLIB", "llvm_dylib"))
>         cmake_args.append(from_variant("LLVM_USE_SPLIT_DWARF", "split_dwarf"))
> 
>         if "+all_targets" not in spec:  # all is default on cmake
> 
>             targets = ["NVPTX", "AMDGPU"]
>             if spec.version < Version("3.9.0"):
>                 # Starting in 3.9.0 CppBackend is no longer a target (see
>                 # LLVM_ALL_TARGETS in llvm's top-level CMakeLists.txt for
>                 # the complete list of targets)
>                 targets.append("CppBackend")
> 
>             if spec.target.family in ("x86", "x86_64"):
>                 targets.append("X86")
>             elif spec.target.family == "arm":
>                 targets.append("ARM")
>             elif spec.target.family == "aarch64":
>                 targets.append("AArch64")
>             elif spec.target.family in ("sparc", "sparc64"):
>                 targets.append("Sparc")
>             elif spec.target.family in ("ppc64", "ppc64le", "ppc", "ppcle"):
>                 targets.append("PowerPC")
721c567
<         cmake_args.append(define("LLVM_TARGETS_TO_BUILD", get_llvm_targets_to_build(spec)))
---
>             cmake_args.append(define("LLVM_TARGETS_TO_BUILD", targets))
726c572,573
<             cmake_args.append(define("GCC_INSTALL_PREFIX", self.compiler.prefix))
---
>             compiler = Executable(self.compiler.cc)
>             gcc_output = compiler('-print-search-dirs', output=str, error=str)
728,729c575,588
<         if self.spec.satisfies("~code_signing platform=darwin"):
<             cmake_args.append(define("LLDB_USE_SYSTEM_DEBUGSERVER", True))
---
>             for line in gcc_output.splitlines():
>                 if line.startswith("install:"):
>                     # Get path and strip any whitespace
>                     # (causes oddity with ancestor)
>                     gcc_prefix = line.split(":")[1].strip()
>                     gcc_prefix = ancestor(gcc_prefix, 4)
>                     break
>             cmake_args.append(define("GCC_INSTALL_PREFIX", gcc_prefix))
> 
>         if spec.satisfies("@4.0.0:"):
>             if spec.satisfies("platform=cray") or spec.satisfies(
>                 "platform=linux"
>             ):
>                 cmake_args.append(define("CMAKE_BUILD_WITH_INSTALL_RPATH", "1"))
731,734c590,591
<         # Enable building with CLT [and not require full Xcode]
<         # https://github.com/llvm/llvm-project/issues/57037
<         if self.spec.satisfies("@15.0.0: platform=darwin"):
<             cmake_args.append(define("BUILTINS_CMAKE_ARGS", "-DCOMPILER_RT_ENABLE_IOS=OFF"))
---
>         if self.spec.satisfies("~code_signing platform=darwin"):
>             cmake_args.append(define('LLDB_USE_SYSTEM_DEBUGSERVER', True))
744a602,611
>     @run_before("build")
>     def pre_install(self):
>         with working_dir(self.build_directory):
>             # When building shared libraries these need to be installed first
>             make("install-LLVMTableGen")
>             if self.spec.version >= Version("4.0.0"):
>                 # LLVMDemangle target was added in 4.0.0
>                 make("install-LLVMDemangle")
>             make("install-LLVMSupport")
> 
748c615
<         define = self.define
---
>         define = CMakePackage.define
751c618
<         if "+cuda ~omp_as_runtime" in self.spec:
---
>         if "+cuda" in self.spec and "+omp_as_runtime" not in self.spec:
753,754d619
<             prefix_paths = spack.build_environment.get_cmake_prefix_path(self)
<             prefix_paths.append(str(spec.prefix))
758,760c623
<                     "-G",
<                     "Ninja",
<                     define("CMAKE_BUILD_TYPE", spec.variants["build_type"].value),
---
>                     self.stage.source_path + "/openmp",
764d626
<                     define("CMAKE_PREFIX_PATH", prefix_paths),
767,775c629,634
<                 cmake_args.extend(
<                     [
<                         define("LIBOMPTARGET_NVPTX_ENABLE_BCLIB", True),
<                         define(
<                             "LIBOMPTARGET_DEP_LIBELF_INCLUDE_DIR", spec["libelf"].prefix.include
<                         ),
<                         self.stage.source_path + "/openmp",
<                     ]
<                 )
---
>                 cmake_args.append(define("LIBOMPTARGET_NVPTX_ENABLE_BCLIB",
>                                          True))
> 
>                 # work around bad libelf detection in libomptarget
>                 cmake_args.append(define("LIBOMPTARGET_DEP_LIBELF_INCLUDE_DIR",
>                                          spec["libelf"].prefix.include))
778,779c637,638
<                 ninja()
<                 ninja("install")
---
>                 make()
>                 make("install")
781c640
<             install_tree("llvm/bindings/python", python_platlib)
---
>             install_tree("llvm/bindings/python", site_packages_dir)
784c643
<                 install_tree("clang/bindings/python", python_platlib)
---
>                 install_tree("clang/bindings/python", site_packages_dir)
788,845d646
< 
<     def llvm_config(self, *args, **kwargs):
<         lc = Executable(self.prefix.bin.join("llvm-config"))
<         if not kwargs.get("output"):
<             kwargs["output"] = str
<         ret = lc(*args, **kwargs)
<         if kwargs.get("result") == "list":
<             return ret.split()
<         else:
<             return ret
< 
< 
< def get_llvm_targets_to_build(spec):
<     targets = spec.variants["targets"].value
< 
<     # Build everything?
<     if "all" in targets:
<         return "all"
< 
<     # Convert targets variant values to CMake LLVM_TARGETS_TO_BUILD array.
<     spack_to_cmake = {
<         "aarch64": "AArch64",
<         "amdgpu": "AMDGPU",
<         "arm": "ARM",
<         "avr": "AVR",
<         "bpf": "BPF",
<         "cppbackend": "CppBackend",
<         "hexagon": "Hexagon",
<         "lanai": "Lanai",
<         "mips": "Mips",
<         "msp430": "MSP430",
<         "nvptx": "NVPTX",
<         "powerpc": "PowerPC",
<         "riscv": "RISCV",
<         "sparc": "Sparc",
<         "systemz": "SystemZ",
<         "webassembly": "WebAssembly",
<         "x86": "X86",
<         "xcore": "XCore",
<     }
< 
<     if "none" in targets:
<         llvm_targets = set()
<     else:
<         llvm_targets = set(spack_to_cmake[target] for target in targets)
< 
<     if spec.target.family in ("x86", "x86_64"):
<         llvm_targets.add("X86")
<     elif spec.target.family == "arm":
<         llvm_targets.add("ARM")
<     elif spec.target.family == "aarch64":
<         llvm_targets.add("AArch64")
<     elif spec.target.family in ("sparc", "sparc64"):
<         llvm_targets.add("Sparc")
<     elif spec.target.family in ("ppc64", "ppc64le", "ppc", "ppcle"):
<         llvm_targets.add("PowerPC")
< 
<     return list(llvm_targets)


Differences for the 'miniocli' package


Differences for the 'namd' package
12c12
< from spack.package import *
---
> from spack import *
31,32c31,32
<     variant('fftw', default='3', values=('none', '2', '3', 'mkl', 'amdfftw', 'cray'),
<             description='Enable the use of FFTW/FFTW3/MKL FFT/AMDFFTW/CRAY FFTW')
---
>     variant('fftw', default='3', values=('none', '2', '3', 'mkl', 'amdfftw'),
>             description='Enable the use of FFTW/FFTW3/MKL FFT/AMDFFTW')
37,38d36
<     variant('plumed', default=False, description='Enable PLUMED support')
< 
44,45d41
<     patch('charmpp-shasta-2.14.patch', when='@2.14')
<     patch('lpython-2.14.patch.2')
55d50
<     depends_on('cray-fftw', when="fftw=cray")
64,66d58
<     depends_on('plumed@2.6:+mpi', when='@2.12:2.13+plumed')
<     depends_on('plumed@2.7:+mpi', when='@2.14+plumed')
< 
216,219d207
<         elif fftw_version == 'cray':
<             self._copy_arch_file('fftw3')
<             opts.extend(['--with-fftw3',
<                          '--fftw-prefix', spec['cray-fftw'].prefix])
257,259d244
<     def patch(self):
<         if '+plumed' in self.spec:
<             self.spec['plumed'].package.apply_patch(self, force=True)


Differences for the 'nano' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
6c6
< from spack.package import *
---
> from spack import *
13c13
<     url      = "https://www.nano-editor.org/dist/v6/nano-6.3.tar.xz"
---
>     url      = "https://www.nano-editor.org/dist/v4/nano-4.9.tar.xz"
17,32d16
<     # 6.x
<     version('6.3', sha256='eb532da4985672730b500f685dbaab885a466d08fbbf7415832b95805e6f8687')
<     version('6.2', sha256='2bca1804bead6aaf4ad791f756e4749bb55ed860eec105a97fba864bc6a77cb3')
<     version('6.1', sha256='3d57ec893fbfded12665b7f0d563d74431fc43abeaccacedea23b66af704db40')
<     version('6.0', sha256='93ac8cb68b4ad10e0aaeb80a2dd15c5bb89eb665a4844f7ad01c67efcb169ea2')
<     # 5.x
<     version('5.9', sha256='757db8cda4bb2873599e47783af463e3b547a627b0cabb30ea7bf71fb4c24937')
<     version('5.8', sha256='e43b63db2f78336e2aa123e8d015dbabc1720a15361714bfd4b1bb4e5e87768c')
<     version('5.7', sha256='d4b181cc2ec11def3711b4649e34f2be7a668e70ab506860514031d069cccafa')
<     version('5.6', sha256='fce183e4a7034d07d219c79aa2f579005d1fd49f156db6e50f53543a87637a32')
<     version('5.5', sha256='390b81bf9b41ff736db997aede4d1f60b4453fbd75a519a4ddb645f6fd687e4a')
<     version('5.4', sha256='fe993408b22286355809ce48ebecc4444d19af8203ed4959d269969112ed86e9')
<     version('5.3', sha256='c5c1cbcf622d9a96b6030d66409ed12b204e8bc01ef5e6554ebbe6fb1d734352')
<     version('5.2', sha256='32c2da43e1ae9a5e43437d8c6e1ec0388af870c7762c479e5bffb5f292bda7e1')
<     version('5.1', sha256='9efc46f341404d60095d16fc4f0419fc84b6e4eaeaf6ebce605d0465d92a6ee6')
<     version('5.0', sha256='7c0d94be69cd066f20df2868a2da02f7b1d416ce8d47c0850a8bd270897caa36')


Differences for the 'nektar' package
6c6
< from spack.package import *
---
> from spack import *
15,17d14
<     version('5.1.0', sha256='f5fdb729909e4dcd42cb071f06569634fa87fe90384ba0f2f857a9e0e56b6ac5')
<     version('5.0.3', sha256='1ef6f8f94f850ae78675bca3f752aa6c9f75401d1d6da4ec25df7fa795b860e9')
<     version('5.0.2', sha256='24af60a48dbdf0455149540b35a6a59acd636c47b3150b261899a1a1ca886c0b')
22d18
<     variant('avx2', default=True, description='Builds with simd avx2 support')
28,31d23
<     variant('unit-tests', default=False, description='Builds unit tests')
<     variant('regression-tests', default=False, description='Builds regression tests')
<     variant('benchmarking-tests', default=False, description='Builds benchmark timing codes')
<     variant('python', default=False, description='Builds python bindings')
33,34c25,26
<     # depends_on('cmake@2.8.8:', type='build', when="~hdf5")
<     # depends_on('cmake@3.2:', type='build', when="+hdf5")
---
>     depends_on('cmake@2.8.8:', type='build', when="~hdf5")
>     depends_on('cmake@3.2:', type='build', when="+hdf5")
36,37d27
<     depends_on('tinyxml', when='platform=darwin')
<     depends_on('mpi', when='+mpi')
40c30,31
<     # depends_on('boost@1.57.0 ~atomic ~chrono ~exception +filesystem ~graph +iostreams ~locale ~log ~math ~mpi +multithreaded ~numpy +pic ~program_options ~python ~random +regex ~serialization ~signals +system ~test +thread ~timer ~wave')
---
>     depends_on('boost@1.56.0: +iostreams')
>     depends_on('tinyxml', when='platform=darwin')
41a33
>     depends_on('mpi', when='+mpi')
50,51c42,43
<     conflicts('+hdf5', when='~mpi',
<               msg='Nektar hdf5 output is for parallel builds only')
---
>     conflicts("+hdf5", when="~mpi",
>               msg="Nektar's hdf5 output is for parallel builds only")
59,63d50
<         args.append('-DNEKTAR_USE_FFTW=ON')
<         args.append('-DNEKTAR_USE_ARPACK=ON')
<         args.append('-DNEKTAR_USE_HDF5=ON')
<         args.append('-DNEKTAR_ERROR_ON_WARNINGS=OFF')
< 
65,67c52,54
<         # args.append('-DNEKTAR_USE_FFTW=%s' % hasfeature('+fftw'))
<         # args.append('-DNEKTAR_USE_ARPACK=%s' % hasfeature('+arpack'))
<         # args.append('-DNEKTAR_USE_HDF5=%s' % hasfeature('+hdf5'))
---
>         args.append('-DNEKTAR_USE_FFTW=%s' % hasfeature('+fftw'))
>         args.append('-DNEKTAR_USE_ARPACK=%s' % hasfeature('+arpack'))
>         args.append('-DNEKTAR_USE_HDF5=%s' % hasfeature('+hdf5'))
69d55
<         args.append('-DNEKTAR_ENABLE_SIMD_AVX2=%s' % hasfeature('+avx2'))
71,75d56
<         args.append('-DNEKTAR_BUILD_UNIT_TESTS=%s' % hasfeature('+unit-tests'))
<         args.append('-DNEKTAR_BUILD_TESTS=%s' % hasfeature('+regression-tests'))
<         args.append('-DNEKTAR_BUILD_TIMINGS=%s' % hasfeature('+benchmarking-tests'))
<         args.append('-DNEKTAR_BUILD_PYTHON=%s' % hasfeature('+python'))
< 


Differences for the 'nextflow' package
6c6
< from spack.package import *
---
> from spack import *
17,19d16
<     version('22.10.0', sha256='6acea8bd21f7f66b1363eef900cd696d9523d2b9edb53327940f093189c1535e', expand=False)
<     version('22.04.3', sha256='a1a79c619200b9f2719e8467cd5b8fbcb427f43adf945233ba9e03cd2f2d814e', expand=False)
<     version('21.10.5', sha256='79ea52bc410211c7212eb2ed2407e18beb2b424ea2b10b6f5e8168e8d5fd4767', expand=False)


Differences for the 'opencv' package
290d289
<     patch('opencv3_cmakecompileroptions.patch', when='@3.2.2:3.4.12')


Differences for the 'openfoam' package
46,47d45
< #AEG: Importing this module to use their tools for copying files
< import shutil
51c49
< from spack.package import *
---
> from spack import *
54,59d51
< #AEG: Will use this function to save the original files before any modification
< def save_original(theFile):
<     backHere = theFile + '.original'
<     if not os.path.isfile(backHere):
<         shutil.copyfile(theFile, backHere)
< 
181,182d172
<             #AEG:saving original for easier installation debug
<             save_original(rcfile)
195,196d184
<             #AEG:saving original for easier installation debug
<             save_original(rcfile)
245a234
> 
254,255c243
<         #AEG:'PLIBS':  '-L{0} -l{1}'.format(lib, libname),
<         'PLIBS':  '-L{0} -L{1} -l{2} -l{3}'.format(lib+'$(WM_COMPILER_LIB_ARCH)',lib, libname,'rt'),
---
>         'PLIBS':  '-L{0} -l{1}'.format(lib, libname),
278,336c266,286
<     version("develop", branch="develop", submodules="True")
<     version("master", branch="master", submodules="True")
<     version("2206", sha256="db95eda4afb97ca870733b2d4201ef539099d0778e3f3eca9a075d4f1a0eea46")
<     version(
<         "2112_220610", sha256="e07fd7220520e4bcfd6c8100a7e027fba13eeca2b11085c9dd4642758422a63d"
<     )
<     version("2112", sha256="3e838731e79db1c288acc27aad8cc8a43d9dac1f24e5773e3b9fa91419a8c3f7")
<     version(
<         "2106_220610", sha256="5081a1493f4a316c165abf273c69bc2d1e07cf184e8b17ff97f845f876673231"
<     )
<     version(
<         "2106_211215", sha256="08c0d0b90b43505693ff8838e827f09e14ec9fb475956ef53cc2206c736277b1"
<     )
<     version("2106", sha256="11e41e5b9a253ef592a8f6b79f6aded623b28308192d02cec1327078523b5a37")
<     version(
<         "2012_220610", sha256="abbe46b0e93f0653397429f1fa2867d4459e0f6c28d90a08da0d4272f89d0757"
<     )
<     version(
<         "2012_210414", sha256="5260aaa79f91aad58a3a305c1a12d0d48b10f12e37cd99a6fa561969b15ea09d"
<     )
<     version("2012", sha256="3d6e39e39e7ae61d321fbc6db6c3748e6e5e1c4886454207a7f1a7321469e65a")
<     version(
<         "2006_220610", sha256="b8e9801c304f3fdf512ed8840093bf3f348fb8701121c88f3febd45e3826cb22"
<     )
<     version(
<         "2006_201012", sha256="9afb7eee072bfddcf7f3e58420c93463027db2394997ac4c3b87a8b07c707fb0"
<     )
<     version("2006", sha256="30c6376d6f403985fc2ab381d364522d1420dd58a42cb270d2ad86f8af227edc")
<     version(
<         "1912_220610", sha256="a0be015bd651b8eaa9c0fca0ffa97708821979fde9e2e23a1d98d9064c5c3f02"
<     )
<     version(
<         "1912_200506", sha256="831a39ff56e268e88374d0a3922479fd80260683e141e51980242cc281484121"
<     )
<     version(
<         "1912_200403", sha256="1de8f4ddd39722b75f6b01ace9f1ba727b53dd999d1cd2b344a8c677ac2db4c0"
<     )
<     version("1912", sha256="437feadf075419290aa8bf461673b723a60dc39525b23322850fb58cb48548f2")
<     version(
<         "1906_200312", sha256="f75645151ed5d8c5da592d307480979fe580a25627cc0c9718ef370211577594"
<     )
<     version(
<         "1906_191103", sha256="631a7fcd926ccbcdef0ab737a9dc55e58d6bedae2f3acaa041ea679db6c9303b"
<     )
<     version("1906", sha256="bee03c4b1da0d2c9f98eb469eeffbce3a8614728ef8e87f664042a7490976537")
<     version(
<         "1812_200312", sha256="925d2877c12740fab177a30fdcaa8899c262c15b90225f9c29d18a2d97532de0"
<     )
<     version(
<         "1812_191001", sha256="857a3d476696679313ea9a3f022b33446ddef2bcd417049a9486d504c12038dd"
<     )
<     version(
<         "1812_190531", sha256="51f0ef49a199edf3cd94e2ccfc7330e54e93c8e4ddb29ee66fe3e6b443583b34"
<     )
<     version("1812", sha256="d4d23d913419c6a364b1fe91509c1fadb5661bdf2eedb8fe9a8a005924eb2032")
<     version("1806", sha256="6951aab6405294fe59cec90b0a4e425f5403043191cda02ebaaa890ce1fcc819")
<     version("1712", sha256="4d22caa25d638d4c59bb93ee4dec51e8f71724f9f507eeb4162f771ebe885d21")
<     version("1706", sha256="7779048bb53798d9a5bd2b2be0bf302c5fd3dff98e29249d6e0ef7eeb83db79a")
<     version("1612", sha256="2909c43506a68e1f23efd0ca6186a6948ae0fc8fe1e39c78cc23ef0d69f3569d")
---
>     version('develop', branch='develop', submodules='True')
>     version('master', branch='master', submodules='True')
>     version('2106', sha256='11e41e5b9a253ef592a8f6b79f6aded623b28308192d02cec1327078523b5a37')
>     version('2012_210414', sha256='5260aaa79f91aad58a3a305c1a12d0d48b10f12e37cd99a6fa561969b15ea09d')
>     version('2012', sha256='3d6e39e39e7ae61d321fbc6db6c3748e6e5e1c4886454207a7f1a7321469e65a')
>     version('2006_201012', sha256='9afb7eee072bfddcf7f3e58420c93463027db2394997ac4c3b87a8b07c707fb0')
>     version('2006', sha256='30c6376d6f403985fc2ab381d364522d1420dd58a42cb270d2ad86f8af227edc')
>     version('1912_200506', sha256='831a39ff56e268e88374d0a3922479fd80260683e141e51980242cc281484121')
>     version('1912_200403', sha256='1de8f4ddd39722b75f6b01ace9f1ba727b53dd999d1cd2b344a8c677ac2db4c0')
>     version('1912', sha256='437feadf075419290aa8bf461673b723a60dc39525b23322850fb58cb48548f2')
>     version('1906_200312', sha256='f75645151ed5d8c5da592d307480979fe580a25627cc0c9718ef370211577594')
>     version('1906_191103', sha256='631a7fcd926ccbcdef0ab737a9dc55e58d6bedae2f3acaa041ea679db6c9303b')
>     version('1906', sha256='bee03c4b1da0d2c9f98eb469eeffbce3a8614728ef8e87f664042a7490976537')
>     version('1812_200312', sha256='925d2877c12740fab177a30fdcaa8899c262c15b90225f9c29d18a2d97532de0')
>     version('1812_191001', sha256='857a3d476696679313ea9a3f022b33446ddef2bcd417049a9486d504c12038dd')
>     version('1812_190531', sha256='51f0ef49a199edf3cd94e2ccfc7330e54e93c8e4ddb29ee66fe3e6b443583b34')
>     version('1812', sha256='d4d23d913419c6a364b1fe91509c1fadb5661bdf2eedb8fe9a8a005924eb2032')
>     version('1806', sha256='6951aab6405294fe59cec90b0a4e425f5403043191cda02ebaaa890ce1fcc819')
>     version('1712', sha256='4d22caa25d638d4c59bb93ee4dec51e8f71724f9f507eeb4162f771ebe885d21')
>     version('1706', sha256='7779048bb53798d9a5bd2b2be0bf302c5fd3dff98e29249d6e0ef7eeb83db79a')
>     version('1612', sha256='2909c43506a68e1f23efd0ca6186a6948ae0fc8fe1e39c78cc23ef0d69f3569d')
510,511c460
<                 #AEG:solutionFromSpack#284444:tty.info('OpenFOAM bashrc env: {0}'.format(bashrc))
<                 tty.debug('OpenFOAM bashrc env: {0}'.format(bashrc))
---
>                 tty.info('OpenFOAM bashrc env: {0}'.format(bashrc))
597,598d545
<                 #AEG:saving original for easier installation debug
<                 save_original(rcfile)
612,613d558
<             #AEG:saving original for easier installation debug
<             save_original(controlDict)
617,734d561
<     #AEG: Using this function to change the default controlDict settings to use collated filehandler
<     def configure_filehandler_collated(self):
<         """Enable filehandler collated by default
<         """
<         # Set 'fileHandler collated' in etc/controlDict
<         controlDict = 'etc/controlDict'
<         if os.path.exists(controlDict):
<             #AEG:saving original for easier installation debug
<             save_original(controlDict)
<             filter_file(r'fileHandler.*;', 'fileHandler collated;',
<                         controlDict, backup=False)
< 
< #----
< #AEG: Specific settings for Pawsey
<     def make_pawsey_settings(self):
<         """Settings for Pawsey
<            This for when no @when applies!
<         """
<         tty.info('Nothing to do in this method for Pawsey settings')
< 
<     @when('@1812:')
<     def make_pawsey_settings(self):
<         """Settings for Pawsey
<            This for @1812:
<         """
<         tty.info('Calling the collated change:')
<         self.configure_filehandler_collated()
< 
<     @run_before('configure')
<     def call_make_pawsey_settings(self):
<         """Finally performing Pawsey Settings
<         """
<         tty.info('Calling the method "pawsey_settings":')
<         self.make_pawsey_settings()
< #-----
< #-----
<     #AEG: This dummy function is when no @when applies:
<     def make_pawsey_rules(self):
<         """Pawsey rules when no @when applies
<         """
<         tty.info('Nothing to do for the Pawsey rules when no @when applies')
< 
<     #AEG: The Pawsey Rules rules:
<     @when('@1812: %gcc')
<     def make_pawsey_rules(self):
<         """Create Pawsey rules (based on Cray original rules) unless supplied upstream.
<         """
<         compOrig = 'Cray' #This is the name of existing wmake/rules to be used as template for the new ones
<         compNew = 'CrayGcc' #This is the name to be used for the new wmake/rules
<         compOrigBaseGeneral = 'Gcc' #These are the rules/General used in the original wmake/rules above
<         #compNewBaseGeneral = 'Gcc' #These are the rules/General to be used in the new rules
< 
<         general_rules = 'wmake/rules/General'
<         arch_rules = 'wmake/rules/linux64'  # self.arch
<         src = arch_rules + compOrig
<         dst = arch_rules + compNew
<         #AEG: In theory, next line shoudl be used for clang based ones
<         #self.configure_trapFpe_off()  # LLVM may falsely trigger FPE
< 
<         if os.path.exists(dst):
<             return
< 
<         # Handle rules/<ARCH><COMP> or rules/<ARCH>/<COMP>
<         if not os.path.exists(src):
<             src = join_path(arch_rules, compOrig)
<             dst = join_path(arch_rules, compNew)
<             if os.path.exists(dst):
<                 return
< 
<         tty.info('Add Pawsey wmake rules')
<         copy_tree(src, dst)
< 
<         if self.spec.version >= Version('1906'):
<             for cfg in ['c', 'c++', 'general']:
<                 rule = join_path(dst, cfg)
<                 #AEG:saving original for easier installation debug
<                 save_original(rule)
<                 filter_file(compOrig, compNew, rule, backup=False)
<         else:
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
<             filter_file(compOrig, compNew, rule, backup=False)
<             filter_file(compOrigBaseGeneral, spack_cc, join_path(dst, 'c'),
<                         backup=False, string=True)
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file(compOrig, compNew, rule, backup=False)
<             filter_file(compOrigBaseGeneral + '++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
< 
<         src = join_path(general_rules, compOrigBaseGeneral)
<         dst = join_path(general_rules, compNew)
<         copy_tree(src, dst)
<         if self.spec.version >= Version('1906'):
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
<             filter_file(compOrigBaseGeneral, spack_cc, join_path(dst, 'c'),
<                         backup=False, string=True)
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file(compOrigBaseGeneral + '++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
< 
<     #AEG: This additional function was needed for correct logic when using @when(@1812: %fj) for the fujitsu
<     @run_before('configure')
<     def call_make_pawsey_rules(self):
<         """Calling the correct Pawsey rules with @when
<         """
<         self.make_pawsey_rules()
< #-----
< #-----
<     #AEG: This additional function was needed for correct logic when using @when(@1812: %fj) for the fujitsu
<     def make_fujitsu_rules(self):
<         """Fujitsu rules when no @when applies
<         """
<         tty.info('Nothing to do for the fujitsu rules when no @when applies')
< 
<     #AEG: Original function for the fujitsu rules:
735a563
>     @run_before('configure')
744c572
<         dst = arch_rules + 'Fujitsu2'  # self.compiler
---
>         dst = arch_rules + 'Fujitsu'  # self.compiler
763,764d590
<                 #AEG:saving original for easier installation debug
<                 save_original(rule)
767,768d592
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
771,772d594
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
780,781d601
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c'))
784,795c604,605
<             #AEG:saving original for easier installation debug
<             save_original(join_path(dst, 'c++'))
<             filter_file('clang++', spack_cxx, join_path(dst, 'c++'),
<                         backup=False, string=True)
< 
<     #AEG: This additional function was needed for correct logic when using @when(@1812: %fj) for the fujitsu
<     @run_before('configure')
<     def call_make_fujitsu_rules(self):
<         """Calling the correct fujitsu rules with @when
<         """
<         self.make_fujitsu_rules()
< #-----
---
>         filter_file('clang++', spack_cxx, join_path(dst, 'c++'),
>                     backup=False, string=True)
803d612
<         
826,828d634
<                 #AEG: Adding the GMP and MPFR pieces
<                 ('boost_version', 'boost_system'),
<                 ('cgal_version', 'cgal_system'),
831,832d636
<                 ('GMP_ARCH_PATH',  spec['gmp'].prefix),
<                 ('MPFR_ARCH_PATH',  spec['mpfr'].prefix),
836,838c640
<                      pkglib(spec['cgal'], '${CGAL_ARCH_PATH}'),
<                      pkglib(spec['gmp'], '${GMP_ARCH_PATH}'),
<                      pkglib(spec['mpfr'], '${MPFR_ARCH_PATH}'))),
---
>                      pkglib(spec['cgal'], '${CGAL_ARCH_PATH}'))),
1104,1112c906
<         #AEG: updating the compiler if installing in a Cray:
<         plat = str(spec.architecture.platform)
<         tty.info('Spack Platform is set to {0}'.format(plat))
<         tty.info('Current compiler is set to {0}'.format(comp))
<         if plat == 'cray':
<             self.compiler = plat.capitalize() + comp.capitalize()
<         else:
<             self.compiler = comp.capitalize()
<         tty.info('Now compiler is set to {0}'.format(str(self.compiler)))
---
>         self.compiler = comp.capitalize()
1121,1125d914
<         #AEG:Redefining platform to use rules as linuxXX<Compiler> instead of original problematic "cray<Compiler>"
<         tty.info('Spack defined platform is {0}'.format(platform))
<         if platform == 'cray':
<             platform = 'linux'
<             tty.info('Now platform is {0}'.format(platform))
1185,1187c974,975
<     def _rule_directory(self, projdir, general=False, common=False):
<         """Return the wmake/rules/ General/common, General or
<         compiler rules directory.
---
>     def _rule_directory(self, projdir, general=False):
>         """Return the wmake/rules/ General or compiler rules directory.
1191,1192d978
<         if common:
<             return os.path.join(rules_dir, 'General', 'common')
1211,1213c997
<                 #AEG:'No wmake rule for {0} {1}'.format(self.arch, self.compiler))
<                 'Failed to find the directory {0}\n'.format(rule_dir)
<                 + 'No wmake rule for {0} {1}'.format(self.arch, self.compiler))
---
>                 'No wmake rule for {0} {1}'.format(self.arch, self.compiler))
1216,1246d999
<     def _rule_add_rpath(self, rpath, src, dst):
<         """Create {c,c++}-spack rules in the specified project directory.
<         The compiler rules are based on the respective {cflags,cxxflags}-Opt or
<         {c,c++}Opt rules with additional rpath information for the OpenFOAM libraries.
< 
<         The '-spack' rules channel spack information into OpenFOAM wmake
<         rules with minimal modification to OpenFOAM.
<         The rpath is used for the installed libpath (continue to use
<         LD_LIBRARY_PATH for values during the build).
<         """
<         # Note: the 'c' rules normally don't need rpath, since they are just
<         # used for some statically linked wmake tools, but left in anyhow.
< 
<         ok = os.path.isfile(src)
< 
<         if ok:
<             with open(src, 'r') as infile:
<                 with open(dst, 'w') as outfile:
<                     for line in infile:
<                         line = line.rstrip()
<                         outfile.write(line)
<                         if re.match(r'^\S+DBUG\s*:?=', line):
<                             outfile.write(" ")
<                             outfile.write(rpath)
<                         elif re.match(r'^\S+OPT\s*:?=', line):
<                             if self.arch_option:
<                                 outfile.write(' ')
<                                 outfile.write(self.arch_option)
<                         outfile.write('\n')
<         return ok
< 
1248,1250c1001,1003
<         """ Create {c,c++}-spack and mplib{USERMPI} rules in the
<         specified project directory.
<         Uses General/common/{c,c++}Opt or arch-specific {c,c++}Opt rules,
---
>         """ Create {c,c++}-spack and mplib{USERMPI}
>         rules in the specified project directory.
>         The compiler rules are based on the respective {c,c++}Opt rules
1268,1279d1020
<         comm_dir = self._rule_directory(projdir, False, True)
< 
<         # Compiler: copy existing {c,c++}Opt or General/common/{c,c++}Opt
<         # and modify '*DBUG' value to include rpath
< 
<         for lang in ['c', 'c++']:
<             gen = join_path(comm_dir, '{0}Opt'.format(lang))
<             src = join_path(rule_dir, '{0}Opt'.format(lang))
<             dst = join_path(rule_dir, '{0}{1}'.format(lang, self.compile_option))
< 
<             if not self._rule_add_rpath(rpath, src, dst):
<                 self._rule_add_rpath(rpath, gen, dst)
1281a1023,1040
>             # Compiler: copy existing cOpt,c++Opt and modify '*DBUG' value
>             for lang in ['c', 'c++']:
>                 src = '{0}Opt'.format(lang)
>                 dst = '{0}{1}'.format(lang, self.compile_option)
>                 with open(src, 'r') as infile:
>                     with open(dst, 'w') as outfile:
>                         for line in infile:
>                             line = line.rstrip()
>                             outfile.write(line)
>                             if re.match(r'^\S+DBUG\s*=', line):
>                                 outfile.write(' ')
>                                 outfile.write(rpath)
>                             elif re.match(r'^\S+OPT\s*=', line):
>                                 if self.arch_option:
>                                     outfile.write(' ')
>                                     outfile.write(self.arch_option)
>                             outfile.write('\n')
> 


Differences for the 'openjdk' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
9d8
< from os import chmod
11d9
< from spack.package import *
22,295c20,60
<     "17.0.5_8": {
<         "Linux-x86_64": (
<             "482180725ceca472e12a8e6d1a4af23d608d78287a77d963335e2a0156a020af",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jdk_x64_linux_hotspot_17.0.5_8.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "1c26c0e09f1641a666d6740d802beb81e12180abaea07b47c409d30c7f368109",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.5_8.tar.gz",
<         ),
<     },
<     "17.0.4.1_1": {
<         "Linux-x86_64": (
<             "5fbf8b62c44f10be2efab97c5f5dbf15b74fae31e451ec10abbc74e54a04ff44",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_linux_hotspot_17.0.4.1_1.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "3c7460de77421284b38b4e57cb1bd584a6cef55c34fc51a12270620544de2b8a",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.4.1_1.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "cbedd0a1428b3058d156e99e8e9bc8769e0d633736d6776a4c4d9136648f2fd1",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.4.1_1.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "ac21a5a87f7cfa00212ab7c41f7eb80ca33640d83b63ad850be811c24095d61a",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_x64_mac_hotspot_17.0.4.1_1.tar.gz",
<         ),
<         "Darwin-aarch64": (
<             "3a976943a9e6a635e68e2b06bd093fc096aad9f5894acda673d3bea0cb3a6f38",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1%2B1/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.4.1_1.tar.gz",
<         ),
<     },
<     "17.0.3_7": {
<         "Linux-x86_64": (
<             "81f5bed21077f9fbb04909b50391620c78b9a3c376593c0992934719c0de6b73",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.3_7.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "2e3c19c1707205c6b90cc04b416e8d83078ed98417d5a69dce3cf7dc0d7cfbca",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.3_7.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "a04587018c9719dca21073f19d56b335c4985f41afe7d99b24852c1a94b917e5",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.3_7.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "a5db5927760d2864316354d98ff18d18bec2e72bfac59cd25a416ed67fa84594",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_x64_mac_hotspot_17.0.3_7.tar.gz",
<         ),
<         "Darwin-arm64": (
<             "ff42be4d7a348d0d7aee07749e4daec9f427dcc7eb46b343f8131e8f3906c05b",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.3_7.tar.gz",
<         ),
<     },
<     "17.0.2_8": {
<         "Linux-x86_64": (
<             "288f34e3ba8a4838605636485d0365ce23e57d5f2f68997ac4c2e4c01967cd48",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_x64_linux_hotspot_17.0.2_8.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "302caf29f73481b2b914ba2b89705036010c65eb9bc8d7712b27d6e9bedf6200",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.2_8.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "532d831d6a977e821b7331ecf9ed995e5bbfe76f18a1b00ffa8dbb3a4e2887de",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.2_8.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "3630e21a571b7180876bf08f85d0aac0bdbb3267b2ae9bd242f4933b21f9be32",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_x64_mac_hotspot_17.0.2_8.tar.gz",
<         ),
<         "Darwin-arm64": (
<             "157518e999d712b541b883c6c167f8faabbef1d590da9fe7233541b4adb21ea4",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.2%2B8/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.2_8.tar.gz",
<         ),
<     },
<     "17.0.0_35": {
<         "Linux-x86_64": (
<             "6f1335d9a7855159f982dac557420397be9aa85f3f7bc84e111d25871c02c0c7",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_x64_linux_hotspot_17_35.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "e08e6d8c84da28a2c49ccd511f8835c329fbdd8e4faff662c58fa24cca74021d",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_aarch64_linux_hotspot_17_35.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "2e58f76fd332b73f323e47c73d0a81b76739debab067e7a32ed6abd73fd64c57",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_ppc64le_linux_hotspot_17_35.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "e9de8b1b62780fe99270a5b30f0645d7a91eded60438bcf836a05fa7b93c182f",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_x64_mac_hotspot_17_35.tar.gz",
<         ),
<         "Darwin-arm64": (
<             "910bb88543211c63298e5b49f7144ac4463f1d903926e94a89bfbf10163bbba1",
<             "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_aarch64_mac_hotspot_17_35.tar.gz",
<         ),
<     },
<     "16.0.2": {
<         "Linux-x86_64": (
<             "6c714ded7d881ca54970ec949e283f43d673a142fda1de79b646ddd619da9c0c",
<             "https://download.java.net/java/GA/jdk16.0.2/d4a915d82b4c4fbb9bde534da945d746/7/GPL/openjdk-16.0.2_linux-x64_bin.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "1ffb9c7748334945d9056b3324de3f797d906fce4dad86beea955153aa1e28fe",
<             "https://download.java.net/java/GA/jdk16.0.2/d4a915d82b4c4fbb9bde534da945d746/7/GPL/openjdk-16.0.2_linux-aarch64_bin.tar.gz",
<         ),
<     },
<     "11.0.17_8": {
<         "Linux-x86_64": (
<             "b8d46ed08ef4859476fe6421a7690d899ed83dce63f13fd894f994043177ef3c",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_x64_linux_hotspot_11.0.17_8.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "d18b5dd73fce9edd5c58f623a1173f9ee2d45023836b8753b96beae51673a432",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.17_8.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "18c636bd103e240d29cdb30d7867720ea9fb9ff7c645738bfb4d5b8027269263",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.17_8.tar.gz",
<         ),
<         "Darwin-aarch64": (
<             "79b18cbd398b67a52ebaf033dfca15c7af4c1a84ec5fa68a88f3bf742bb082f7",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_aarch64_mac_hotspot_11.0.17_8.tar.gz",
<         ),
<     },
<     "11.0.16.1_1": {
<         "Linux-x86_64": (
<             "5f6b513757d386352cf91514ed5859d1ab59364b4453e1f1c57152ba2039b8e2",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1%2B1/OpenJDK11U-jdk_x64_linux_hotspot_11.0.16.1_1.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "2b89cabf0ce1c2cedadd92b798d6e9056bc27c71a06f5ba24ede5dc9c316e3e8",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1%2B1/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.16.1_1.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "b18877871eda801ccb99bb34c5d7d77fccf6adad02514110c21389632ec91024",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1%2B1/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.16.1_1.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "723548e36e0b3e0a5a2f36a38b22ea825d3004e26054a0e254854adc57045352",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1%2B1/OpenJDK11U-jdk_x64_mac_hotspot_11.0.16.1_1.tar.gz",
<         ),
<         "Darwin-aarch64": (
<             "1953f06702d45eb54bae3ccf453b57c33de827015f5623a2dfc16e1c83e6b0a1",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1%2B1/OpenJDK11U-jdk_aarch64_mac_hotspot_11.0.16.1_1.tar.gz",
<         ),
<     },
<     "11.0.15_10": {
<         "Linux-x86_64": (
<             "5fdb4d5a1662f0cca73fec30f99e67662350b1fa61460fa72e91eb9f66b54d0b",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15%2B10/OpenJDK11U-jdk_x64_linux_hotspot_11.0.15_10.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "999fbd90b070f9896142f0eb28354abbeb367cbe49fd86885c626e2999189e0a",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15%2B10/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.15_10.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15%2B10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "ebd8b9553a7b4514599bc0566e108915ce7dc95d29d49a9b10b8afe4ab7cc9db",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15%2B10/OpenJDK11U-jdk_x64_mac_hotspot_11.0.15_10.tar.gz",
<         ),
<         "Darwin-arm64": (
<             "e84143a6c633a26aeefcb1fd5ad8dfb9e952cfec2a1af5c9d9b69f2390990dac",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15%2B10/OpenJDK11U-jdk_aarch64_mac_hotspot_11.0.15_10.tar.gz",
<         ),
<     },
<     "11.0.14.1_1": {
<         "Linux-x86_64": (
<             "43fb84f8063ad9bf6b6d694a67b8f64c8827552b920ec5ce794dfe5602edffe7",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_x64_linux_hotspot_11.0.14.1_1.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "79572f5172c6a040591d34632f98a20ed148702bbce2f57649e8ac01c0d2e3db",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.14.1_1.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "9750e11721282a9afd18a07743f19c699b2b71ce20d02f3f0a906088b9ae6d9a",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.14.1_1.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "8c69808f5d9d209b195575e979de0e43cdf5d0f1acec1853a569601fe2c1f743",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_x64_mac_hotspot_11.0.14.1_1.tar.gz",
<         ),
<     },
<     "11.0.12_7": {
<         "Linux-x86_64": (
<             "8770f600fc3b89bf331213c7aa21f8eedd9ca5d96036d1cd48cb2748a3dbefd2",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.12_7.tar.gz",
<         ),
<         "Linux-aarch64": (
<             "105bdc12fcd54c551e8e8ac96bc82412467244c32063689c41cee29ceb7452a2",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.12_7.tar.gz",
<         ),
<         "Linux-ppc64le": (
<             "234a9bafe029ea6cab5d46f9617b5d016a29faa187a42081d0e066f23647b7e5",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.12_7.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "13d056ee9a57bf2d5b3af4504c8f8cf7a246c4dff78f96b70dd05dad98075855",
<             "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_x64_mac_hotspot_11.0.12_7.tar.gz",
<         ),
<     },
<     "11.0.9.1_1": {
<         "Linux-ppc64le": (
<             "d94b6b46a14ab0974b1c1b89661741126d8cf8a0068b471b8f5fa286a71636b1",
<             "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.9.1%2B1/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.9.1_1.tar.gz",
<         )
<     },
<     "11.0.8_10": {
<         "Linux-x86_64": (
<             "6e4cead158037cb7747ca47416474d4f408c9126be5b96f9befd532e0a762b47",
<             "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.8%2B10/OpenJDK11U-jdk_x64_linux_hotspot_11.0.8_10.tar.gz",
<         )
<     },
<     "11.0.0-2020-01-01": {
<         "Linux-aarch64": (
<             "05c7d9c90edacd853850fbb0f52f8aa482809d0452c599cb9fe0b28b3b4bf329",
<             "https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk11u-2020-01-01-06-13/OpenJDK11U-jdk_aarch64_linux_hotspot_2020-01-01-06-13.tar.gz",
<         )
<     },
<     "11.0.2": {
<         "Linux-x86_64": (
<             "99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57",
<             "https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "f365750d4be6111be8a62feda24e265d97536712bc51783162982b8ad96a70ee",
<             "https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz",
<         ),
<     },
<     "11.0.1": {
<         "Linux-x86_64": (
<             "7a6bb980b9c91c478421f865087ad2d69086a0583aeeb9e69204785e8e97dcfd",
<             "https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz",
<         ),
<         "Darwin-x86_64": (
<             "fa07eee08fa0f3de541ee1770de0cdca2ae3876f3bd78c329f27e85c287cd070",
<             "https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_osx-x64_bin.tar.gz",
<         ),
<     },
<     "1.8.0_265-b01": {
<         "Linux-x86_64": (
<             "1285da6278f2d38a790a21148d7e683f20de0799c44b937043830ef6b57f58c4",
<             "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u265-b01/OpenJDK8U-jdk_x64_linux_hotspot_8u265b01.tar.gz",
<         )
<     },
<     "1.8.0_191-b12": {
<         "Linux-aarch64": (
<             "8eee0aede947b804f9a5f49c8a38b52aace8a30a9ebd9383b7d06042fb5a237c",
<             "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u191-b12/OpenJDK8U-jdk_aarch64_linux_hotspot_8u191b12.tar.gz",
<         )
<     },
<     "1.8.0_222-b10": {
<         "Linux-x86_64": (
<             "20cff719c6de43f8bb58c7f59e251da7c1fa2207897c9a4768c8c669716dc819",
<             "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u222-b10_openj9-0.15.1/OpenJDK8U-jdk_x64_linux_openj9_8u222b10_openj9-0.15.1.tar.gz",
<         )
<     },
<     "1.8.0_202-b08": {
<         "Linux-x86_64": (
<             "533dcd8d9ca15df231a1eb392fa713a66bca85a8e76d9b4ee30975f3823636b7",
<             "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_x64_linux_openj9_8u202b08_openj9-0.12.0.tar.gz",
<         )
<     },
<     "1.8.0_40-b25": {
<         "Linux-x86_64": (
<             "79e96dce03a14271040023231a7d0ae374b755d48adf68bbdaec30294e4e2b88",
<             "https://download.java.net/openjdk/jdk8u40/ri/jdk_ri-8u40-b25-linux-x64-10_feb_2015.tar.gz",
<         )
<     },
---
>     '17.0.0_35': {
>         'Linux-x86_64': ('6f1335d9a7855159f982dac557420397be9aa85f3f7bc84e111d25871c02c0c7', 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_x64_linux_hotspot_17_35.tar.gz'),
>         'Linux-aarch64': ('e08e6d8c84da28a2c49ccd511f8835c329fbdd8e4faff662c58fa24cca74021d', 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_aarch64_linux_hotspot_17_35.tar.gz'),
>         'Linux-ppc64le': ('2e58f76fd332b73f323e47c73d0a81b76739debab067e7a32ed6abd73fd64c57', 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_ppc64le_linux_hotspot_17_35.tar.gz'),
>         'Darwin-x86_64': ('e9de8b1b62780fe99270a5b30f0645d7a91eded60438bcf836a05fa7b93c182f', 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_x64_mac_hotspot_17_35.tar.gz'),
>         'Darwin-aarch64': ('910bb88543211c63298e5b49f7144ac4463f1d903926e94a89bfbf10163bbba1', 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17%2B35/OpenJDK17-jdk_aarch64_mac_hotspot_17_35.tar.gz')
>     },
>     '16.0.2': {
>         'Linux-x86_64': ('6c714ded7d881ca54970ec949e283f43d673a142fda1de79b646ddd619da9c0c', 'https://download.java.net/java/GA/jdk16.0.2/d4a915d82b4c4fbb9bde534da945d746/7/GPL/openjdk-16.0.2_linux-x64_bin.tar.gz'),
>         'Linux-aarch64': ('1ffb9c7748334945d9056b3324de3f797d906fce4dad86beea955153aa1e28fe', 'https://download.java.net/java/GA/jdk16.0.2/d4a915d82b4c4fbb9bde534da945d746/7/GPL/openjdk-16.0.2_linux-aarch64_bin.tar.gz'),
>     },
>     '11.0.12_7': {
>         'Linux-x86_64': ('8770f600fc3b89bf331213c7aa21f8eedd9ca5d96036d1cd48cb2748a3dbefd2', 'https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.12_7.tar.gz'),
>         'Linux-aarch64': ('105bdc12fcd54c551e8e8ac96bc82412467244c32063689c41cee29ceb7452a2', 'https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.12_7.tar.gz'),
>         'Linux-ppc64le': ('234a9bafe029ea6cab5d46f9617b5d016a29faa187a42081d0e066f23647b7e5', 'https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.12_7.tar.gz'),
>         'Darwin-x86_64': ('13d056ee9a57bf2d5b3af4504c8f8cf7a246c4dff78f96b70dd05dad98075855', 'https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_x64_mac_hotspot_11.0.12_7.tar.gz')
>     },
>     '11.0.9.1_1': {
>         'Linux-ppc64le': ('d94b6b46a14ab0974b1c1b89661741126d8cf8a0068b471b8f5fa286a71636b1', 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.9.1%2B1/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.9.1_1.tar.gz')},
>     '11.0.8_10': {
>         'Linux-x86_64': ('6e4cead158037cb7747ca47416474d4f408c9126be5b96f9befd532e0a762b47', 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.8%2B10/OpenJDK11U-jdk_x64_linux_hotspot_11.0.8_10.tar.gz')},
>     '11.0.0-2020-01-01': {
>         'Linux-aarch64': ('05c7d9c90edacd853850fbb0f52f8aa482809d0452c599cb9fe0b28b3b4bf329', 'https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk11u-2020-01-01-06-13/OpenJDK11U-jdk_aarch64_linux_hotspot_2020-01-01-06-13.tar.gz')},
>     '11.0.2': {
>         'Linux-x86_64': ('99be79935354f5c0df1ad293620ea36d13f48ec3ea870c838f20c504c9668b57', 'https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz'),
>         'Darwin-x86_64': ('f365750d4be6111be8a62feda24e265d97536712bc51783162982b8ad96a70ee', 'https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz')
>     },
>     '11.0.1': {
>         'Linux-x86_64': ('7a6bb980b9c91c478421f865087ad2d69086a0583aeeb9e69204785e8e97dcfd', 'https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz'),
>         'Darwin-x86_64': ('fa07eee08fa0f3de541ee1770de0cdca2ae3876f3bd78c329f27e85c287cd070', 'https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_osx-x64_bin.tar.gz')
>     },
>     '1.8.0_265-b01': {
>         'Linux-x86_64': ('1285da6278f2d38a790a21148d7e683f20de0799c44b937043830ef6b57f58c4', 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u265-b01/OpenJDK8U-jdk_x64_linux_hotspot_8u265b01.tar.gz')},
>     '1.8.0_191-b12': {
>         'Linux-aarch64': ('8eee0aede947b804f9a5f49c8a38b52aace8a30a9ebd9383b7d06042fb5a237c', 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u191-b12/OpenJDK8U-jdk_aarch64_linux_hotspot_8u191b12.tar.gz')},
>     '1.8.0_222-b10': {
>         'Linux-x86_64': ('20cff719c6de43f8bb58c7f59e251da7c1fa2207897c9a4768c8c669716dc819', 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u222-b10_openj9-0.15.1/OpenJDK8U-jdk_x64_linux_openj9_8u222b10_openj9-0.15.1.tar.gz')},
>     '1.8.0_202-b08': {
>         'Linux-x86_64': ('533dcd8d9ca15df231a1eb392fa713a66bca85a8e76d9b4ee30975f3823636b7', 'https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u202-b08/OpenJDK8U-jdk_x64_linux_openj9_8u202b08_openj9-0.12.0.tar.gz')},
>     '1.8.0_40-b25': {
>         'Linux-x86_64': ('79e96dce03a14271040023231a7d0ae374b755d48adf68bbdaec30294e4e2b88', 'https://download.java.net/openjdk/jdk8u40/ri/jdk_ri-8u40-b25-linux-x64-10_feb_2015.tar.gz')},
303c68
<     preferred_prefix = "11."
---
>     preferred_version = "11.0.12_7"
305d69
<     preferred_defined = False
310,313c74
<             is_preferred = not preferred_defined and ver.startswith(preferred_prefix)
<             if is_preferred:
<                 preferred_defined = True
< 
---
>             is_preferred = preferred_version == ver
316,321c77,82
<     provides("java@17", when="@17.0:17")
<     provides("java@16", when="@16.0:16")
<     provides("java@11", when="@11.0:11")
<     provides("java@10", when="@10.0:10")
<     provides("java@9", when="@9.0:9")
<     provides("java@8", when="@1.8.0:1.8")
---
>     provides('java@17', when='@17.0:17')
>     provides('java@16', when='@16.0:16')
>     provides('java@11', when='@11.0:11')
>     provides('java@10', when='@10.0:10')
>     provides('java@9', when='@9.0:9')
>     provides('java@8', when='@1.8.0:1.8')
323c84
<     conflicts("target=ppc64:", msg="openjdk is not available for ppc64 (big endian)")
---
>     conflicts('target=ppc64:', msg='openjdk is not available for ppc64 (big endian)')
333c94
<     executables = ["^java$"]
---
>     executables = ['^java$']
337c98
<         output = Executable(exe)("-version", output=str, error=str)
---
>         output = Executable(exe)('-version', output=str, error=str)
340c101
<         if "openjdk" not in output:
---
>         if 'openjdk' not in output:
343,344c104,105
<         match = re.search(r"\(build (\S+)\)", output)
<         return match.group(1).replace("+", "_") if match else None
---
>         match = re.search(r'\(build (\S+)\)', output)
>         return match.group(1).replace('+', '_') if match else None
364c125
<             prefix = java_home("--version", version, output=str).strip()
---
>             prefix = java_home('--version', version, output=str).strip()
379c140
<         return find_libraries(["libjvm"], root=self.home, recursive=True)
---
>         return find_libraries(['libjvm'], root=self.home, recursive=True)
382,387c143
<         top_dir = "Contents/Home/" if platform.system() == "Darwin" else "."
<         for root, dirs, files in os.walk(top_dir):
<             for momo in dirs:
<               chmod(os.path.join(root, momo), 0o755)
<             for momo in files:
<               chmod(os.path.join(root, momo), 0o755)
---
>         top_dir = 'Contents/Home/' if platform.system() == "Darwin" else '.'
393c149
<         env.set("JAVA_HOME", self.home)
---
>         env.set('JAVA_HOME', self.home)
401c157
<         env.set("JAVA_HOME", self.home)
---
>         env.set('JAVA_HOME', self.home)
404c160
<         for d in dependent_spec.traverse(deptype=("build", "run", "test")):
---
>         for d in dependent_spec.traverse(deptype=('build', 'run', 'test')):
406c162
<                 class_paths.extend(find(d.prefix, "*.jar"))
---
>                 class_paths.extend(find(d.prefix, '*.jar'))
409c165
<         env.set("CLASSPATH", classpath)
---
>         env.set('CLASSPATH', classpath)
419c175
<             class_paths = find(dependent_spec.prefix, "*.jar")
---
>             class_paths = find(dependent_spec.prefix, '*.jar')
421c177,180
<             env.prepend_path("CLASSPATH", classpath)
---
>             env.prepend_path('CLASSPATH', classpath)
> 
>     def setup_dependent_package(self, module, dependent_spec):
>         """Allows spec['java'].home to work."""
423,426c182
<     # Since we provide openjdk as a binary, we can't remove an obsolete glibc
<     # fix that prevents us from modifying the soname of libjvm.so. If we move
<     # to source builds this should be possible.
<     non_bindable_shared_objects = ["libjvm.so"]
---
>         self.spec.home = self.home


Differences for the 'plumed' package
31d30
<     version('2.6.6', sha256='43a7bb410280141c020363671c685a759d4497b3db3eb3c04899264b51a26859')
57,71c56
<     #
<     # From 'configure --help' @2.3:
<     # all/none/reset or : separated list such as
<     # +crystallization:-bias default: reset
<     #
<     # Implementation of optional modules in this Spack recipe gives two options:
<     # 1. Use a reference set of optional modules via `optional_modules`.
<     #    Allowed values are: `all`[default], `reset`, `none`.
<     # 2. Pick any combination of specific optional modules, e.g. `+analysis +colvar`.
<     #    Only activations are implemented, not deactivations, i.e. `-analysis`
<     #    has no effect. This constraint is needed to keep version conflicts manageable.
<     #    This also implies that specific modules only work with
<     #    `optional_modules=` `none` or `reset`.
<     # Keeping distinct variant types for these two ways of selecting modules seems
<     # the only way to handle conflicts between PLUMED versions and specific modules.
---
>     # FIXME: This needs to be an optional
75,76c60,61
<         values=('all', 'reset', 'none'),
<         description='Activates a predefined set of optional modules'
---
>         values=lambda x: True,
>         description='String that is used to build optional modules'
78,91d62
<     # List of all optional modules (conflicts with PLUMED versions are further down)
<     # As mentioned above, these can only activated, with '+', but not deactivated,
<     # with '-'. This constraint is needed to keep version conflicts manageable.
<     single_optional_modules = ['adjmat', 'analysis', 'annfunc', 'bias', 'cltools',
<                                'colvar', 'crystallization', 'dimred', 'drr', 'eds',
<                                'fisst', 'function', 'funnel', 'generic', 'imd', 'isdb',
<                                'logmfd', 'manyrestraints', 'mapping', 'maze', 'molfile',
<                                'multicolvar', 'opes', 'pamm', 'piv', 'reference',
<                                'secondarystructure', 'setup', 'vatom', 'ves',
<                                'vesselbase']
<     for mod in single_optional_modules:
<         variant(mod, default=False,
<                 description='Enables, if on, the optional module {0}'.format(mod))
< 
119,144d89
<     # Specific optional modules only added on top of `optional_modules` = none or reset
<     for mod in single_optional_modules:
<         conflicts('+' + mod, when='optional_modules=all', msg='specific optional modules require optional_modules=none or reset')
< 
<     # Conflicts between PLUMED versions and specific optional modules
<     conflicts('+imd', when='@2.3:', msg='imd was removed from version 2.3')
<     conflicts('+reference', when='@2.3:', msg='reference was removed from version 2.3')
<     conflicts('+vesselbase', when='@2.3:', msg='vesselbase was removed from version 2.3')
<     conflicts('+adjmat', when='@:2.2.99', msg='adjmat was added from version 2.3')
<     conflicts('+drr', when='@:2.3.99', msg='drr was added from version 2.4')
<     conflicts('+eds', when='@:2.3.99', msg='eds was added from version 2.4')
<     conflicts('+isdb', when='@:2.3.99', msg='isdb was added from version 2.4')
<     conflicts('+ves', when='@:2.3.99', msg='ves was added from version 2.4')
<     conflicts('+dimred', when='@:2.4.99', msg='dimred was added from version 2.5')
<     conflicts('+logmfd', when='@:2.4.99', msg='logmfd was added from version 2.5')
<     conflicts('+pamm', when='@:2.4.99', msg='pamm was added from version 2.5')
<     conflicts('+piv', when='@:2.4.99', msg='piv was added from version 2.5')
<     conflicts('+annfunc', when='@:2.5.99', msg='annfunc was added from version 2.6')
<     conflicts('+maze', when='@:2.5.99', msg='maze was added from version 2.6')
<     conflicts('+fisst', when='@:2.6.99', msg='fisst was added from version 2.7')
<     conflicts('+funnel', when='@:2.6.99', msg='funnel was added from version 2.7')
<     conflicts('+opes', when='@:2.6.99', msg='opes was added from version 2.7')
< 
<     # Fixes
<     patch('plumed-2.6.1-include-limits.patch', when='@2.6.1')
< 
149c94
<     def apply_patch(self, other, force=False):
---
>     def apply_patch(self, other):
167,168c112
<         if self.spec.satisfies('@2.7.2'): available.extend(["gromacs-2021.4"])
< 	
---
> 
180,183c124
<         if force:
<             plumed_patch('-p', '-f', '-e', target)
<         else:
<             plumed_patch('-p', '-e', target)
---
>         plumed_patch('-p', '-e', target)
271c212,213
<         # First consider set of optional_modules from `optional_modules`
---
>         # If we have specified any optional modules then add the argument to
>         # enable or disable them.
273,280c215,221
<         # Then add any specific module
<         for mod in self.single_optional_modules:
<             if '+{0}'.format(mod) in spec:
<                 optional_modules += ':+{0}'.format(mod)
<         # Add final string for optional modules to configure options
<         configure_opts.append(
<             '--enable-modules={0}'.format(optional_modules)
<         )
---
>         if optional_modules:
>             # From 'configure --help' @2.3:
>             # all/none/reset or : separated list such as
>             # +crystallization:-bias default: reset
>             configure_opts.append(
>                 '--enable-modules={0}'.format(optional_modules)
>             )


Differences for the 'py-archspec' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
5,7d4
< from spack.package import *
< 
< 
16c13,20
<     maintainers = ["alalazo"]
---
>     maintainers = ['alalazo']
> 
>     version('0.1.1', sha256='34bafad493b41208857232e21776216d716de37ab051a6a4a1cc1653f7e26423')
> 
>     depends_on('python@2.7:2.8,3.5:', type=('build', 'run'))
> 
>     depends_on('py-click@7.1.2:7', type=('build', 'run'))
>     depends_on('py-six@1.13.0:1', type=('build', 'run'))
18,36c22
<     version("0.1.3", sha256="a1aa7abde4d4ce38d115dfd572584906fa8e192e3272b8897e7b4fa1213ec27c")
<     version("0.1.2", sha256="8bb998370f0dc3e509d57c13724ab4109d761fd74af20da26fbe513b0fe01c46")
<     version("0.1.1", sha256="34bafad493b41208857232e21776216d716de37ab051a6a4a1cc1653f7e26423")
<     version("0.1.0", sha256="a4431d0bbe9c9dd7b293c39d8e7590034d512ce5f5a1278a6cbdf61b33f7202d")
< 
<     depends_on("python@2.7:2.8,3.5:", type=("build", "run"))
< 
<     depends_on("py-click@7.1.2:7", type=("build", "run"))
<     depends_on("py-six@1.13.0:1", type=("build", "run"))
< 
<     depends_on("py-setuptools", type="build")
<     depends_on("py-poetry-core@1.0.0:", type="build")
< 
<     def patch(self):
<         # See https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
<         with working_dir(self.stage.source_path):
<             if self.spec.satisfies("@:0.1.3"):
<                 filter_file("poetry>=0.12", "poetry_core>=1.0.0", "pyproject.toml")
<                 filter_file("poetry.masonry.api", "poetry.core.masonry.api", "pyproject.toml")
---
>     depends_on('py-setuptools', type='build')


Differences for the 'py-astropy' package
8c8
< from spack.package import *
---
> from spack import *
19,20d18
<     version('5.1', sha256='1db1b2c7eddfc773ca66fa33bd07b25d5b9c3b5eee2b934e0ca277fa5b1b7b7e')
<     version('4.2.1', sha256='ed483e472241153daec45f4b0c318c2c63d9f47305b78e6e63d32fc388c18427')
44,46d41
<     depends_on('py-extension-helpers', when='@4.1:', type=('build', 'run'))
<     depends_on('py-jinja2', when='@4.1:', type=('build', 'run'))
<     depends_on('py-erfa', type=('build', 'run'))
73,80c68,73
<     #def patch(self, spec):
<     #    # forces the rebuild of files with cython
<     #    # avoids issues with PyCode_New() in newer
<     #    # versions of python in the distributed
<     #    # cython-ized files
<     #    #if spec.satisifies('@1.0:4.0.1'):
<     #    #    os.remove('astropy/cython_version.py')
<     #    #os.remove('astropy/cython_version.py')
---
>     def patch(self):
>         # forces the rebuild of files with cython
>         # avoids issues with PyCode_New() in newer
>         # versions of python in the distributed
>         # cython-ized files
>         os.remove('astropy/cython_version.py')
83,91c76,82
<         args = []
<         if spec.satisfies('@1:4.0'):
<             args.extend([
<                 '--use-system-libraries',
<                 '--use-system-erfa',
<                 '--use-system-wcslib',
<                 '--use-system-cfitsio',
<                 '--use-system-expat',
<             ])
---
>         args = [
>             '--use-system-libraries',
>             '--use-system-erfa',
>             '--use-system-wcslib',
>             '--use-system-cfitsio',
>             '--use-system-expat'
>         ]
94a86
> 


Differences for the 'py-botocore' package
1,5c1
< #updating py-docutils version
< #-    depends_on("py-docutils@0.10:0.15", type=("build", "run"), when="@:1.17")
< #+    depends_on("py-docutils@0.10:0.19", type=("build", "run"), when="@:1.17")
< 
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
10c6
< from spack.package import *
---
> from spack import *
19,49c15,41
<     version("1.21.12", sha256="8710d03b9de3e3d94ed410f3e83809ca02050b091100d68c22ff7bf986f29fb6")
<     version("1.20.27", sha256="4477803f07649f4d80b17d054820e7a09bb2cb0792d0decc2812108bc3759c4a")
<     version("1.19.52", sha256="dc5ec23deadbe9327d3c81d03fddf80805c549059baabd80dea605941fe6a221")
<     version("1.13.44", sha256="a4409008c32a3305b9c469c5cc92edb5b79d6fcbf6f56fe126886b545f0a4f3f")
<     version("1.13.38", sha256="15766a367f39dba9de3c6296aaa7da31030f08a0117fd12685e7df682d8acee2")
<     version("1.12.169", sha256="25b44c3253b5ed1c9093efb57ffca440c5099a2d62fa793e8b6c52e72f54b01e")
< 
<     depends_on("python@2.6:", when="@1.12:1.13", type=("build", "run"))
<     depends_on("python@2.7:", when="@1.19", type=("build", "run"))
<     depends_on("python@2.7:2.8,3.6:", when="@1.20", type=("build", "run"))
<     depends_on("python@3.6:", when="@1.21:", type=("build", "run"))
< 
<     depends_on("py-setuptools", type="build")
<     depends_on("py-jmespath@0.7.1:0", type=("build", "run"))
<     depends_on("py-docutils@0.10:0.19", type=("build", "run"), when="@:1.17")
<     depends_on("py-ordereddict@1.1", type=("build", "run"), when="^python@2.6.0:2.6")
<     depends_on("py-simplejson@3.3.0", type=("build", "run"), when="^python@2.6.0:2.6")
<     depends_on("py-python-dateutil@2.1:2", type=("build", "run"))
<     depends_on("py-python-dateutil@2.1:2.6", type=("build", "run"), when="^python@2.6.0:2.6")
<     depends_on("py-urllib3@1.20:1.25", type=("build", "run"), when="@:1.14.11")
<     depends_on("py-urllib3@1.20:1.23", type=("build", "run"), when="@:1.13 ^python@2.6.0:2.6")
<     depends_on("py-urllib3@1.20:1.22", type=("build", "run"), when="@:1.13 ^python@3.3.0:3.3")
<     depends_on(
<         "py-urllib3@1.20:1.25.7", type=("build", "run"), when="@1.14.12:1.18 ^python@3.4.0:3.4"
<     )
<     depends_on("py-urllib3@1.20:1.25", type=("build", "run"), when="@1.14.12:1.18")
<     depends_on(
<         "py-urllib3@1.25.4:1.25.7", type=("build", "run"), when="@1.19.0: ^python@3.4.0:3.4"
<     )
<     depends_on("py-urllib3@1.25.4:1.25", type=("build", "run"), when="@1.19.0:1.19.15")
<     depends_on("py-urllib3@1.25.4:1.26", type=("build", "run"), when="@1.19.16:")
---
>     version('1.21.12', sha256='8710d03b9de3e3d94ed410f3e83809ca02050b091100d68c22ff7bf986f29fb6')
>     version('1.20.27', sha256='4477803f07649f4d80b17d054820e7a09bb2cb0792d0decc2812108bc3759c4a')
>     version('1.19.52',  sha256='dc5ec23deadbe9327d3c81d03fddf80805c549059baabd80dea605941fe6a221')
>     version('1.13.44',  sha256='a4409008c32a3305b9c469c5cc92edb5b79d6fcbf6f56fe126886b545f0a4f3f')
>     version('1.13.38',  sha256='15766a367f39dba9de3c6296aaa7da31030f08a0117fd12685e7df682d8acee2')
>     version('1.12.169', sha256='25b44c3253b5ed1c9093efb57ffca440c5099a2d62fa793e8b6c52e72f54b01e')
> 
>     depends_on('python@2.6:', when='@1.12:1.13', type=('build', 'run'))
>     depends_on('python@2.7:', when='@1.19', type=('build', 'run'))
>     depends_on('python@2.7:2.8,3.6:', when='@1.20', type=('build', 'run'))
>     depends_on('python@3.6:', when='@1.21:', type=('build', 'run'))
> 
>     depends_on('py-setuptools', type='build')
>     depends_on('py-jmespath@0.7.1:0', type=('build', 'run'))
>     depends_on('py-docutils@0.10:0.15', type=('build', 'run'), when='@:1.17')
>     depends_on('py-ordereddict@1.1', type=('build', 'run'), when='^python@2.6.0:2.6')
>     depends_on('py-simplejson@3.3.0', type=('build', 'run'), when='^python@2.6.0:2.6')
>     depends_on('py-python-dateutil@2.1:2', type=('build', 'run'))
>     depends_on('py-python-dateutil@2.1:2.6', type=('build', 'run'), when='^python@2.6.0:2.6')
>     depends_on('py-urllib3@1.20:1.25', type=('build', 'run'), when='@:1.14.11')
>     depends_on('py-urllib3@1.20:1.23', type=('build', 'run'), when='@:1.13 ^python@2.6.0:2.6')
>     depends_on('py-urllib3@1.20:1.22', type=('build', 'run'), when='@:1.13 ^python@3.3.0:3.3')
>     depends_on('py-urllib3@1.20:1.25.7', type=('build', 'run'), when='@1.14.12:1.18 ^python@3.4.0:3.4')
>     depends_on('py-urllib3@1.20:1.25', type=('build', 'run'), when='@1.14.12:1.18')
>     depends_on('py-urllib3@1.25.4:1.25.7', type=('build', 'run'), when='@1.19.0: ^python@3.4.0:3.4')
>     depends_on('py-urllib3@1.25.4:1.25', type=('build', 'run'), when='@1.19.0:1.19.15')
>     depends_on('py-urllib3@1.25.4:1.26', type=('build', 'run'), when='@1.19.16:')


Differences for the 'py-docutils' package
1,8c1
< #url change
< 
< #-    homepage = "http://docutils.sourceforge.net/"
< #-    pypi = "docutils/docutils-0.15.2.tar.gz"
< #+    homepage = "https://files.pythonhosted.org/packages/6b/5c/330ea8d383eb2ce973df34d1239b3b21e91cd8c865d21ff82902d952f91f/"
< #+    pypi = "docutils-0.19.tar.gz"
< 
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
15c8
< from spack.package import *
---
> from spack import *
25,26c18,19
<     homepage = "https://files.pythonhosted.org/packages/6b/5c/330ea8d383eb2ce973df34d1239b3b21e91cd8c865d21ff82902d952f91f/"
<     pypi = "docutils-0.19.tar.gz"
---
>     homepage = "http://docutils.sourceforge.net/"
>     pypi = "docutils/docutils-0.15.2.tar.gz"
28,43c21,35
<     version("0.19", sha256="33995a6753c30b7f577febfc2c50411fec6aac7f7ffeb7c4cfe5991072dcf9e6")
<     version("0.18.1", sha256="679987caf361a7539d76e584cbeddc311e3aee937877c87346f31debc63e9d06")
<     version("0.18", sha256="c1d5dab2b11d16397406a282e53953fe495a46d69ae329f55aa98a5c4e3c5fbb")
<     version("0.17.1", sha256="686577d2e4c32380bb50cbb22f575ed742d58168cee37e99117a854bcd88f125")
<     version("0.17", sha256="e2ffeea817964356ba4470efba7c2f42b6b0de0b04e66378507e3e2504bbff4c")
<     version("0.16", sha256="c2de3a60e9e7d07be26b7f2b00ca0309c207e06c100f9cc2a94931fc75a478fc")
<     version("0.15.2", sha256="a2aeea129088da402665e92e0b25b04b073c04b2dce4ab65caaa38b7ce2e1a99")
<     version("0.14", sha256="51e64ef2ebfb29cae1faa133b3710143496eca21c530f3f71424d77687764274")
<     version("0.13.1", sha256="718c0f5fb677be0f34b781e04241c4067cbd9327b66bdd8e763201130f5175be")
<     version("0.12", sha256="c7db717810ab6965f66c8cf0398a98c9d8df982da39b4cd7f162911eb89596fa")
< 
<     depends_on("python@3.7:", when="@0.19:", type=("build", "run"))
<     depends_on("python@2.7:2.8,3.5:", when="@0.16:", type=("build", "run"))
<     depends_on("python@2.6:2.8,3.3:", when="@0.14:0.15", type=("build", "run"))
<     depends_on("python@2.4:", when="@:0.13", type=("build", "run"))
<     depends_on("py-setuptools", when="@0.15:", type="build")
---
>     version('0.18',   sha256='c1d5dab2b11d16397406a282e53953fe495a46d69ae329f55aa98a5c4e3c5fbb')
>     version('0.17.1', sha256='686577d2e4c32380bb50cbb22f575ed742d58168cee37e99117a854bcd88f125')
>     version('0.17',   sha256='e2ffeea817964356ba4470efba7c2f42b6b0de0b04e66378507e3e2504bbff4c')
>     version('0.15.2', sha256='a2aeea129088da402665e92e0b25b04b073c04b2dce4ab65caaa38b7ce2e1a99')
>     version('0.14',   sha256='51e64ef2ebfb29cae1faa133b3710143496eca21c530f3f71424d77687764274')
>     version('0.13.1', sha256='718c0f5fb677be0f34b781e04241c4067cbd9327b66bdd8e763201130f5175be')
>     version('0.12',   sha256='c7db717810ab6965f66c8cf0398a98c9d8df982da39b4cd7f162911eb89596fa')
> 
>     depends_on('py-setuptools',       when='@0.15:',         type='build')
>     depends_on('python@2.7:2.8,3.5:', when='@0.16:',         type=('build', 'run'))
>     depends_on('python@2.6:2.8,3.3:', when='@0.14:0.15',     type=('build', 'run'))
>     depends_on('python@2.4:3',        when='@0.10:0.13',     type=('build', 'run'))
>     depends_on('python@2.2.1:3',      when='@0.6:0.9',       type=('build', 'run'))
>     depends_on('python@2.2.1:2.8',    when='@0.5.0:0.5', type=('build', 'run'))
>     depends_on('python@2.1:2.8',      when='@:0.4',          type=('build', 'run'))
48c40
<     @run_after("install")
---
>     @run_after('install')
53c45,46
<                 os.symlink(os.path.join(bin_path, file), os.path.join(bin_path, file[:-3]))
---
>                 os.symlink(os.path.join(bin_path, file),
>                            os.path.join(bin_path, file[:-3]))


Differences for the 'py-erfa' package


Differences for the 'py-hatchet' package
1c1
< # Copyright 2013-2022 Lawrence Livermore National Security, LLC and other
---
> # Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
6c6
< from spack.package import *
---
> from spack import *
14,15c14,15
<     url = "https://files.pythonhosted.org/packages/be/75/904c27e3d96d73d5743257caaf820564b0ac3be3497ec2765200ed5241f9/hatchet-1.3.1.tar.gz"
<     tags = ["radiuss"]
---
>     url      = "https://github.com/hatchet/hatchet/archive/v1.0.0.tar.gz"
>     tags     = ['radiuss']
19,35c19,32
<     version("1.3.1", sha256="17b36abd4bc8c6d5fed452267634170159062ca3c2534199b1c8378f2f3f1f28")
<     version("1.3.0", sha256="d77d071fc37863fdc9abc3fd9ea1088904cd98c6980a014a31e44595d2deac5e")
<     version("1.2.0", sha256="1d5f80abfa69d1a379dff7263908c5c915023f18f26d50b639556e2f43ac755e")
<     version("1.1.0", sha256="71bfa2881ef295294e5b4493acb8cce98d14c354e9ae59b42fb56a76d8ec7056")
<     version("1.0.1", sha256="e5a4b455ab6bfbccbce3260673d9af8d1e4b21e19a2b6d0b6c1e1d7727613b7a")
<     version("1.0.0", sha256="efd218bc9152abde0a8006489a2c432742f00283a114c1eeb6d25abc10f5862d")
< 
<     # https://github.com/hatchet/hatchet/issues/428
<     depends_on("python@2.7:3.10.15", when="@:1.3.0", type=("build", "run"))
<     depends_on("python@2.7:", when="@1.3.1:", type=("build", "run"))
< 
<     depends_on("py-setuptools", type="build")
<     depends_on("py-matplotlib", type=("build", "run"))
<     depends_on("py-numpy", type=("build", "run"))
<     depends_on("py-pandas", type=("build", "run"))
<     depends_on("py-pydot", type=("build", "run"))
<     depends_on("py-pyyaml", type=("build", "run"))
---
>     version('1.3.0', sha256='d77d071fc37863fdc9abc3fd9ea1088904cd98c6980a014a31e44595d2deac5e')
>     version('1.2.0', sha256='1d5f80abfa69d1a379dff7263908c5c915023f18f26d50b639556e2f43ac755e')
>     version('1.1.0', sha256='71bfa2881ef295294e5b4493acb8cce98d14c354e9ae59b42fb56a76d8ec7056')
>     version('1.0.1', sha256='e5a4b455ab6bfbccbce3260673d9af8d1e4b21e19a2b6d0b6c1e1d7727613b7a')
>     version('1.0.0', sha256='efd218bc9152abde0a8006489a2c432742f00283a114c1eeb6d25abc10f5862d')
> 
>     depends_on('python@2.7,3:', type=('build', 'run'))
> 
>     depends_on('py-setuptools', type='build')
>     depends_on('py-matplotlib', type=('build', 'run'))
>     depends_on('py-numpy',      type=('build', 'run'))
>     depends_on('py-pandas',     type=('build', 'run'))
>     depends_on('py-pydot',      type=('build', 'run'))
>     depends_on('py-pyyaml',     type=('build', 'run'))


Differences for the 'py-healpy' package
6c6
< from spack.package import *
---
> from spack import *
28,29d27
< 
<     patch('cfitsio_version_check.patch', when='@1.13:')


Differences for the 'quantum-espresso' package
21d20
<     version('6.8', sha256='654855c69864de7ece5ef2f2c0dea2d32698fe51192a8646b1555b0c57e033b2')
197c196
<     # QMCPACK converter patches for QE 6.8, 6.7, 6.4.1, 6.4, and 6.3
---
>     # QMCPACK converter patches for QE 6.7, 6.4.1, 6.4, and 6.3
213,217d211
<     # 6.8
<     patch_url = 'https://raw.githubusercontent.com/QMCPACK/qmcpack/develop/external_codes/quantum_espresso/add_pw2qmcpack_to_qe-6.8.diff'
<     patch_checksum = '69f7fbd72aba810c35a0b034188e45bea8f9f11d3150c0715e1b3518d5c09248'
<     patch(patch_url, sha256=patch_checksum, when='@6.8+qmcpack')
< 
288c282
<     patch('configure_aocc.patch', when='@6.7:6.8 %aocc')
---
>     patch('configure_aocc.patch', when='@6.7 %aocc')


Differences for the 'rclone' package
6c6
< from spack.package import *
---
> from spack import *
18d17
<     version('1.58.1', sha256='4d1d50a5b4888aa8eca10624073759ab8376c8b1acb38a238831d40074792524')


Differences for the 'singularity' package
6c6
< from spack.package import *
---
> from spack import *
29,32d28
<     version('3.8.7', sha256='3329f2e583f84a8343cb2c0380a1d6cbceafae7d1e633b5cbcadf7143eac859b')
<     version('3.8.6', sha256='bb5a3b7670ac9c7a4b3ce5b2c9f3d6b5be60e21b08d338c9dfdabb7b2a99f528')
<     version('3.8.5', sha256='7fff78b5c07b5d4d08269bd267ac5e994390f933321e54efd6b7c86683153ce4')
<     version('3.8.4', sha256='cb95e6d68b0d20f2b87d60f23a3bf707b7d3e87cee0dd4aa4380f8f481a57ebc')
53,69d48
< 
<     @run_after('install')
<     def set_pawsey_configuration(self):
<        configuration_file = join_path(self.spec.prefix.etc, 'singularity', 'singularity.conf')
< # do not allow execution of encrypted containers
<        filter_file(r'^ *allow *container *encrypted *=.*',
<                     'allow container encrypted = no',
<                     configuration_file)
< # do not mount home by default at runtime
<        filter_file(r'^ *mount *home *=.*',
<                     'mount home = no',
<                     configuration_file)
< # # Cray: use RAMFS
< # # beyond CLE6up05, this is not needed any more
< #       filter_file(r'^ *memory *fs *type *=.*',
< #                    'memory fs type = ramfs',
< #                    configuration_file)


Differences for the 'tower-agent' package


Differences for the 'tower-cli' package


Differences for the 'vasp' package
7,8d6
< import grp
< import shutil
10c8
< from spack.package import *
---
> from spack import *
25,26d22
<     version('6.3.0', sha256='adcf83bdfd98061016baae31616b54329563aa2739573f069dd9df19c2071ad3')
<     version('6.2.1', sha256='d25e2f477d83cb20fce6a2a56dcee5dccf86d045dd7f76d3ae19af8343156a13')
47c43
<     depends_on('openblas')
---
>     depends_on('blas')
57,65d52
<     conflicts('~scalapack', when='@6.3.0:', msg='scalapack is mandatory for vasp 6.3.0 and later')
< 
<     # Patch is adapted from patch provided in master branch of vaspsol:
<     # https://github.com/henniggroup/VASPsol/raw/master/src/patches/pbz_patch_610
<     # This may have to be further modified for later vasp versions.
<     #
<     # Note that this patch edits the solvation.F source under the VASPsol directory,
<     # which in turn will be copied into the vasp source in the edit stage below.
<     patch('vaspsol-6.2.1.patch.1', when='@6.0:+vaspsol')
71,88c58,70
<         # Following has been adapted from spack development branch, and special casing
<         # 6.3.0 for gcc as we're not needing nvhpc support for setonix and aocc is currently
<         # broken.
< 
<         if spec.satisfies('@6.3.0:'):
<             makefile_base = 'makefile.include.'
<             if '%gcc' in spec:
<                 if '+openmp' in spec:
<                     make_include = join_path('arch', 'makefile.include.gnu_omp')
<                 else:
<                     make_include = join_path('arch', 'makefile.include.gnu')
<             else:
<                 suffix = ''
<                 if '+openmp' in spec:
<                     suffix = '_omp'
< 
<                 make_include = join_path('arch', 'makefile.include.{0}{1}'.
<                                              format(spec.compiler.name), suffix)
---
>         if '%gcc' in spec:
>             make_include = join_path('arch', 'makefile.include.linux_gnu')
>         elif '%nvhpc' in spec:
>             make_include = join_path('arch', 'makefile.include.linux_pgi')
>             filter_file('-pgc++libs', '-c++libs', make_include, string=True)
>             filter_file('pgcc', spack_cc, make_include)
>             filter_file('pgc++', spack_cxx, make_include, string=True)
>             filter_file('pgfortran', spack_fc, make_include)
>             filter_file('/opt/pgi/qd-2.3.17/install/include',
>                         spec['qd'].prefix.include, make_include)
>             filter_file('/opt/pgi/qd-2.3.17/install/lib',
>                         spec['qd'].prefix.lib, make_include)
>             filter_file('^SCALAPACK[ ]{0,}=.*$', 'SCALAPACK ?=', make_include)
90,138c72,74
<             if '%gcc' in spec:
<                 if '+openmp' in spec:
<                     make_include = join_path('arch', 'makefile.include.linux_gnu_omp')
<                 else:
<                     make_include = join_path('arch', 'makefile.include.linux_gnu')
<             elif '%nvhpc' in spec:
<                 make_include = join_path('arch', 'makefile.include.linux_pgi')
<                 filter_file('-pgc++libs', '-c++libs', make_include, string=True)
<                 filter_file('pgcc', spack_cc, make_include)
<                 filter_file('pgc++', spack_cxx, make_include, string=True)
<                 filter_file('pgfortran', spack_fc, make_include)
<                 filter_file('/opt/pgi/qd-2.3.17/install/include',
<                             spec['qd'].prefix.include, make_include)
<                 filter_file('/opt/pgi/qd-2.3.17/install/lib',
<                             spec['qd'].prefix.lib, make_include)
<             elif '%aocc' in spec:
<                 if '+openmp' in spec:
<                     copy(
<                         join_path('arch', 'makefile.include.linux_gnu_omp'),
<                         join_path('arch', 'makefile.include.linux_aocc_omp')
<                     )
<                     make_include = join_path('arch', 'makefile.include.linux_aocc_omp')
<                 else:
<                     copy(
<                         join_path('arch', 'makefile.include.linux_gnu'),
<                         join_path('arch', 'makefile.include.linux_aocc')
<                     )
<                     make_include = join_path('arch', 'makefile.include.linux_aocc')
<                 filter_file(
<                     'gcc', '{0} {1}'.format(spack_cc, '-Mfree'),
<                     make_include, string=True
<                 )
<                 filter_file('g++', spack_cxx, make_include, string=True)
<                 filter_file('^CFLAGS_LIB[ ]{0,}=.*$',
<                             'CFLAGS_LIB = -O3', make_include)
<                 filter_file('^FFLAGS_LIB[ ]{0,}=.*$',
<                             'FFLAGS_LIB = -O2', make_include)
<                 filter_file('^OFLAG[ ]{0,}=.*$',
<                             'OFLAG = -O3', make_include)
<                 filter_file('^FC[ ]{0,}=.*$',
<                             'FC = {0}'.format(spec['mpi'].mpifc),
<                             make_include, string=True)
<                 filter_file('^FCL[ ]{0,}=.*$',
<                             'FCL = {0}'.format(spec['mpi'].mpifc),
<                             make_include, string=True)
<             else:
<                 suffix = ''
<                 if '+openmp' in spec:
<                     suffix = '_omp'
---
>             make_include = join_path('arch',
>                                      'makefile.include.linux_' +
>                                      spec.compiler.name)
140,143c76
<                 make_include = join_path('arch', 'makefile.include.linux_{0}{1}'.
<                                              format(spec.compiler.name), suffix)
< 
<         shutil.copy(make_include, 'makefile.include')
---
>         os.rename(make_include, 'makefile.include')
154,158c87,91
<         filter_file('^LIBDIR *=.*$', '', 'makefile.include')
<         filter_file('^BLAS *=.*$', 'BLAS ?=', 'makefile.include')
<         filter_file('^LAPACK *=.*$', 'LAPACK ?=', 'makefile.include')
<         filter_file('^FFTW *\?=.*$', 'FFTW ?=', 'makefile.include')
<         filter_file('^MPI_INC *=.*$', 'MPI_INC ?=', 'makefile.include')
---
>         filter_file('^LIBDIR[ ]{0,}=.*$', '', 'makefile.include')
>         filter_file('^BLAS[ ]{0,}=.*$', 'BLAS ?=', 'makefile.include')
>         filter_file('^LAPACK[ ]{0,}=.*$', 'LAPACK ?=', 'makefile.include')
>         filter_file('^FFTW[ ]{0,}?=.*$', 'FFTW ?=', 'makefile.include')
>         filter_file('^MPI_INC[ ]{0,}=.*$', 'MPI_INC ?=', 'makefile.include')
160,161c93
<         filter_file('^SCALAPACK.*$', '', 'makefile.include')
<         filter_file('^OBJECTS_LIB *= *', 'OBJECTS_LIB = getshmem.o ', 'makefile.include')
---
>         filter_file('^SCALAPACK*$', '', 'makefile.include')
204d135
<         spack_env.set('FFTW_ROOT', spec['fftw'].prefix)
210c141
<         if '+scalapack' in spec or spec.satisfies('@6.3.0:'):
---
>         if '+scalapack' in spec:
246,254d176
< 
<         newgrp = "vasp"
<         if spec.satisfies('@6:'):
<             newgrp = "vasp6"
< 
<         gid = grp.getgrnam(newgrp).gr_gid
<         for dpath, dnames, fnames in os.walk(prefix.bin):
<             for fn in fnames:
<                 os.chown(os.path.join(dpath, fn), -1, gid)


Differences for the 'wcstools' package


Differences for the 'wsclean' package


Differences for the 'singularityce' package
- is primarily the correct handling of the conmon dependency/build variant and also hash for new versions

Differences for the 'go' package 
- just the addition of newer versions and also pulled from spack dev as of 01/07/2023 as basis to add lots of versions. 