modules:

  default:
    roots:
      lmod: INSTALL_PREFIX/modules

    lmod:

      # select all packages that depend on python, or r, or java,
      # and set these modules to autoload their dependencies
      ^python:
        autoload: direct
      ^r:
        autoload: direct
      ^java:
        autoload: direct

      # overwrite for packages that don't need python at runtime
      cp2k:
        autoload: none
      gnuplot:
        autoload: none
      hpctoolkit:
        autoload: none

      # for libraries make sure to load direct dependencies
      # this is useful for developer workflows

      # library APIs
      blas:
        autoload: direct
      lapack:
        autoload: direct
      scalapack:
        autoload: direct
      fftw-api:
        autoload: direct

      # parallel libraries
      boost:
        autoload: direct
      hpx:
        autoload: direct
      kokkos:
        autoload: direct
      charmpp:
        autoload: direct

      # numerical libraries
      arpack-ng:
        autoload: direct
      amdblis:
        autoload: direct
      amdlibflame:
        autoload: direct
      amdscalapack:
        autoload: direct
      aocl-sparse:
        autoload: direct
      amdfftw:
        autoload: direct
      amdlibm:
        autoload: direct
      openblas:
        autoload: direct
      netlib-lapack:
        autoload: direct
      netlib-scalapack:
        autoload: direct
      eigen:
        autoload: direct
      fftw:
        autoload: direct
      gsl:
        autoload: direct
      blaspp:
        autoload: direct
      magma:
        autoload: direct
      plasma:
        autoload: direct
      slate:
        autoload: direct
      plumed:
        autoload: direct
      opencv:
        autoload: direct
      trilinos:
        autoload: direct
      petsc:
        autoload: direct
      metis:
        autoload: direct
      parmetis:
        autoload: direct
      scotch:
        autoload: direct


      # i/o libraries
      hdf5:
        autoload: direct
      adios2:
        autoload: direct
      netcdf-c:
        autoload: direct
      netcdf-cxx:
        autoload: direct
      netcdf-cxx4:
        autoload: direct
      netcdf-fortran:
        autoload: direct
      parallel-netcdf:
        autoload: direct
      squashfs:
        autoload: none


      projections:
        # modules on magnus have one of [apps, tools, python, devel] as start of module name 
        # an then {name}/{version}'
        # will be necessary to think of how to include variants 
        # that does not require manual updates. Fortunately, not many packages 
        # need this update 
        # explicit usage of versions now enforced in lua template
        # Also, by default all packages are hidden modules 
        # unless explicitly added here 


        # hpc applications
        amber: 'applications/{name}/{version}'
        ansys-fluids: 'applications/{name}/{version}'
        ansys-structures: 'applications/{name}/{version}'
        ansys-fluidstructures: 'applications/{name}/{version}'
        cpmd: 'applications/{name}/{version}'
        cp2k: 'applications/{name}/{version}'
        "gromacs +double": 'applications/{name}/{version}-double'
        "gromacs ~double": 'applications/{name}/{version}-mixed'
        amdgromacs: 'applications/gromacs-amd-gfx90a/{version}'
        "lammps ~rocm": 'applications/{name}/{version}'
        "lammps +rocm": 'applications/{name}-amd-gfx90a/{version}'
        "namd +rocm": 'applications/{name}-amd-gfx90a/{version}'
        "namd ~rocm": 'applications/{name}/{version}'
        nektar: 'applications/{name}/{version}'
        "nekrs +rocm": 'applications/{name}-amd-gfx90a/{version}'
        nwchem: 'applications/{name}/{version}'
        # Previously, no openfoam modules were generated for bare-metal installs
        # But after issues with singularity in Nov2022, now openfoam bare metal
        # will also be offered as module
        openfoam: 'applications/{name}/{version}'
        # This other flavour of openfoam will be kept blocked until bare-metal install is tested
        #openfoam-org: 'applications/{name}/{version}'
        ncl: 'applications/{name}/{version}' 
        quantum-espresso: 'applications/{name}/{version}'
        "vasp@6": 'applications/{name}6/{version}'
        vasp: 'applications/{name}/{version}'
        # since wrf and roms are currently not installed 
        # no need to add an explicity module
        # However, it may be useful to add our own module 
        # that provides all the dependencies needed by 
        # these packages
        #roms: 'applications/{name}/{version}'
        #wrf: 'applications/{name}/{version}'

        cdo: 'applications/{name}/{version}'
        nco: 'applications/{name}/{version}'
        ncview: 'applications/{name}/{version}'

        # numerical or parallelisation libraries 
        arpack-ng: 'libraries/{name}/{version}'
        "amdblis +suphandling": 'libraries/{name}/{version}'
        "amdblis ~suphandling": 'libraries/{name}/{version}-nosup'
        amdlibflame: 'libraries/{name}/{version}'
        amdscalapack: 'libraries/{name}/{version}'
        aocl-sparse: 'libraries/{name}/{version}'
        amdfftw: 'libraries/{name}/{version}'
        amdlibm: 'libraries/{name}/{version}'
        "boost +python cxxstd=14 visibility=hidden": 'libraries/{name}/{version}-c++14-python'
        "boost +python cxxstd=11 visibility=hidden": 'libraries/{name}/{version}-c++11-python'
        "boost +python cxxstd=98 visibility=hidden": 'libraries/{name}/{version}-c++98-python'
        "boost ~python cxxstd=14 visibility=hidden": 'libraries/{name}/{version}-c++14'
        "boost ~python cxxstd=11 visibility=hidden": 'libraries/{name}/{version}-c++11'
        "boost ~python cxxstd=98 visibility=hidden": 'libraries/{name}/{version}-c++98'
        # some packages require boost to have global visibility rather than standard hidden visibility
        "boost +python cxxstd=14 visibility=global": 'dependencies/.{name}/{version}-c++14-python-globalvis'
        "boost +python cxxstd=11 visibility=global": 'dependencies/.{name}/{version}-c++11-python-globalvis'
        "boost +python cxxstd=98 visibility=global": 'dependencies/.{name}/{version}-c++98-python-globalvis'
        "boost ~python cxxstd=14 visibility=global": 'dependencies/.{name}/{version}-c++14-globalvis'
        "boost ~python cxxstd=11 visibility=global": 'dependencies/.{name}/{version}-c++11-globalvis'
        "boost ~python cxxstd=98 visibility=global": 'dependencies/.{name}/{version}-c++98-globalvis'
        charmpp: 'libraries/{name}/{version}'
        eigen: 'libraries/{name}/{version}'
        fftw: 'libraries/{name}/{version}'
        gsl: 'libraries/{name}/{version}'
        hpx: 'libraries/{name}/{version}'
        "kokkos +hpx": 'libraries/{name}/{version}-hpx'
        "kokkos +openmp +rocm": 'libraries/{name}/{version}-openmp-rocm'
        "kokkos +openmp ~rocm": 'libraries/{name}/{version}-openmp-norocm' 
        kokkos: 'libraries/{name}/{version}'
        netlib-lapack: 'libraries/{name}/{version}'
        openblas: 'libraries/{name}/{version}'
        blaspp: 'libraries/{name}/{version}'
        opencv: 'libraries/{name}/{version}'
        plasma: 'libraries/{name}/{version}'
        "petsc +complex~trilinos": 'libraries/{name}/{version}-complex'
        "petsc ~complex~trilinos": 'libraries/{name}/{version}-nocomplex'
        "petsc +complex+trilinos": 'libraries/{name}/{version}-complex-trilinos'
        "petsc ~complex+trilinos": 'libraries/{name}/{version}-nocomplex-trilinos'
        plumed: 'libraries/{name}/{version}'
        netlib-scalapack: 'libraries/{name}/{version}'
        slate: 'libraries/{name}/{version}'
        "trilinos ~rocm": 'libraries/{name}/{version}'
        "trilinos +rocm": 'libraries/{name}-amd-gfx90a/{version}'
        "scotch ~metis": 'libraries/{name}/{version}'
        "scotch +metis": 'libraries/{name}/{version}-metis'
        "metis ~int64~real64": 'libraries/{name}/{version}'
        "metis +int64+real64": 'libraries/{name}/{version}-64bit'
        "parmetis ~int64": 'libraries/{name}/{version}'
        "parmetis +int64": 'libraries/{name}/{version}-64bit'
        "magma +rocm": 'libraries/{name}-amd-gfx90a/{version}'

        # IO libraries 
        # to account for all the hdf5 variants 
        # serial
        "hdf5 +cxx~mpi api=v112": 'libraries/{name}/{version}-api-v112'
        "hdf5 +cxx~mpi api=v110": 'libraries/{name}/{version}-api-v110'
        "hdf5 +cxx~mpi api=v18": 'libraries/{name}/{version}-api-v18'
        #parallel 
        "hdf5 ~cxx+mpi api=v112": 'libraries/{name}/{version}-parallel-api-v112'
        "hdf5 ~cxx+mpi api=v110": 'libraries/{name}/{version}-parallel-api-v110'
        "hdf5 ~cxx+mpi api=v18": 'libraries/{name}/{version}-parallel-api-v18'
        # and when api is default assume it is a dependency 
        "hdf5 api=default +cxx~mpi": 'dependencies/.{name}/{version}'
        "hdf5 api=default ~cxx+mpi": 'dependencies/.{name}/{version}-parallel'
        # adios also has similar variants 
        "adios2 +hdf5 +python": 'libraries/{name}/{version}-hdf5'
        "adios2 ~hdf5 +python": 'libraries/{name}/{version}'
        netcdf-c: 'libraries/{name}/{version}'
        netcdf-cxx: 'libraries/{name}/{version}'
        netcdf-cxx4: 'libraries/{name}/{version}'
        netcdf-fortran: 'libraries/{name}/{version}'
        parallel-netcdf: 'libraries/{name}/{version}'

        # programing languages 
        go: 'programming-languages/{name}/{version}'
        julia: 'programming-languages/{name}/{version}'
        openjdk: 'programming-languages/{name}/{version}'
        python: 'programming-languages/{name}/{version}'
        r: 'programming-languages/{name}/{version}'
        perl: 'programming-languages/{name}/{version}'
        ruby: 'programming-languages/{name}/{version}'
        rust: 'programming-languages/{name}/{version}'

        # utilities 
        autoconf: 'utilities/{name}/{version}'
        automake: 'utilities/{name}/{version}'
        libtool: 'utilities/{name}/{version}'
        ninja: 'utilities/{name}/{version}'
        # to avoid multiple cmake modules, picking a specific one
        "cmake ~doc+ncurses+ownlibs~qt": 'utilities/{name}/{version}'
        emacs: 'utilities/{name}/{version}'
        ffmpeg: 'utilities/{name}/{version}'
        gnuplot: 'utilities/{name}/{version}'
        matlab: 'utilities/{name}/{version}'
        nano: 'utilities/{name}/{version}'
        nextflow: 'utilities/{name}/{version}'
        parallel: 'utilities/{name}/{version}'
        py-pip: 'utilities/{name}/{version}-py{^python.version}'
        py-setuptools: 'utilities/{name}/{version}-py{^python.version}'
        reframe: 'utilities/{name}/{version}'
        singularity: 'utilities/{name}/{version}'
        singularityce: 'utilities/{name}/{version}'
        tower-agent: 'utilities/{name}/{version}'
        tower-cli: 'utilities/{name}/{version}'
        mpifileutils: 'utilities/{name}/{version}'
        feh: 'utilities/{name}/{version}'
        lz4: 'utilities/{name}/{version}'
        squashfs: 'utilities/{name}/{version}'

        # S3 clients
        awscli: 'utilities/{name}/{version}'
        py-boto3: 'utilities/{name}/{version}'
        rclone: 'utilities/{name}/{version}'
        miniocli: 'utilities/{name}/{version}'

        # visualisation
        igv: 'visualisation/{name}/{version}'
        paraview: 'visualisation/{name}/{version}'
        visit: 'visualisation/{name}/{version}'
        vmd: 'visualisation/{name}/{version}'
        
        # python
        py-cython: 'python-packages/{name}/{version}'
        py-dask: 'python-packages/{name}/{version}'
        py-h5netcdf: 'python-packages/{name}/{version}'
        py-h5py: 'python-packages/{name}/{version}'
        py-ipython: 'python-packages/{name}/{version}'
        py-matplotlib: 'python-packages/{name}/{version}'
        py-mpi4py: 'python-packages/{name}/{version}-py{^python.version}'
        py-netcdf4: 'python-packages/{name}/{version}'
        py-numba: 'python-packages/{name}/{version}'
        py-numpy: 'python-packages/{name}/{version}'
        py-pandas: 'python-packages/{name}/{version}'
        py-plotly: 'python-packages/{name}/{version}'
        py-scikit-learn: 'python-packages/{name}/{version}'
        py-scipy: 'python-packages/{name}/{version}'

        #bio 
        beast1: 'bio-applications/{name}/{version}'
        beast2: 'bio-applications/{name}/{version}'
        exabayes: 'bio-applications/{name}/{version}'
        examl: 'bio-applications/{name}/{version}'

        #astro 
        "casacore +adios2 +openmp +python": 'astro-applications/{name}/{version}-adios2-openmp'
        "casacore +adios2 ~openmp +python": 'astro-applications/{name}/{version}-adios2'
        "casacore ~adios2 +openmp +python": 'astro-applications/{name}/{version}-openmp'
        "casacore ~adios2 ~openmp +python": 'astro-applications/{name}/{version}'
        # some packages need casacore built without python so keep them but have them hidden
        "casacore +adios2 +openmp ~python": 'dependencies/.{name}/{version}-adios2-openmp-nopython'
        "casacore +adios2 ~openmp ~python": 'dependencies/.{name}/{version}-adios2-nopython'
        "casacore ~adios2 +openmp ~python": 'dependencies/.{name}/{version}-openmp-nopython'
        "casacore ~adios2 ~openmp ~python": 'dependencies/.{name}/{version}-nopython'
        cfitsio: 'astro-applications/{name}/{version}'
        "wcslib +cfitsio": 'astro-applications/{name}/{version}'
        "wcslib ~cfitsio": 'astro-applications/{name}/{version}-nocfitsio'
        cppzmq: 'astro-applications/{name}/{version}'
        libzmq: 'astro-applications/{name}/{version}'
        apr: 'astro-applications/{name}/{version}'
        apr-util: 'astro-applications/{name}/{version}'
        cppunit: 'astro-applications/{name}/{version}'
        "log4cxx cxxstd=17": 'astro-applications/{name}/{version}-c++17'
        "log4cxx cxxstd=11": 'astro-applications/{name}/{version}-c++11'
        mcpp: 'astro-applications/{name}/{version}'
        "xerces-c transcoder=gnuiconv": 'astro-applications/{name}/{version}-transcoder-gnuiconv'
        "xerces-c transcoder=iconv": 'astro-applications/{name}/{version}-transcoder-iconv'
        subversion: 'astro-applications/{name}/{version}'
        pgplot: 'astro-applications/{name}/{version}'
        py-funcsigs: 'astro-applications/{name}/{version}'
        py-pyfits: 'astro-applications/{name}/{version}'
        py-astropy: 'astro-applications/{name}/{version}'
        py-healpy: 'astro-applications/{name}/{version}'
        py-emcee: 'astro-applications/{name}/{version}'
        chgcentre: 'astro-applications/{name}/{version}'
        idg: 'astro-applications/{name}/{version}'
        everybeam: 'astro-applications/{name}/{version}'
        wcstools: 'astro-applications/{name}/{version}'
        "wsclean +mpi ~idg ~everybeam": 'astro-applications/{name}/{version}-mpi'
        "wsclean +mpi +idg ~everybeam": 'astro-applications/{name}/{version}-idg-mpi'
        "wsclean +mpi +idg +everybeam": 'astro-applications/{name}/{version}-idg-everybeam-mpi'
        "wsclean ~mpi ~idg ~everybeam": 'astro-applications/{name}/{version}'
        "wsclean ~mpi +idg ~everybeam": 'astro-applications/{name}/{version}-idg'
        "wsclean ~mpi +idg +everybeam": 'astro-applications/{name}/{version}-idg-everybeam'

        #performance tests 
        "hpl ~openmp": 'benchmarking/{name}/{version}'
        "hpl +openmp": 'benchmarking/{name}/{version}+openmp'
        osu-micro-benchmarks: 'benchmarking/{name}/{version}'
        ior: 'benchmarking/{name}/{version}'

        #developer tools
        caliper: 'developer-tools/{name}/{version}'
        hpctoolkit: 'developer-tools/{name}/{version}'
        hpcviewer: 'developer-tools/{name}/{version}'
        py-hatchet: 'developer-tools/{name}/{version}'

        # git needs special name, because `.git` is ignored by Lmod
        git: 'dependencies/.git-module/{version}-{hash:7}'

        # by default all others are hidden
        # PJE: Marco had no hash for dependencies 
        # but just to be careful to avoid name conflicts
        # added hash
        all: 'dependencies/.{name}/{version}-{hash:7}'

